{"version":3,"file":"debug.js","mappings":";cAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,QAAS,GAAIH,GACM,iBAAZC,QACdA,QAAe,MAAID,IAEnBD,EAAY,MAAIC,GACjB,CATD,CASGK,MAAM,qQCHT,SAASC,EAAMC,GACb,OAAOA,EAAI,GAAM,CACnB,CACA,MAAMC,EAAM,CAACD,EAAGE,EAAGC,IAAMC,KAAKC,IAAID,KAAKE,IAAIN,EAAGG,GAAID,GAClD,SAASK,EAAIP,GACX,OAAOC,EAAIF,EAAU,KAAJC,GAAW,EAAG,IACjC,CAIA,SAASQ,EAAIR,GACX,OAAOC,EAAIF,EAAU,IAAJC,GAAU,EAAG,IAChC,CACA,SAASS,EAAIT,GACX,OAAOC,EAAIF,EAAMC,EAAI,MAAQ,IAAK,EAAG,EACvC,CACA,SAASU,EAAIV,GACX,OAAOC,EAAIF,EAAU,IAAJC,GAAU,EAAG,IAChC,CAEA,MAAMW,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,IACrJC,EAAM,IAAI,oBACVC,EAAKN,GAAKK,EAAQ,GAAJL,GACdO,EAAKP,GAAKK,GAAS,IAAJL,IAAa,GAAKK,EAAQ,GAAJL,GACrCQ,EAAKR,IAAW,IAAJA,IAAa,IAAY,GAAJA,GAgCvC,MAAMS,EAAS,+GACf,SAASC,EAAS1B,EAAG2B,EAAG5B,GACtB,MAAMgB,EAAIY,EAAI1B,KAAKE,IAAIJ,EAAG,EAAIA,GACxBqB,EAAI,CAACQ,EAAGC,GAAKD,EAAI5B,EAAI,IAAM,KAAOD,EAAIgB,EAAId,KAAKC,IAAID,KAAKE,IAAI0B,EAAI,EAAG,EAAIA,EAAG,IAAK,GACrF,MAAO,CAACT,EAAE,GAAIA,EAAE,GAAIA,EAAE,GACxB,CACA,SAASU,EAAS9B,EAAG2B,EAAG9B,GACtB,MAAMuB,EAAI,CAACQ,EAAGC,GAAKD,EAAI5B,EAAI,IAAM,IAAMH,EAAIA,EAAI8B,EAAI1B,KAAKC,IAAID,KAAKE,IAAI0B,EAAG,EAAIA,EAAG,GAAI,GACnF,MAAO,CAACT,EAAE,GAAIA,EAAE,GAAIA,EAAE,GACxB,CACA,SAASW,EAAS/B,EAAGgC,EAAGhB,GACtB,MAAMiB,EAAMP,EAAS1B,EAAG,EAAG,IAC3B,IAAIkC,EAMJ,IALIF,EAAIhB,EAAI,IACVkB,EAAI,GAAKF,EAAIhB,GACbgB,GAAKE,EACLlB,GAAKkB,GAEFA,EAAI,EAAGA,EAAI,EAAGA,IACjBD,EAAIC,IAAM,EAAIF,EAAIhB,EAClBiB,EAAIC,IAAMF,EAEZ,OAAOC,CACT,CAUA,SAASE,EAAQtC,GACf,MACMuC,EAAIvC,EAAEuC,EADE,IAERC,EAAIxC,EAAEwC,EAFE,IAGRrB,EAAInB,EAAEmB,EAHE,IAIRd,EAAMD,KAAKC,IAAIkC,EAAGC,EAAGrB,GACrBb,EAAMF,KAAKE,IAAIiC,EAAGC,EAAGrB,GACrBjB,GAAKG,EAAMC,GAAO,EACxB,IAAIH,EAAG2B,EAAGT,EAOV,OANIhB,IAAQC,IACVe,EAAIhB,EAAMC,EACVwB,EAAI5B,EAAI,GAAMmB,GAAK,EAAIhB,EAAMC,GAAOe,GAAKhB,EAAMC,GAC/CH,EArBJ,SAAkBoC,EAAGC,EAAGrB,EAAGE,EAAGhB,GAC5B,OAAIkC,IAAMlC,GACCmC,EAAIrB,GAAKE,GAAMmB,EAAIrB,EAAI,EAAI,GAElCqB,IAAMnC,GACAc,EAAIoB,GAAKlB,EAAI,GAEfkB,EAAIC,GAAKnB,EAAI,CACvB,CAaQoB,CAASF,EAAGC,EAAGrB,EAAGE,EAAGhB,GACzBF,EAAQ,GAAJA,EAAS,IAER,CAAK,EAAJA,EAAO2B,GAAK,EAAG5B,EACzB,CACA,SAASwC,EAAMnB,EAAGL,EAAGC,EAAGC,GACtB,OACEuB,MAAMC,QAAQ1B,GACVK,EAAEL,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAChBK,EAAEL,EAAGC,EAAGC,IACZyB,IAAIrC,EACR,CACA,SAASsC,EAAQ3C,EAAG2B,EAAG5B,GACrB,OAAOwC,EAAMb,EAAU1B,EAAG2B,EAAG5B,EAC/B,CAOA,SAAS6C,EAAI5C,GACX,OAAQA,EAAI,IAAM,KAAO,GAC3B,CAiDA,MAAM0C,EAAM,CACVG,EAAG,OACHC,EAAG,QACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,SACHC,EAAG,QACH1C,EAAG,KACH2C,EAAG,KACHC,EAAG,KACH3C,EAAG,KACHC,EAAG,QACHC,EAAG,QACH0C,EAAG,KACHC,EAAG,WACH1C,EAAG,KACH2C,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,QACH9C,EAAG,KACH+C,EAAG,KACHC,EAAG,OACHC,EAAG,KACHC,EAAG,QACHC,EAAG,MAECC,EAAU,CACdC,OAAQ,SACRC,YAAa,SACbC,KAAM,OACNC,UAAW,SACXC,KAAM,SACNC,MAAO,SACPC,OAAQ,SACRC,MAAO,IACPC,aAAc,SACdC,GAAI,KACJC,QAAS,SACTC,KAAM,SACNC,UAAW,SACXC,OAAQ,SACRC,SAAU,SACVC,QAAS,SACTC,IAAK,SACLC,YAAa,SACbC,QAAS,SACTC,QAAS,SACTC,KAAM,OACNC,IAAK,KACLC,MAAO,OACPC,QAAS,SACTC,KAAM,SACNC,KAAM,OACNC,KAAM,SACNC,OAAQ,SACRC,QAAS,SACTC,SAAU,SACVC,OAAQ,SACRC,MAAO,SACPC,IAAK,SACLC,OAAQ,SACRC,OAAQ,SACRC,KAAM,SACNC,MAAO,SACPC,MAAO,SACPC,IAAK,OACLC,OAAQ,SACRC,OAAQ,SACRC,SAAU,OACVC,OAAQ,SACRC,OAAQ,SACRC,SAAU,SACVC,SAAU,SACVC,SAAU,SACVC,SAAU,SACVC,OAAQ,SACRC,QAAS,SACTC,UAAW,SACXC,IAAK,SACLC,OAAQ,SACRC,IAAK,SACLC,IAAK,OACLC,MAAO,SACPC,IAAK,SACLC,QAAS,SACTC,OAAQ,SACRC,QAAS,SACTC,MAAO,SACPC,KAAM,SACNC,MAAO,SACPC,OAAQ,SACRC,UAAW,SACXC,QAAS,SACTC,WAAY,SACZC,IAAK,SACLC,KAAM,SACNC,MAAO,SACPC,UAAW,SACXC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,SACRC,MAAO,SACPC,MAAO,SACPC,QAAS,SACTC,IAAK,SACLC,KAAM,OACNC,QAAS,SACTC,IAAK,SACLC,OAAQ,SACRC,MAAO,SACPC,WAAY,SACZC,IAAK,KACLC,MAAO,SACPC,OAAQ,SACRC,OAAQ,SACRC,KAAM,SACNC,UAAW,OACXC,IAAK,SACLC,SAAU,SACVC,WAAY,SACZC,QAAS,SACTC,SAAU,SACVC,QAAS,SACTC,WAAY,SACZC,KAAM,KACNC,OAAQ,SACRC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,QAAS,SACTC,KAAM,SACNC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,WAAY,SACZC,UAAW,SACXC,QAAS,SACTC,KAAM,SACNC,IAAK,SACLC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,YAAa,SACbC,GAAI,SACJC,SAAU,SACVC,MAAO,SACPC,UAAW,SACXC,MAAO,SACPC,UAAW,SACXC,MAAO,SACPC,QAAS,SACTC,MAAO,SACPC,OAAQ,SACRC,MAAO,SACPC,IAAK,SACLC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,SAAU,OACVC,OAAQ,SACRC,IAAK,SACLC,IAAK,OACLC,MAAO,SACPC,OAAQ,SACRC,GAAI,SACJC,MAAO,SACPC,IAAK,SACLC,KAAM,SACNC,UAAW,SACXC,GAAI,SACJC,MAAO,UAmBT,IAAIC,EAeJ,MAAMC,EAAS,uGAiCTC,EAAK5N,GAAKA,GAAK,SAAgB,MAAJA,EAAqC,MAAzBI,KAAKyN,IAAI7N,EAAG,EAAM,KAAe,KACxE8N,EAAO9N,GAAKA,GAAK,OAAUA,EAAI,MAAQI,KAAKyN,KAAK7N,EAAI,MAAS,MAAO,KAa3E,SAAS+N,EAAO/N,EAAGqC,EAAG2L,GACpB,GAAIhO,EAAG,CACL,IAAIiO,EAAM3L,EAAQtC,GAClBiO,EAAI5L,GAAKjC,KAAKC,IAAI,EAAGD,KAAKE,IAAI2N,EAAI5L,GAAK4L,EAAI5L,GAAK2L,EAAa,IAAN3L,EAAU,IAAM,IACvE4L,EAAMnL,EAAQmL,GACdjO,EAAEuC,EAAI0L,EAAI,GACVjO,EAAEwC,EAAIyL,EAAI,GACVjO,EAAEmB,EAAI8M,EAAI,EACZ,CACF,CACA,SAASC,EAAMlO,EAAGmO,GAChB,OAAOnO,EAAIoO,OAAOC,OAAOF,GAAS,CAAC,EAAGnO,GAAKA,CAC7C,CACA,SAASsO,EAAWC,GAClB,IAAIvO,EAAI,CAACuC,EAAG,EAAGC,EAAG,EAAGrB,EAAG,EAAGD,EAAG,KAY9B,OAXIyB,MAAMC,QAAQ2L,GACZA,EAAMC,QAAU,IAClBxO,EAAI,CAACuC,EAAGgM,EAAM,GAAI/L,EAAG+L,EAAM,GAAIpN,EAAGoN,EAAM,GAAIrN,EAAG,KAC3CqN,EAAMC,OAAS,IACjBxO,EAAEkB,EAAIV,EAAI+N,EAAM,OAIpBvO,EAAIkO,EAAMK,EAAO,CAAChM,EAAG,EAAGC,EAAG,EAAGrB,EAAG,EAAGD,EAAG,KACrCA,EAAIV,EAAIR,EAAEkB,GAEPlB,CACT,CACA,SAASyO,EAAcC,GACrB,MAAsB,MAAlBA,EAAIC,OAAO,GA3EjB,SAAkBD,GAChB,MAAME,EAAIjB,EAAOkB,KAAKH,GACtB,IACInM,EAAGC,EAAGrB,EADND,EAAI,IAER,GAAK0N,EAAL,CAGA,GAAIA,EAAE,KAAOrM,EAAG,CACd,MAAMvC,GAAK4O,EAAE,GACb1N,EAAI0N,EAAE,GAAKrO,EAAIP,GAAKC,EAAQ,IAAJD,EAAS,EAAG,IACtC,CAOA,OANAuC,GAAKqM,EAAE,GACPpM,GAAKoM,EAAE,GACPzN,GAAKyN,EAAE,GACPrM,EAAI,KAAOqM,EAAE,GAAKrO,EAAIgC,GAAKtC,EAAIsC,EAAG,EAAG,MACrCC,EAAI,KAAOoM,EAAE,GAAKrO,EAAIiC,GAAKvC,EAAIuC,EAAG,EAAG,MACrCrB,EAAI,KAAOyN,EAAE,GAAKrO,EAAIY,GAAKlB,EAAIkB,EAAG,EAAG,MAC9B,CACLoB,EAAGA,EACHC,EAAGA,EACHrB,EAAGA,EACHD,EAAGA,EAfL,CAiBF,CAqDW4N,CAASJ,GAhVpB,SAAkBA,GAChB,MAAME,EAAIhN,EAAOiN,KAAKH,GACtB,IACI1O,EADAkB,EAAI,IAER,IAAK0N,EACH,OAEEA,EAAE,KAAO5O,IACXkB,EAAI0N,EAAE,GAAKrO,GAAKqO,EAAE,IAAMpO,GAAKoO,EAAE,KAEjC,MAAMzO,EAAI4C,GAAK6L,EAAE,IACXG,GAAMH,EAAE,GAAK,IACbI,GAAMJ,EAAE,GAAK,IAQnB,OANE5O,EADW,QAAT4O,EAAE,GAtBR,SAAiBzO,EAAGgC,EAAGhB,GACrB,OAAOuB,EAAMR,EAAU/B,EAAGgC,EAAGhB,EAC/B,CAqBQ8N,CAAQ9O,EAAG4O,EAAIC,GACD,QAATJ,EAAE,GArBf,SAAiBzO,EAAG2B,EAAG9B,GACrB,OAAO0C,EAAMT,EAAU9B,EAAG2B,EAAG9B,EAC/B,CAoBQkP,CAAQ/O,EAAG4O,EAAIC,GAEflM,EAAQ3C,EAAG4O,EAAIC,GAEd,CACLzM,EAAGvC,EAAE,GACLwC,EAAGxC,EAAE,GACLmB,EAAGnB,EAAE,GACLkB,EAAGA,EAEP,CAwTSiO,CAAST,EAClB,CACA,MAAMU,EACJC,YAAYd,GACV,GAAIA,aAAiBa,EACnB,OAAOb,EAET,MAAMe,SAAcf,EACpB,IAAIvO,EA7bR,IAAkB0O,EAEZa,EADAC,EA6bW,WAATF,EACFtP,EAAIsO,EAAWC,GACG,WAATe,IA/bTE,GADYd,EAicCH,GAhcHC,OAEC,MAAXE,EAAI,KACM,IAARc,GAAqB,IAARA,EACfD,EAAM,CACJhN,EAAG,IAAsB,GAAhB5B,EAAM+N,EAAI,IACnBlM,EAAG,IAAsB,GAAhB7B,EAAM+N,EAAI,IACnBvN,EAAG,IAAsB,GAAhBR,EAAM+N,EAAI,IACnBxN,EAAW,IAARsO,EAA4B,GAAhB7O,EAAM+N,EAAI,IAAW,KAErB,IAARc,GAAqB,IAARA,IACtBD,EAAM,CACJhN,EAAG5B,EAAM+N,EAAI,KAAO,EAAI/N,EAAM+N,EAAI,IAClClM,EAAG7B,EAAM+N,EAAI,KAAO,EAAI/N,EAAM+N,EAAI,IAClCvN,EAAGR,EAAM+N,EAAI,KAAO,EAAI/N,EAAM+N,EAAI,IAClCxN,EAAW,IAARsO,EAAa7O,EAAM+N,EAAI,KAAO,EAAI/N,EAAM+N,EAAI,IAAO,OAibxD1O,EA7aGuP,GAoUT,SAAmBb,GACZhB,IACHA,EApBJ,WACE,MAAM+B,EAAW,CAAC,EACZC,EAAOtB,OAAOsB,KAAKrL,GACnBsL,EAAQvB,OAAOsB,KAAK7M,GAC1B,IAAIR,EAAGuN,EAAG5N,EAAG6N,EAAIC,EACjB,IAAKzN,EAAI,EAAGA,EAAIqN,EAAKlB,OAAQnM,IAAK,CAEhC,IADAwN,EAAKC,EAAKJ,EAAKrN,GACVuN,EAAI,EAAGA,EAAID,EAAMnB,OAAQoB,IAC5B5N,EAAI2N,EAAMC,GACVE,EAAKA,EAAGC,QAAQ/N,EAAGa,EAAIb,IAEzBA,EAAIgO,SAAS3L,EAAQwL,GAAK,IAC1BJ,EAASK,GAAM,CAAC9N,GAAK,GAAK,IAAMA,GAAK,EAAI,IAAU,IAAJA,EACjD,CACA,OAAOyN,CACT,CAKYQ,GACRvC,EAAMwC,YAAc,CAAC,EAAG,EAAG,EAAG,IAEhC,MAAMhP,EAAIwM,EAAMgB,EAAIyB,eACpB,OAAOjP,GAAK,CACVqB,EAAGrB,EAAE,GACLsB,EAAGtB,EAAE,GACLC,EAAGD,EAAE,GACLA,EAAgB,IAAbA,EAAEsN,OAAetN,EAAE,GAAK,IAE/B,CA6F6BkP,CAAU7B,IAAUE,EAAcF,IAE3D8B,KAAKC,KAAOtQ,EACZqQ,KAAKE,SAAWvQ,CAClB,CACIwQ,YACF,OAAOH,KAAKE,MACd,CACInO,UACF,IAAIpC,EAAIkO,EAAMmC,KAAKC,MAInB,OAHItQ,IACFA,EAAEkB,EAAIT,EAAIT,EAAEkB,IAEPlB,CACT,CACIoC,QAAIqO,GACNJ,KAAKC,KAAOhC,EAAWmC,EACzB,CACAC,YACE,OAAOL,KAAKE,QArFGvQ,EAqFgBqQ,KAAKC,QAnFpCtQ,EAAEkB,EAAI,IACF,QAAQlB,EAAEuC,MAAMvC,EAAEwC,MAAMxC,EAAEmB,MAAMV,EAAIT,EAAEkB,MACtC,OAAOlB,EAAEuC,MAAMvC,EAAEwC,MAAMxC,EAAEmB,WAiFewP,EArFhD,IAAmB3Q,CAsFjB,CACA4Q,YACE,OAAOP,KAAKE,QAhcGvQ,EAgcgBqQ,KAAKC,KA/blC/O,EAzBUvB,IAAK2B,EAAG3B,EAAEuC,IAAMZ,EAAG3B,EAAEwC,IAAMb,EAAG3B,EAAEmB,IAAMQ,EAAG3B,EAAEkB,GAyBjD2P,CAAQ7Q,GAAKyB,EAAKC,EACnB1B,EACH,IAAMuB,EAAEvB,EAAEuC,GAAKhB,EAAEvB,EAAEwC,GAAKjB,EAAEvB,EAAEmB,GAJpB,EAACD,EAAGK,IAAML,EAAI,IAAMK,EAAEL,GAAK,GAIF4P,CAAM9Q,EAAEkB,EAAGK,QAC5CoP,QA4b0CA,EAhchD,IAAmB3Q,EACbuB,CAgcJ,CACAwP,YACE,OAAOV,KAAKE,OApVhB,SAAmBvQ,GACjB,IAAKA,EACH,OAEF,MAAMkB,EAAIoB,EAAQtC,GACZG,EAAIe,EAAE,GACNY,EAAIpB,EAAIQ,EAAE,IACVhB,EAAIQ,EAAIQ,EAAE,IAChB,OAAOlB,EAAEkB,EAAI,IACT,QAAQf,MAAM2B,OAAO5B,OAAOO,EAAIT,EAAEkB,MAClC,OAAOf,MAAM2B,OAAO5B,KAC1B,CAyUyB6Q,CAAUV,KAAKC,WAAQK,CAC9C,CACAK,IAAIC,EAAOC,GACT,GAAID,EAAO,CACT,MAAME,EAAKd,KAAKjO,IACVgP,EAAKH,EAAM7O,IACjB,IAAIiP,EACJ,MAAMC,EAAIJ,IAAWG,EAAK,GAAMH,EAC1B/O,EAAI,EAAImP,EAAI,EACZpQ,EAAIiQ,EAAGjQ,EAAIkQ,EAAGlQ,EACdqQ,IAAOpP,EAAIjB,IAAO,EAAIiB,GAAKA,EAAIjB,IAAM,EAAIiB,EAAIjB,IAAM,GAAK,EAC9DmQ,EAAK,EAAIE,EACTJ,EAAG5O,EAAI,IAAOgP,EAAKJ,EAAG5O,EAAI8O,EAAKD,EAAG7O,EAAI,GACtC4O,EAAG3O,EAAI,IAAO+O,EAAKJ,EAAG3O,EAAI6O,EAAKD,EAAG5O,EAAI,GACtC2O,EAAGhQ,EAAI,IAAOoQ,EAAKJ,EAAGhQ,EAAIkQ,EAAKD,EAAGjQ,EAAI,GACtCgQ,EAAGjQ,EAAIoQ,EAAIH,EAAGjQ,GAAK,EAAIoQ,GAAKF,EAAGlQ,EAC/BmP,KAAKjO,IAAM+O,CACb,CACA,OAAOd,IACT,CACAmB,YAAYP,EAAOQ,GAIjB,OAHIR,IACFZ,KAAKC,KAvGX,SAAqBoB,EAAMC,EAAMF,GAC/B,MAAMlP,EAAIuL,EAAKrN,EAAIiR,EAAKnP,IAClBC,EAAIsL,EAAKrN,EAAIiR,EAAKlP,IAClBrB,EAAI2M,EAAKrN,EAAIiR,EAAKvQ,IACxB,MAAO,CACLoB,EAAG/B,EAAIoN,EAAGrL,EAAIkP,GAAK3D,EAAKrN,EAAIkR,EAAKpP,IAAMA,KACvCC,EAAGhC,EAAIoN,EAAGpL,EAAIiP,GAAK3D,EAAKrN,EAAIkR,EAAKnP,IAAMA,KACvCrB,EAAGX,EAAIoN,EAAGzM,EAAIsQ,GAAK3D,EAAKrN,EAAIkR,EAAKxQ,IAAMA,KACvCD,EAAGwQ,EAAKxQ,EAAIuQ,GAAKE,EAAKzQ,EAAIwQ,EAAKxQ,GAEnC,CA6FkBsQ,CAAYnB,KAAKC,KAAMW,EAAMX,KAAMmB,IAE1CpB,IACT,CACAnC,QACE,OAAO,IAAIkB,EAAMiB,KAAKjO,IACxB,CACA0O,MAAM5P,GAEJ,OADAmP,KAAKC,KAAKpP,EAAIV,EAAIU,GACXmP,IACT,CACAuB,QAAQ5D,GAGN,OAFYqC,KAAKC,KACbpP,GAAK,EAAI8M,EACNqC,IACT,CACAwB,YACE,MAAMzP,EAAMiO,KAAKC,KACXwB,EAAM/R,EAAc,GAARqC,EAAIG,EAAkB,IAARH,EAAII,EAAmB,IAARJ,EAAIjB,GAEnD,OADAiB,EAAIG,EAAIH,EAAII,EAAIJ,EAAIjB,EAAI2Q,EACjBzB,IACT,CACA0B,QAAQ/D,GAGN,OAFYqC,KAAKC,KACbpP,GAAK,EAAI8M,EACNqC,IACT,CACA2B,SACE,MAAMhS,EAAIqQ,KAAKC,KAIf,OAHAtQ,EAAEuC,EAAI,IAAMvC,EAAEuC,EACdvC,EAAEwC,EAAI,IAAMxC,EAAEwC,EACdxC,EAAEmB,EAAI,IAAMnB,EAAEmB,EACPkP,IACT,CACA4B,QAAQjE,GAEN,OADAD,EAAOsC,KAAKC,KAAM,EAAGtC,GACdqC,IACT,CACA6B,OAAOlE,GAEL,OADAD,EAAOsC,KAAKC,KAAM,GAAItC,GACfqC,IACT,CACA8B,SAASnE,GAEP,OADAD,EAAOsC,KAAKC,KAAM,EAAGtC,GACdqC,IACT,CACA+B,WAAWpE,GAET,OADAD,EAAOsC,KAAKC,KAAM,GAAItC,GACfqC,IACT,CACAgC,OAAOC,GAEL,OAtaJ,SAAgBtS,EAAGsS,GACjB,IAAInS,EAAImC,EAAQtC,GAChBG,EAAE,GAAK4C,EAAI5C,EAAE,GAAKmS,GAClBnS,EAAI2C,EAAQ3C,GACZH,EAAEuC,EAAIpC,EAAE,GACRH,EAAEwC,EAAIrC,EAAE,GACRH,EAAEmB,EAAIhB,EAAE,EACV,CA8ZIkS,CAAOhC,KAAKC,KAAMgC,GACXjC,IACT,ECrjBE,MAAMkC,EAAM,MACZ,IAAIC,EAAK,EACT,MAAO,IAAIA,GACd,EAHe,GAQZ,SAASC,EAAcC,GACvB,OAAOA,OACX,CAKI,SAAS9P,EAAQ8P,GACjB,GAAI/P,MAAMC,SAAWD,MAAMC,QAAQ8P,GAC/B,OAAO,EAEX,MAAMpD,EAAOlB,OAAOuE,UAAUC,SAASC,KAAKH,GAC5C,MAAyB,YAArBpD,EAAKwD,MAAM,EAAG,IAAuC,WAAnBxD,EAAKwD,OAAO,EAItD,CAKI,SAASC,EAASL,GAClB,OAAiB,OAAVA,GAA4D,oBAA1CtE,OAAOuE,UAAUC,SAASC,KAAKH,EAC5D,CAII,SAASM,EAAeN,GACxB,OAAyB,iBAAVA,GAAsBA,aAAiBO,SAAWC,UAAUR,EAC/E,CAKI,SAASS,EAAgBT,EAAOU,GAChC,OAAOJ,EAAeN,GAASA,EAAQU,CAC3C,CAKI,SAASC,EAAeX,EAAOU,GAC/B,YAAwB,IAAVV,EAAwBU,EAAeV,CACzD,CASI,SAASY,EAASC,EAAIC,EAAMC,GAC5B,GAAIF,GAAyB,mBAAZA,EAAGV,KAChB,OAAOU,EAAGG,MAAMD,EAASD,EAEjC,CACA,SAASG,EAAKC,EAAUL,EAAIE,EAASI,GACjC,IAAIxR,EAAGmN,EAAKE,EACZ,GAAI9M,EAAQgR,GAER,GADApE,EAAMoE,EAASpF,OACXqF,EACA,IAAIxR,EAAImN,EAAM,EAAGnN,GAAK,EAAGA,IACrBkR,EAAGV,KAAKY,EAASG,EAASvR,GAAIA,QAGlC,IAAIA,EAAI,EAAGA,EAAImN,EAAKnN,IAChBkR,EAAGV,KAAKY,EAASG,EAASvR,GAAIA,QAGnC,GAAI0Q,EAASa,GAGhB,IAFAlE,EAAOtB,OAAOsB,KAAKkE,GACnBpE,EAAME,EAAKlB,OACPnM,EAAI,EAAGA,EAAImN,EAAKnN,IAChBkR,EAAGV,KAAKY,EAASG,EAASlE,EAAKrN,IAAKqN,EAAKrN,GAGrD,CAMI,SAASyR,EAAeC,EAAIC,GAC5B,IAAI3R,EAAG4R,EAAMC,EAAIC,EACjB,IAAKJ,IAAOC,GAAMD,EAAGvF,SAAWwF,EAAGxF,OAC/B,OAAO,EAEX,IAAInM,EAAI,EAAG4R,EAAOF,EAAGvF,OAAQnM,EAAI4R,IAAQ5R,EAGrC,GAFA6R,EAAKH,EAAG1R,GACR8R,EAAKH,EAAG3R,GACJ6R,EAAGE,eAAiBD,EAAGC,cAAgBF,EAAGG,QAAUF,EAAGE,MACvD,OAAO,EAGf,OAAO,CACX,CAII,SAAS,EAAMC,GACf,GAAI1R,EAAQ0R,GACR,OAAOA,EAAOzR,IAAI,GAEtB,GAAIkQ,EAASuB,GAAS,CAClB,MAAMC,EAASnG,OAAOoG,OAAO,MACvB9E,EAAOtB,OAAOsB,KAAK4E,GACnBG,EAAO/E,EAAKlB,OAClB,IAAIxM,EAAI,EACR,KAAMA,EAAIyS,IAAQzS,EACduS,EAAO7E,EAAK1N,IAAM,EAAMsS,EAAO5E,EAAK1N,KAExC,OAAOuS,CACX,CACA,OAAOD,CACX,CACA,SAASI,EAAWC,GAChB,OAIoB,IAJb,CACH,YACA,YACA,eACFC,QAAQD,EACd,CAKI,SAASE,EAAQF,EAAKJ,EAAQD,EAAQQ,GACtC,IAAKJ,EAAWC,GACZ,OAEJ,MAAMI,EAAOR,EAAOI,GACdK,EAAOV,EAAOK,GAChB5B,EAASgC,IAAShC,EAASiC,GAE3BC,EAAMF,EAAMC,EAAMF,GAElBP,EAAOI,GAAO,EAAMK,EAE5B,CACA,SAASC,EAAMV,EAAQD,EAAQQ,GAC3B,MAAMI,EAAUtS,EAAQ0R,GAAUA,EAAS,CACvCA,GAEEL,EAAOiB,EAAQ1G,OACrB,IAAKuE,EAASwB,GACV,OAAOA,EAGX,MAAMY,GADNL,EAAUA,GAAW,CAAC,GACCK,QAAUN,EACjC,IAAIO,EACJ,IAAI,IAAI/S,EAAI,EAAGA,EAAI4R,IAAQ5R,EAAE,CAEzB,GADA+S,EAAUF,EAAQ7S,IACb0Q,EAASqC,GACV,SAEJ,MAAM1F,EAAOtB,OAAOsB,KAAK0F,GACzB,IAAI,IAAIpT,EAAI,EAAGyS,EAAO/E,EAAKlB,OAAQxM,EAAIyS,IAAQzS,EAC3CmT,EAAOzF,EAAK1N,GAAIuS,EAAQa,EAASN,EAEzC,CACA,OAAOP,CACX,CACA,SAASc,EAAQd,EAAQD,GAErB,OAAOW,EAAMV,EAAQD,EAAQ,CACzBa,OAAQG,GAEhB,CAII,SAASA,EAAUX,EAAKJ,EAAQD,GAChC,IAAKI,EAAWC,GACZ,OAEJ,MAAMI,EAAOR,EAAOI,GACdK,EAAOV,EAAOK,GAChB5B,EAASgC,IAAShC,EAASiC,GAC3BK,EAAQN,EAAMC,GACN5G,OAAOuE,UAAU4C,eAAe1C,KAAK0B,EAAQI,KACrDJ,EAAOI,GAAO,EAAMK,GAE5B,CASA,MAAMQ,EAAe,CAEjB,GAAKxV,GAAIA,EAETgD,EAAIyS,GAAIA,EAAEzS,EACV0S,EAAID,GAAIA,EAAEC,GA+Bd,SAASC,GAAiBlF,EAAKkE,GAC3B,MAAMiB,EAAWJ,EAAab,KAASa,EAAab,GAbxD,SAAyBA,GACrB,MAAMjF,EAhBN,SAAmBiF,GACnB,MAAMkB,EAAQlB,EAAImB,MAAM,KAClBpG,EAAO,GACb,IAAIzB,EAAM,GACV,IAAK,MAAM8H,KAAQF,EACf5H,GAAO8H,EACH9H,EAAI+H,SAAS,MACb/H,EAAMA,EAAI6E,MAAM,GAAI,GAAK,KAEzBpD,EAAKuG,KAAKhI,GACVA,EAAM,IAGd,OAAOyB,CACX,CAEiBwG,CAAUvB,GACvB,OAAQlE,IACJ,IAAK,MAAMzO,KAAK0N,EAAK,CACjB,GAAU,KAAN1N,EACA,MAEJyO,EAAMA,GAAOA,EAAIzO,EACrB,CACA,OAAOyO,CAAG,CAElB,CAE+D0F,CAAgBxB,IAC3E,OAAOiB,EAASnF,EACpB,CAGI,SAAS2F,GAAY1H,GACrB,OAAOA,EAAIC,OAAO,GAAG0H,cAAgB3H,EAAIoE,MAAM,EACnD,CACA,MAAMwD,GAAW5D,QAAyB,IAAVA,EAC1B6D,GAAc7D,GAAyB,mBAAVA,EAE7B8D,GAAY,CAACtV,EAAGC,KAClB,GAAID,EAAEuV,OAAStV,EAAEsV,KACb,OAAO,EAEX,IAAK,MAAMC,KAAQxV,EACf,IAAKC,EAAEwV,IAAID,GACP,OAAO,EAGf,OAAO,CAAI,EAYLE,GAAKxW,KAAKwW,GACdC,GAAM,EAAID,GACVE,GAAQD,GAAMD,GACdG,GAAW9D,OAAO+D,kBAClBC,GAAcL,GAAK,IACnBM,GAAUN,GAAK,EACfO,GAAaP,GAAK,EAClBQ,GAAqB,EAALR,GAAS,EACzBS,GAAQjX,KAAKiX,MACbC,GAAOlX,KAAKkX,KAClB,SAASC,GAAavU,EAAG0S,EAAG8B,GACxB,OAAOpX,KAAKqX,IAAIzU,EAAI0S,GAAK8B,CAC7B,CAGI,SAASE,GAAQC,GACjB,MAAMC,EAAexX,KAAKL,MAAM4X,GAChCA,EAAQJ,GAAaI,EAAOC,EAAcD,EAAQ,KAAQC,EAAeD,EACzE,MAAME,EAAYzX,KAAKyN,IAAI,GAAIzN,KAAK0X,MAAMT,GAAMM,KAC1CI,EAAWJ,EAAQE,EAEzB,OADqBE,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAI,IAC3DF,CAC1B,CAoBA,SAASG,GAASjW,GACd,OAAQkW,MAAMC,WAAWnW,KAAOmR,SAASnR,EAC7C,CAiBA,SAASoW,GAAUC,GACf,OAAOA,GAAWxB,GAAK,IAC3B,CAUI,SAASyB,GAAerV,GACxB,IAAKgQ,EAAehQ,GAChB,OAEJ,IAAI1B,EAAI,EACJgQ,EAAI,EACR,KAAMlR,KAAKL,MAAMiD,EAAI1B,GAAKA,IAAM0B,GAC5B1B,GAAK,GACLgQ,IAEJ,OAAOA,CACX,CAeA,SAASgH,GAAsBC,EAAKC,GAChC,OAAOpY,KAAKqY,KAAKrY,KAAKyN,IAAI2K,EAAIxV,EAAIuV,EAAIvV,EAAG,GAAK5C,KAAKyN,IAAI2K,EAAI9C,EAAI6C,EAAI7C,EAAG,GAC1E,CAII,SAASgD,GAAWxX,EAAGC,GACvB,OAAQD,EAAIC,EAAI2V,IAASD,GAAMD,EACnC,CAII,SAAS+B,GAAgBzX,GACzB,OAAQA,EAAI2V,GAAMA,IAAOA,EAC7B,CAGI,SAAS+B,GAAcC,EAAOC,EAAOC,EAAKC,GAC1C,MAAM9X,EAAIyX,GAAgBE,GACpB/W,EAAI6W,GAAgBG,GACpBxX,EAAIqX,GAAgBI,GACpBE,EAAeN,GAAgB7W,EAAIZ,GACnCgY,EAAaP,GAAgBrX,EAAIJ,GACjCiY,EAAeR,GAAgBzX,EAAIY,GACnCsX,EAAaT,GAAgBzX,EAAII,GACvC,OAAOJ,IAAMY,GAAKZ,IAAMI,GAAK0X,GAAyBlX,IAAMR,GAAK2X,EAAeC,GAAcC,EAAeC,CACjH,CAOI,SAASC,GAAY3G,EAAOpS,EAAKD,GACjC,OAAOD,KAAKC,IAAIC,EAAKF,KAAKE,IAAID,EAAKqS,GACvC,CAaI,SAAS4G,GAAW5G,EAAOoG,EAAOC,EAAKvB,EAAU,MACjD,OAAO9E,GAAStS,KAAKE,IAAIwY,EAAOC,GAAOvB,GAAW9E,GAAStS,KAAKC,IAAIyY,EAAOC,GAAOvB,CACtF,CAEA,SAAS+B,GAAQC,EAAO9G,EAAO+G,GAC3BA,EAAMA,GAAO,CAAEpF,GAAQmF,EAAMnF,GAAS3B,GACtC,IAEIgH,EAFAC,EAAKH,EAAMhL,OAAS,EACpBoL,EAAK,EAET,KAAMD,EAAKC,EAAK,GACZF,EAAME,EAAKD,GAAM,EACbF,EAAIC,GACJE,EAAKF,EAELC,EAAKD,EAGb,MAAO,CACHE,KACAD,KAER,CAQI,MAAME,GAAe,CAACL,EAAO7E,EAAKjC,EAAOoH,IAAOP,GAAQC,EAAO9G,EAAOoH,EAAQzF,IAC1E,MAAM0F,EAAKP,EAAMnF,GAAOM,GACxB,OAAOoF,EAAKrH,GAASqH,IAAOrH,GAAS8G,EAAMnF,EAAQ,GAAGM,KAASjC,CAAK,EACnE2B,GAAQmF,EAAMnF,GAAOM,GAAOjC,GAO3BsH,GAAgB,CAACR,EAAO7E,EAAKjC,IAAQ6G,GAAQC,EAAO9G,GAAQ2B,GAAQmF,EAAMnF,GAAOM,IAAQjC,IAkB7FuH,GAAc,CAChB,OACA,MACA,QACA,SACA,WAkCJ,SAASC,GAAoBC,EAAOC,GAChC,MAAMC,EAAOF,EAAMG,SACnB,IAAKD,EACD,OAEJ,MAAME,EAAYF,EAAKE,UACjBlG,EAAQkG,EAAU3F,QAAQwF,IACjB,IAAX/F,GACAkG,EAAUC,OAAOnG,EAAO,GAExBkG,EAAU/L,OAAS,IAGvByL,GAAYQ,SAAS9F,WACVwF,EAAMxF,EAAI,WAEdwF,EAAMG,SACjB,CAgBG,MAAMI,GACiB,oBAAXC,OACA,SAASrH,GACZ,OAAOA,GACX,EAEGqH,OAAOC,sBAKd,SAASC,GAAUtH,EAAIE,GACvB,IAAIqH,EAAY,GACZC,GAAU,EACd,OAAO,YAAYvH,GAEfsH,EAAYtH,EACPuH,IACDA,GAAU,EACVL,GAAiB7H,KAAK8H,QAAQ,KAC1BI,GAAU,EACVxH,EAAGG,MAAMD,EAASqH,EAAU,IAGxC,CACJ,CAkBI,MAIME,GAAiB,CAACC,EAAOnC,EAAOC,IAAgB,UAAVkC,EAAoBnC,EAAkB,QAAVmC,EAAkBlC,GAAOD,EAAQC,GAAO,EA2DpH,MAAMmC,GAAUzJ,GAAU,IAANA,GAAiB,IAANA,EACzB0J,GAAY,CAAC1J,EAAG3P,EAAGwP,KAAMlR,KAAKyN,IAAI,EAAG,IAAM4D,GAAK,IAAMrR,KAAKgb,KAAK3J,EAAI3P,GAAK+U,GAAMvF,GAC/E+J,GAAa,CAAC5J,EAAG3P,EAAGwP,IAAIlR,KAAKyN,IAAI,GAAI,GAAK4D,GAAKrR,KAAKgb,KAAK3J,EAAI3P,GAAK+U,GAAMvF,GAAK,EAKzEgK,GAAU,CAChBC,OAAS9J,GAAIA,EACb+J,WAAa/J,GAAIA,EAAIA,EACrBgK,YAAchK,IAAKA,GAAKA,EAAI,GAC5BiK,cAAgBjK,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,GAAK,MAASA,GAAKA,EAAI,GAAK,GAC3EkK,YAAclK,GAAIA,EAAIA,EAAIA,EAC1BmK,aAAenK,IAAKA,GAAK,GAAKA,EAAIA,EAAI,EACtCoK,eAAiBpK,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAI,GAClFqK,YAAcrK,GAAIA,EAAIA,EAAIA,EAAIA,EAC9BsK,aAAetK,MAAOA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC5CuK,eAAiBvK,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,GAAK,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC3FwK,YAAcxK,GAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAClCyK,aAAezK,IAAKA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,EAC9C0K,eAAiB1K,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,GAClG2K,WAAa3K,GAA6B,EAAxBrR,KAAKic,IAAI5K,EAAIyF,IAC/BoF,YAAc7K,GAAIrR,KAAKgb,IAAI3J,EAAIyF,IAC/BqF,cAAgB9K,IAAK,IAAOrR,KAAKic,IAAIzF,GAAKnF,GAAK,GAC/C+K,WAAa/K,GAAU,IAANA,EAAU,EAAIrR,KAAKyN,IAAI,EAAG,IAAM4D,EAAI,IACrDgL,YAAchL,GAAU,IAANA,EAAU,EAA4B,EAAvBrR,KAAKyN,IAAI,GAAI,GAAK4D,GACnDiL,cAAgBjL,GAAIyJ,GAAOzJ,GAAKA,EAAIA,EAAI,GAAM,GAAMrR,KAAKyN,IAAI,EAAG,IAAU,EAAJ4D,EAAQ,IAAM,IAAyC,EAAjCrR,KAAKyN,IAAI,GAAI,IAAU,EAAJ4D,EAAQ,KACvHkL,WAAalL,GAAIA,GAAK,EAAIA,IAAMrR,KAAKqY,KAAK,EAAIhH,EAAIA,GAAK,GACvDmL,YAAcnL,GAAIrR,KAAKqY,KAAK,GAAKhH,GAAK,GAAKA,GAC3CoL,cAAgBpL,IAAKA,GAAK,IAAO,GAAK,IAAOrR,KAAKqY,KAAK,EAAIhH,EAAIA,GAAK,GAAK,IAAOrR,KAAKqY,KAAK,GAAKhH,GAAK,GAAKA,GAAK,GAC9GqL,cAAgBrL,GAAIyJ,GAAOzJ,GAAKA,EAAI0J,GAAU1J,EAAG,KAAO,IACxDsL,eAAiBtL,GAAIyJ,GAAOzJ,GAAKA,EAAI4J,GAAW5J,EAAG,KAAO,IAC1DuL,iBAAkBvL,GACd,MAAM3P,EAAI,MAEV,OAAOoZ,GAAOzJ,GAAKA,EAAIA,EAAI,GAAM,GAAM0J,GAAc,EAAJ1J,EAAO3P,EAD9C,KACsD,GAAM,GAAMuZ,GAAe,EAAJ5J,EAAQ,EAAG3P,EADxF,IAEd,EACAmb,WAAYxL,GACR,MAAM3P,EAAI,QACV,OAAO2P,EAAIA,IAAM3P,EAAI,GAAK2P,EAAI3P,EAClC,EACAob,YAAazL,GACT,MAAM3P,EAAI,QACV,OAAQ2P,GAAK,GAAKA,IAAM3P,EAAI,GAAK2P,EAAI3P,GAAK,CAC9C,EACAqb,cAAe1L,GACX,IAAI3P,EAAI,QACR,OAAK2P,GAAK,IAAO,EACCA,EAAIA,IAAqB,GAAd3P,GAAK,QAAc2P,EAAI3P,GAAzC,GAEJ,KAAQ2P,GAAK,GAAKA,IAAqB,GAAd3P,GAAK,QAAc2P,EAAI3P,GAAK,EAChE,EACAsb,aAAe3L,GAAI,EAAI6J,GAAQ+B,cAAc,EAAI5L,GACjD4L,cAAe5L,GACX,MAAM7C,EAAI,OACJvN,EAAI,KACV,OAAIoQ,EAAI,EAAIpQ,EACDuN,EAAI6C,EAAIA,EAEfA,EAAI,EAAIpQ,EACDuN,GAAK6C,GAAK,IAAMpQ,GAAKoQ,EAAI,IAEhCA,EAAI,IAAMpQ,EACHuN,GAAK6C,GAAK,KAAOpQ,GAAKoQ,EAAI,MAE9B7C,GAAK6C,GAAK,MAAQpQ,GAAKoQ,EAAI,OACtC,EACA6L,gBAAkB7L,GAAIA,EAAI,GAAoC,GAA9B6J,GAAQ8B,aAAiB,EAAJ3L,GAAkD,GAAnC6J,GAAQ+B,cAAkB,EAAJ5L,EAAQ,GAAW,IAGjH,SAAS8L,GAAoB7K,GACzB,GAAIA,GAA0B,iBAAVA,EAAoB,CACpC,MAAMpD,EAAOoD,EAAME,WACnB,MAAgB,2BAATtD,GAA8C,4BAATA,CAChD,CACA,OAAO,CACX,CACA,SAAS2B,GAAMyB,GACX,OAAO6K,GAAoB7K,GAASA,EAAQ,IAAItD,EAAMsD,EAC1D,CACA,SAAS8K,GAAc9K,GACnB,OAAO6K,GAAoB7K,GAASA,EAAQ,IAAItD,EAAMsD,GAAOP,SAAS,IAAKD,OAAO,IAAKtB,WAC3F,CAEA,MAAM6M,GAAU,CACZ,IACA,IACA,cACA,SACA,WAEEC,GAAS,CACX,QACA,cACA,mBAgFEC,GAAY,IAAIC,IAWtB,SAASC,GAAaC,EAAKC,EAAQjJ,GAC/B,OAXJ,SAAyBiJ,EAAQjJ,GAC7BA,EAAUA,GAAW,CAAC,EACtB,MAAMkJ,EAAWD,EAASE,KAAKC,UAAUpJ,GACzC,IAAIqJ,EAAYR,GAAUS,IAAIJ,GAK9B,OAJKG,IACDA,EAAY,IAAIE,KAAKC,aAAaP,EAAQjJ,GAC1C6I,GAAUY,IAAIP,EAAUG,IAErBA,CACX,CAEWK,CAAgBT,EAAQjJ,GAAS2J,OAAOX,EACnD,CAEA,MAAMY,GAAa,CAClBC,OAAQjM,GACM9P,EAAQ8P,GAAUA,EAAQ,GAAKA,EAE7CkM,QAASC,EAAWxK,EAAOyK,GACpB,GAAkB,IAAdD,EACA,MAAO,IAEX,MAAMd,EAAS1N,KAAK0O,MAAMjK,QAAQiJ,OAClC,IAAIiB,EACAC,EAAQJ,EACZ,GAAIC,EAAMtQ,OAAS,EAAG,CAClB,MAAM0Q,EAAU9e,KAAKC,IAAID,KAAKqX,IAAIqH,EAAM,GAAGpM,OAAQtS,KAAKqX,IAAIqH,EAAMA,EAAMtQ,OAAS,GAAGkE,SAChFwM,EAAU,MAAQA,EAAU,QAC5BF,EAAW,cAEfC,EA8BZ,SAAwBJ,EAAWC,GAC/B,IAAIG,EAAQH,EAAMtQ,OAAS,EAAIsQ,EAAM,GAAGpM,MAAQoM,EAAM,GAAGpM,MAAQoM,EAAM,GAAGpM,MAAQoM,EAAM,GAAGpM,MAI3F,OAHItS,KAAKqX,IAAIwH,IAAU,GAAKJ,IAAcze,KAAK0X,MAAM+G,KACjDI,EAAQJ,EAAYze,KAAK0X,MAAM+G,IAE5BI,CACX,CApCoBE,CAAeN,EAAWC,EACtC,CACA,MAAMM,EAAW/H,GAAMjX,KAAKqX,IAAIwH,IAC1BI,EAAapH,MAAMmH,GAAY,EAAIhf,KAAKC,IAAID,KAAKE,KAAK,EAAIF,KAAK0X,MAAMsH,GAAW,IAAK,GACrFtK,EAAU,CACZkK,WACAM,sBAAuBD,EACvBE,sBAAuBF,GAG3B,OADAjR,OAAOC,OAAOyG,EAASzE,KAAKyE,QAAQgK,MAAML,QACnCZ,GAAagB,EAAWd,EAAQjJ,EAC3C,EACH0K,YAAaX,EAAWxK,EAAOyK,GACxB,GAAkB,IAAdD,EACA,MAAO,IAEX,MAAMY,EAASX,EAAMzK,GAAOqL,aAAeb,EAAYze,KAAKyN,IAAI,GAAIzN,KAAK0X,MAAMT,GAAMwH,KACrF,MAAI,CACA,EACA,EACA,EACA,EACA,GACA,IACFc,SAASF,IAAWpL,EAAQ,GAAMyK,EAAMtQ,OAC/BkQ,GAAWE,QAAQ/L,KAAKxC,KAAMwO,EAAWxK,EAAOyK,GAEpD,EACX,GASH,IAAIc,GAAQ,CACTlB,eA2EJ,MAAMmB,GAAYzR,OAAOoG,OAAO,MAC1BsL,GAAc1R,OAAOoG,OAAO,MACjC,SAASuL,GAAWC,EAAMrL,GACvB,IAAKA,EACD,OAAOqL,EAEX,MAAMtQ,EAAOiF,EAAImB,MAAM,KACvB,IAAI,IAAIzT,EAAI,EAAGN,EAAI2N,EAAKlB,OAAQnM,EAAIN,IAAKM,EAAE,CACvC,MAAML,EAAI0N,EAAKrN,GACf2d,EAAOA,EAAKhe,KAAOge,EAAKhe,GAAKoM,OAAOoG,OAAO,MAC/C,CACA,OAAOwL,CACX,CACA,SAASzB,GAAI/e,EAAMygB,EAAOtB,GACtB,MAAqB,iBAAVsB,EACAhL,EAAM8K,GAAWvgB,EAAMygB,GAAQtB,GAEnC1J,EAAM8K,GAAWvgB,EAAM,IAAKygB,EACvC,CACC,MAAMC,GACH7Q,YAAY8Q,EAAcC,GACtB/P,KAAKgQ,eAAY1P,EACjBN,KAAKiQ,gBAAkB,kBACvBjQ,KAAKkQ,YAAc,kBACnBlQ,KAAKY,MAAQ,OACbZ,KAAKmQ,SAAW,CAAC,EACjBnQ,KAAKoQ,iBAAoBC,GAAUA,EAAQ3B,MAAM4B,SAASC,sBAC1DvQ,KAAKwQ,SAAW,CAAC,EACjBxQ,KAAKyQ,OAAS,CACV,YACA,WACA,QACA,aACA,aAEJzQ,KAAK0Q,KAAO,CACRC,OAAQ,qDACRvK,KAAM,GACNwK,MAAO,SACPC,WAAY,IACZhQ,OAAQ,MAEZb,KAAK8Q,MAAQ,CAAC,EACd9Q,KAAK+Q,qBAAuB,CAACC,EAAKvM,IAAU0I,GAAc1I,EAAQwL,iBAClEjQ,KAAKiR,iBAAmB,CAACD,EAAKvM,IAAU0I,GAAc1I,EAAQyL,aAC9DlQ,KAAKkR,WAAa,CAACF,EAAKvM,IAAU0I,GAAc1I,EAAQ7D,OACxDZ,KAAKmR,UAAY,IACjBnR,KAAKoR,YAAc,CACfC,KAAM,UACNC,WAAW,EACXC,kBAAkB,GAEtBvR,KAAKwR,qBAAsB,EAC3BxR,KAAKyR,QAAU,KACfzR,KAAK0R,QAAU,KACf1R,KAAK2R,SAAU,EACf3R,KAAK4R,QAAU,CAAC,EAChB5R,KAAK6R,YAAa,EAClB7R,KAAK8R,WAAQxR,EACbN,KAAK+R,OAAS,CAAC,EACf/R,KAAKgS,UAAW,EAChBhS,KAAKiS,yBAA0B,EAC/BjS,KAAKkS,SAASpC,GACd9P,KAAKqD,MAAM0M,EACf,CACH7B,IAAI0B,EAAOtB,GACJ,OAAOJ,GAAIlO,KAAM4P,EAAOtB,EAC5B,CACHP,IAAI6B,GACG,OAAOF,GAAW1P,KAAM4P,EAC5B,CACHsC,SAAStC,EAAOtB,GACT,OAAOJ,GAAIuB,GAAaG,EAAOtB,EACnC,CACA6D,SAASvC,EAAOtB,GACZ,OAAOJ,GAAIsB,GAAWI,EAAOtB,EACjC,CACH8D,MAAMxC,EAAOyC,EAAMC,EAAaC,GACzB,MAAMC,EAAc9C,GAAW1P,KAAM4P,GAC/B6C,EAAoB/C,GAAW1P,KAAMsS,GACrCI,EAAc,IAAML,EAC1BtU,OAAO4U,iBAAiBH,EAAa,CACjC,CAACE,GAAc,CACXrQ,MAAOmQ,EAAYH,GACnBO,UAAU,GAEd,CAACP,GAAO,CACJQ,YAAY,EACZ9E,MACI,MAAM+E,EAAQ9S,KAAK0S,GACbxO,EAASuO,EAAkBF,GACjC,OAAI7P,EAASoQ,GACF/U,OAAOC,OAAO,CAAC,EAAGkG,EAAQ4O,GAE9B9P,EAAe8P,EAAO5O,EACjC,EACAgK,IAAK7L,GACDrC,KAAK0S,GAAerQ,CACxB,IAGZ,CACAgB,MAAM0P,GACFA,EAAS3I,SAAS/G,GAAQA,EAAMrD,OACpC,EAEJ,IAAIgT,GAA2B,IAAInD,GAAS,CACxCoD,YAAcZ,IAAQA,EAAKa,WAAW,MACtCC,WAAad,GAAgB,WAATA,EACpBvB,MAAO,CACHsC,UAAW,eAEfhC,YAAa,CACT6B,aAAa,EACbE,YAAY,IAEjB,CAlVH,SAAiCH,GAC7BA,EAAS9E,IAAI,YAAa,CACtBmF,WAAO/S,EACPgT,SAAU,IACVC,OAAQ,eACRrQ,QAAI5C,EACJ7C,UAAM6C,EACNkT,UAAMlT,EACN/C,QAAI+C,EACJrB,UAAMqB,IAEV0S,EAASd,SAAS,YAAa,CAC3BkB,WAAW,EACXD,YAAY,EACZF,YAAcZ,GAAgB,eAATA,GAAkC,eAATA,GAAkC,OAATA,IAE3EW,EAAS9E,IAAI,aAAc,CACvBb,OAAQ,CACJpO,KAAM,QACNwU,WAAYpG,IAEhBD,QAAS,CACLnO,KAAM,SACNwU,WAAYrG,MAGpB4F,EAASd,SAAS,aAAc,CAC5BkB,UAAW,cAEfJ,EAAS9E,IAAI,cAAe,CACxBwF,OAAQ,CACJ1D,UAAW,CACPsD,SAAU,MAGlBK,OAAQ,CACJ3D,UAAW,CACPsD,SAAU,IAGlBM,KAAM,CACFC,WAAY,CACRxG,OAAQ,CACJ5P,KAAM,eAEVqW,QAAS,CACL7U,KAAM,UACNqU,SAAU,KAItBS,KAAM,CACFF,WAAY,CACRxG,OAAQ,CACJ9P,GAAI,eAERuW,QAAS,CACL7U,KAAM,UACNsU,OAAQ,SACRrQ,GAAKvT,GAAQ,EAAJA,MAK7B,EAEA,SAA8BqjB,GAC1BA,EAAS9E,IAAI,SAAU,CACnB8F,aAAa,EACbC,QAAS,CACLC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,IAGlB,EA0EA,SAA4BrB,GACxBA,EAAS9E,IAAI,QAAS,CAClBoG,SAAS,EACTC,QAAQ,EACR/Q,SAAS,EACTgR,aAAa,EACpBC,OAAQ,QACDC,MAAM,EACbC,MAAO,EACAC,KAAM,CACFN,SAAS,EACTO,UAAW,EACXC,iBAAiB,EACjBC,WAAW,EACXC,WAAY,EACZC,UAAW,CAACC,EAAMzQ,IAAUA,EAAQoQ,UACpCM,UAAW,CAACD,EAAMzQ,IAAUA,EAAQ7D,MACpC2T,QAAQ,GAEZa,OAAQ,CACJd,SAAS,EACTe,KAAM,GACNC,WAAY,EACZC,MAAO,GAEXC,MAAO,CACHlB,SAAS,EACTmB,KAAM,GACNxB,QAAS,CACLC,IAAK,EACLE,OAAQ,IAGhB3F,MAAO,CACHiH,YAAa,EACbC,YAAa,GACbC,QAAQ,EACRC,gBAAiB,EACjBC,gBAAiB,GACjB7B,QAAS,EACTK,SAAS,EACTyB,UAAU,EACVC,gBAAiB,EACjBC,YAAa,EACbhT,SAAUsM,GAAMlB,WAAWC,OAC3B4H,MAAO,CAAC,EACRC,MAAO,CAAC,EACRvL,MAAO,SACPwL,WAAY,OACZC,mBAAmB,EACnBC,cAAe,4BACfC,gBAAiB,KAGzBvD,EAASZ,MAAM,cAAe,QAAS,GAAI,SAC3CY,EAASZ,MAAM,aAAc,QAAS,GAAI,eAC1CY,EAASZ,MAAM,eAAgB,QAAS,GAAI,eAC5CY,EAASZ,MAAM,cAAe,QAAS,GAAI,SAC3CY,EAASd,SAAS,QAAS,CACvBkB,WAAW,EACXH,YAAcZ,IAAQA,EAAKa,WAAW,YAAcb,EAAKa,WAAW,UAAqB,aAATb,GAAgC,WAATA,EACvGc,WAAad,GAAgB,eAATA,GAAkC,mBAATA,GAAsC,SAATA,IAE9EW,EAASd,SAAS,SAAU,CACxBkB,UAAW,UAEfJ,EAASd,SAAS,cAAe,CAC7Be,YAAcZ,GAAgB,oBAATA,GAAuC,aAATA,EACnDc,WAAad,GAAgB,oBAATA,GAE5B,IAyII,SAASmE,GAAaxF,EAAKyF,EAAMC,EAAIC,EAASC,GAC9C,IAAIC,EAAYJ,EAAKG,GAQrB,OAPKC,IACDA,EAAYJ,EAAKG,GAAU5F,EAAI8F,YAAYF,GAAQrB,MACnDmB,EAAG9Q,KAAKgR,IAERC,EAAYF,IACZA,EAAUE,GAEPF,CACX,CAoDI,SAASI,GAAYrI,EAAOsI,EAAOzB,GACnC,MAAMnF,EAAmB1B,EAAMuI,wBACzBC,EAAsB,IAAV3B,EAAcxlB,KAAKC,IAAIulB,EAAQ,EAAG,IAAO,EAC3D,OAAOxlB,KAAKL,OAAOsnB,EAAQE,GAAa9G,GAAoBA,EAAmB8G,CACnF,CAGI,SAASC,GAAYC,EAAQpG,IAC7BA,EAAMA,GAAOoG,EAAOC,WAAW,OAC3BC,OAGJtG,EAAIuG,iBACJvG,EAAIwG,UAAU,EAAG,EAAGJ,EAAO7B,MAAO6B,EAAOK,QACzCzG,EAAI0G,SACR,CACA,SAASC,GAAU3G,EAAKvM,EAAS9R,EAAG0S,IAKpC,SAAyB2L,EAAKvM,EAAS9R,EAAG0S,EAAGvT,GACzC,IAAImN,EAAM2Y,EAASC,EAASzR,EAAM0R,EAAcvC,EAAOwC,EAAUC,EACjE,MAAMpH,EAAQnM,EAAQwT,WAChBC,EAAWzT,EAAQyT,SACnBC,EAAS1T,EAAQ0T,OACvB,IAAIC,GAAOF,GAAY,GAAKtR,GAC5B,GAAIgK,GAA0B,iBAAVA,IAChB3R,EAAO2R,EAAMrO,WACA,8BAATtD,GAAiD,+BAATA,GAMxC,OALA+R,EAAIsG,OACJtG,EAAIqH,UAAU1lB,EAAG0S,GACjB2L,EAAIhP,OAAOoW,GACXpH,EAAIsH,UAAU1H,GAAQA,EAAM2E,MAAQ,GAAI3E,EAAM6G,OAAS,EAAG7G,EAAM2E,MAAO3E,EAAM6G,aAC7EzG,EAAI0G,UAIZ,KAAI9P,MAAMuQ,IAAWA,GAAU,GAA/B,CAIA,OADAnH,EAAIuH,YACG3H,GAEH,QACQ9e,EACAkf,EAAIwH,QAAQ7lB,EAAG0S,EAAGvT,EAAI,EAAGqmB,EAAQ,EAAG,EAAG3R,IAEvCwK,EAAIyH,IAAI9lB,EAAG0S,EAAG8S,EAAQ,EAAG3R,IAE7BwK,EAAI0H,YACJ,MACJ,IAAK,WACDnD,EAAQzjB,EAAIA,EAAI,EAAIqmB,EACpBnH,EAAI2H,OAAOhmB,EAAI5C,KAAKgb,IAAIqN,GAAO7C,EAAOlQ,EAAItV,KAAKic,IAAIoM,GAAOD,GAC1DC,GAAOrR,GACPiK,EAAI4H,OAAOjmB,EAAI5C,KAAKgb,IAAIqN,GAAO7C,EAAOlQ,EAAItV,KAAKic,IAAIoM,GAAOD,GAC1DC,GAAOrR,GACPiK,EAAI4H,OAAOjmB,EAAI5C,KAAKgb,IAAIqN,GAAO7C,EAAOlQ,EAAItV,KAAKic,IAAIoM,GAAOD,GAC1DnH,EAAI0H,YACJ,MACJ,IAAK,cAQDZ,EAAwB,KAATK,EACf/R,EAAO+R,EAASL,EAChBF,EAAU7nB,KAAKic,IAAIoM,EAAMtR,IAAcV,EACvC2R,EAAWhoB,KAAKic,IAAIoM,EAAMtR,KAAehV,EAAIA,EAAI,EAAIgmB,EAAe1R,GACpEyR,EAAU9nB,KAAKgb,IAAIqN,EAAMtR,IAAcV,EACvC4R,EAAWjoB,KAAKgb,IAAIqN,EAAMtR,KAAehV,EAAIA,EAAI,EAAIgmB,EAAe1R,GACpE4K,EAAIyH,IAAI9lB,EAAIolB,EAAU1S,EAAIwS,EAASC,EAAcM,EAAM7R,GAAI6R,EAAMvR,IACjEmK,EAAIyH,IAAI9lB,EAAIqlB,EAAU3S,EAAIuS,EAASE,EAAcM,EAAMvR,GAASuR,GAChEpH,EAAIyH,IAAI9lB,EAAIolB,EAAU1S,EAAIwS,EAASC,EAAcM,EAAKA,EAAMvR,IAC5DmK,EAAIyH,IAAI9lB,EAAIqlB,EAAU3S,EAAIuS,EAASE,EAAcM,EAAMvR,GAASuR,EAAM7R,IACtEyK,EAAI0H,YACJ,MACJ,IAAK,OACD,IAAKR,EAAU,CACX9R,EAAOrW,KAAK8oB,QAAUV,EACtB5C,EAAQzjB,EAAIA,EAAI,EAAIsU,EACpB4K,EAAI8H,KAAKnmB,EAAI4iB,EAAOlQ,EAAIe,EAAM,EAAImP,EAAO,EAAInP,GAC7C,KACJ,CACAgS,GAAOtR,GACS,IAAK,UACrBiR,EAAWhoB,KAAKic,IAAIoM,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCP,EAAU7nB,KAAKic,IAAIoM,GAAOD,EAC1BN,EAAU9nB,KAAKgb,IAAIqN,GAAOD,EAC1BH,EAAWjoB,KAAKgb,IAAIqN,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCnH,EAAI2H,OAAOhmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI4H,OAAOjmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B5G,EAAI4H,OAAOjmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI4H,OAAOjmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B5G,EAAI0H,YACJ,MACJ,IAAK,WACDN,GAAOtR,GACS,IAAK,QACrBiR,EAAWhoB,KAAKic,IAAIoM,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCP,EAAU7nB,KAAKic,IAAIoM,GAAOD,EAC1BN,EAAU9nB,KAAKgb,IAAIqN,GAAOD,EAC1BH,EAAWjoB,KAAKgb,IAAIqN,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCnH,EAAI2H,OAAOhmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI4H,OAAOjmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI2H,OAAOhmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B5G,EAAI4H,OAAOjmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B,MACJ,IAAK,OACDG,EAAWhoB,KAAKic,IAAIoM,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCP,EAAU7nB,KAAKic,IAAIoM,GAAOD,EAC1BN,EAAU9nB,KAAKgb,IAAIqN,GAAOD,EAC1BH,EAAWjoB,KAAKgb,IAAIqN,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCnH,EAAI2H,OAAOhmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI4H,OAAOjmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI2H,OAAOhmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B5G,EAAI4H,OAAOjmB,EAAIqlB,EAAU3S,EAAIuS,GAC7BQ,GAAOtR,GACPiR,EAAWhoB,KAAKic,IAAIoM,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCP,EAAU7nB,KAAKic,IAAIoM,GAAOD,EAC1BN,EAAU9nB,KAAKgb,IAAIqN,GAAOD,EAC1BH,EAAWjoB,KAAKgb,IAAIqN,IAAQtmB,EAAIA,EAAI,EAAIqmB,GACxCnH,EAAI2H,OAAOhmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI4H,OAAOjmB,EAAIolB,EAAU1S,EAAIwS,GAC7B7G,EAAI2H,OAAOhmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B5G,EAAI4H,OAAOjmB,EAAIqlB,EAAU3S,EAAIuS,GAC7B,MACJ,IAAK,OACDA,EAAU9lB,EAAIA,EAAI,EAAI/B,KAAKic,IAAIoM,GAAOD,EACtCN,EAAU9nB,KAAKgb,IAAIqN,GAAOD,EAC1BnH,EAAI2H,OAAOhmB,EAAIilB,EAASvS,EAAIwS,GAC5B7G,EAAI4H,OAAOjmB,EAAIilB,EAASvS,EAAIwS,GAC5B,MACJ,IAAK,OACD7G,EAAI2H,OAAOhmB,EAAG0S,GACd2L,EAAI4H,OAAOjmB,EAAI5C,KAAKic,IAAIoM,IAAQtmB,EAAIA,EAAI,EAAIqmB,GAAS9S,EAAItV,KAAKgb,IAAIqN,GAAOD,GACzE,MACJ,KAAK,EACDnH,EAAI0H,YAGZ1H,EAAI+H,OACAtU,EAAQuU,YAAc,GACtBhI,EAAIiI,QA3GR,CA6GJ,CAnIIC,CAAgBlI,EAAKvM,EAAS9R,EAAG0S,EAAG,KACxC,CAyII,SAAS8T,GAAeC,EAAOC,EAAMC,GAErC,OADAA,EAASA,GAAU,IACXD,GAAQD,GAASA,EAAMzmB,EAAI0mB,EAAKhF,KAAOiF,GAAUF,EAAMzmB,EAAI0mB,EAAKlF,MAAQmF,GAAUF,EAAM/T,EAAIgU,EAAKnF,IAAMoF,GAAUF,EAAM/T,EAAIgU,EAAKjF,OAASkF,CACrJ,CACA,SAASC,GAASvI,EAAKqI,GACnBrI,EAAIsG,OACJtG,EAAIuH,YACJvH,EAAI8H,KAAKO,EAAKhF,KAAMgF,EAAKnF,IAAKmF,EAAKlF,MAAQkF,EAAKhF,KAAMgF,EAAKjF,OAASiF,EAAKnF,KACzElD,EAAI0D,MACR,CACA,SAAS8E,GAAWxI,GAChBA,EAAI0G,SACR,CAGI,SAAS+B,GAAezI,EAAK0I,EAAUxV,EAAQyV,EAAMtI,GACrD,IAAKqI,EACD,OAAO1I,EAAI4H,OAAO1U,EAAOvR,EAAGuR,EAAOmB,GAEvC,GAAa,WAATgM,EAAmB,CACnB,MAAMuI,GAAYF,EAAS/mB,EAAIuR,EAAOvR,GAAK,EAC3Cqe,EAAI4H,OAAOgB,EAAUF,EAASrU,GAC9B2L,EAAI4H,OAAOgB,EAAU1V,EAAOmB,EAChC,KAAoB,UAATgM,KAAuBsI,EAC9B3I,EAAI4H,OAAOc,EAAS/mB,EAAGuR,EAAOmB,GAE9B2L,EAAI4H,OAAO1U,EAAOvR,EAAG+mB,EAASrU,GAElC2L,EAAI4H,OAAO1U,EAAOvR,EAAGuR,EAAOmB,EAChC,CAGI,SAASwU,GAAe7I,EAAK0I,EAAUxV,EAAQyV,GAC/C,IAAKD,EACD,OAAO1I,EAAI4H,OAAO1U,EAAOvR,EAAGuR,EAAOmB,GAEvC2L,EAAI8I,cAAcH,EAAOD,EAASK,KAAOL,EAASM,KAAML,EAAOD,EAASO,KAAOP,EAASQ,KAAMP,EAAOzV,EAAO8V,KAAO9V,EAAO6V,KAAMJ,EAAOzV,EAAOgW,KAAOhW,EAAO+V,KAAM/V,EAAOvR,EAAGuR,EAAOmB,EACvL,CAkBA,SAAS8U,GAAanJ,EAAKre,EAAG0S,EAAG+U,EAAMC,GACnC,GAAIA,EAAKC,eAAiBD,EAAKE,UAAW,CAOtC,MAAMC,EAAUxJ,EAAI8F,YAAYsD,GAC1B/F,EAAO1hB,EAAI6nB,EAAQC,sBACnBtG,EAAQxhB,EAAI6nB,EAAQE,uBACpBxG,EAAM7O,EAAImV,EAAQG,wBAClBvG,EAAS/O,EAAImV,EAAQI,yBACrBC,EAAcR,EAAKC,eAAiBpG,EAAME,GAAU,EAAIA,EAC9DpD,EAAI8J,YAAc9J,EAAI+J,UACtB/J,EAAIuH,YACJvH,EAAI6D,UAAYwF,EAAKW,iBAAmB,EACxChK,EAAI2H,OAAOtE,EAAMwG,GACjB7J,EAAI4H,OAAOzE,EAAO0G,GAClB7J,EAAIiI,QACR,CACJ,CACA,SAASgC,GAAajK,EAAKqJ,GACvB,MAAMa,EAAWlK,EAAI+J,UACrB/J,EAAI+J,UAAYV,EAAKzZ,MACrBoQ,EAAImK,SAASd,EAAKhG,KAAMgG,EAAKnG,IAAKmG,EAAK9E,MAAO8E,EAAK5C,QACnDzG,EAAI+J,UAAYG,CACpB,CAGI,SAASE,GAAWpK,EAAKyE,EAAM9iB,EAAG0S,EAAGqL,EAAM2J,EAAO,CAAC,GACnD,MAAMgB,EAAQ9oB,EAAQkjB,GAAQA,EAAO,CACjCA,GAEEwD,EAASoB,EAAKiB,YAAc,GAA0B,KAArBjB,EAAKkB,YAC5C,IAAIvpB,EAAGooB,EAIP,IAHApJ,EAAIsG,OACJtG,EAAIN,KAAOA,EAAKkG,OAtDpB,SAAuB5F,EAAKqJ,GACpBA,EAAKmB,aACLxK,EAAIqH,UAAUgC,EAAKmB,YAAY,GAAInB,EAAKmB,YAAY,IAEnDpZ,EAAciY,EAAKnC,WACpBlH,EAAIhP,OAAOqY,EAAKnC,UAEhBmC,EAAKzZ,QACLoQ,EAAI+J,UAAYV,EAAKzZ,OAErByZ,EAAKoB,YACLzK,EAAIyK,UAAYpB,EAAKoB,WAErBpB,EAAKqB,eACL1K,EAAI0K,aAAerB,EAAKqB,aAEhC,CAuCIC,CAAc3K,EAAKqJ,GACfroB,EAAI,EAAGA,EAAIqpB,EAAMld,SAAUnM,EAC3BooB,EAAOiB,EAAMrpB,GACTqoB,EAAKuB,UACLX,GAAajK,EAAKqJ,EAAKuB,UAEvB3C,IACIoB,EAAKkB,cACLvK,EAAI8J,YAAcT,EAAKkB,aAEtBnZ,EAAciY,EAAKiB,eACpBtK,EAAI6D,UAAYwF,EAAKiB,aAEzBtK,EAAI6K,WAAWzB,EAAMznB,EAAG0S,EAAGgV,EAAKyB,WAEpC9K,EAAI+K,SAAS3B,EAAMznB,EAAG0S,EAAGgV,EAAKyB,UAC9B3B,GAAanJ,EAAKre,EAAG0S,EAAG+U,EAAMC,GAC9BhV,GAAKzC,OAAO8N,EAAKG,YAErBG,EAAI0G,SACR,CAKI,SAASsE,GAAmBhL,EAAK8H,GACjC,MAAM,EAAEnmB,EAAE,EAAE0S,EAAE,EAAEvT,EAAE,EAAEhC,EAAE,OAAEqoB,GAAYW,EAEpC9H,EAAIyH,IAAI9lB,EAAIwlB,EAAO8D,QAAS5W,EAAI8S,EAAO8D,QAAS9D,EAAO8D,QAAS,IAAM1V,GAAIA,IAAI,GAE9EyK,EAAI4H,OAAOjmB,EAAG0S,EAAIvV,EAAIqoB,EAAO+D,YAE7BlL,EAAIyH,IAAI9lB,EAAIwlB,EAAO+D,WAAY7W,EAAIvV,EAAIqoB,EAAO+D,WAAY/D,EAAO+D,WAAY3V,GAAIM,IAAS,GAE1FmK,EAAI4H,OAAOjmB,EAAIb,EAAIqmB,EAAOgE,YAAa9W,EAAIvV,GAE3CkhB,EAAIyH,IAAI9lB,EAAIb,EAAIqmB,EAAOgE,YAAa9W,EAAIvV,EAAIqoB,EAAOgE,YAAahE,EAAOgE,YAAatV,GAAS,GAAG,GAEhGmK,EAAI4H,OAAOjmB,EAAIb,EAAGuT,EAAI8S,EAAOiE,UAE7BpL,EAAIyH,IAAI9lB,EAAIb,EAAIqmB,EAAOiE,SAAU/W,EAAI8S,EAAOiE,SAAUjE,EAAOiE,SAAU,GAAIvV,IAAS,GAEpFmK,EAAI4H,OAAOjmB,EAAIwlB,EAAO8D,QAAS5W,EACnC,CAEA,MAAMgX,GAAc,uCACdC,GAAa,wEAWf,SAASC,GAAala,EAAO+D,GAC7B,MAAMoW,GAAW,GAAKna,GAAOoa,MAAMJ,IACnC,IAAKG,GAA0B,WAAfA,EAAQ,GACpB,OAAc,IAAPpW,EAGX,OADA/D,GAASma,EAAQ,GACVA,EAAQ,IACX,IAAK,KACD,OAAOna,EACX,IAAK,IACDA,GAAS,IAGjB,OAAO+D,EAAO/D,CAClB,CACA,MAAMqa,GAAgB/sB,IAAKA,GAAK,EAChC,SAASgtB,GAAkBta,EAAOua,GAC9B,MAAM1d,EAAM,CAAC,EACP2d,EAAWna,EAASka,GACpBvd,EAAOwd,EAAW9e,OAAOsB,KAAKud,GAASA,EACvCE,EAAOpa,EAASL,GAASwa,EAAYE,GAAO/Z,EAAeX,EAAM0a,GAAO1a,EAAMua,EAAMG,KAAWA,GAAO1a,EAAM0a,GAAQ,IAAI1a,EAC9H,IAAK,MAAM0a,KAAQ1d,EACfH,EAAI6d,GAAQL,GAAaI,EAAKC,IAElC,OAAO7d,CACX,CAQI,SAAS8d,GAAO3a,GAChB,OAAOsa,GAAkBta,EAAO,CAC5B6R,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,KAAM,KAEd,CAsBI,SAAS4I,GAAU5a,GACnB,MAAMjC,EAAM4c,GAAO3a,GAGnB,OAFAjC,EAAImV,MAAQnV,EAAIiU,KAAOjU,EAAI+T,MAC3B/T,EAAIqX,OAASrX,EAAI8T,IAAM9T,EAAIgU,OACpBhU,CACX,CAOI,SAAS8c,GAAOzY,EAAS0Y,GACzB1Y,EAAUA,GAAW,CAAC,EACtB0Y,EAAWA,GAAYnK,GAAStC,KAChC,IAAItK,EAAOpD,EAAeyB,EAAQ2B,KAAM+W,EAAS/W,MAC7B,iBAATA,IACPA,EAAOzG,SAASyG,EAAM,KAE1B,IAAIwK,EAAQ5N,EAAeyB,EAAQmM,MAAOuM,EAASvM,OAC/CA,KAAW,GAAKA,GAAO6L,MAAMH,MAC7Bc,QAAQC,KAAK,kCAAoCzM,EAAQ,KACzDA,OAAQtQ,GAEZ,MAAMoQ,EAAO,CACTC,OAAQ3N,EAAeyB,EAAQkM,OAAQwM,EAASxM,QAChDE,WAAY0L,GAAavZ,EAAeyB,EAAQoM,WAAYsM,EAAStM,YAAazK,GAClFA,OACAwK,QACA/P,OAAQmC,EAAeyB,EAAQ5D,OAAQsc,EAAStc,QAChD+V,OAAQ,IAGZ,OADAlG,EAAKkG,OAtdL,SAAsBlG,GACtB,OAAKA,GAAQtO,EAAcsO,EAAKtK,OAAShE,EAAcsO,EAAKC,QACjD,MAEHD,EAAKE,MAAQF,EAAKE,MAAQ,IAAM,KAAOF,EAAK7P,OAAS6P,EAAK7P,OAAS,IAAM,IAAM6P,EAAKtK,KAAO,MAAQsK,EAAKC,MACpH,CAidkB2M,CAAa5M,GACpBA,CACX,CAWI,SAAS6M,GAAQC,EAAQnN,EAASrM,EAAOyZ,GACzC,IACIzrB,EAAG4R,EAAMvB,EADTqb,GAAY,EAEhB,IAAI1rB,EAAI,EAAG4R,EAAO4Z,EAAOrf,OAAQnM,EAAI4R,IAAQ5R,EAEzC,GADAqQ,EAAQmb,EAAOxrB,QACDsO,IAAV+B,SAGY/B,IAAZ+P,GAA0C,mBAAVhO,IAChCA,EAAQA,EAAMgO,GACdqN,GAAY,QAEFpd,IAAV0D,GAAuBzR,EAAQ8P,KAC/BA,EAAQA,EAAM2B,EAAQ3B,EAAMlE,QAC5Buf,GAAY,QAEFpd,IAAV+B,GAIA,OAHIob,IAASC,IACTD,EAAKC,WAAY,GAEdrb,CAGnB,CAeA,SAASsb,GAAcC,EAAevN,GAClC,OAAOtS,OAAOC,OAAOD,OAAOoG,OAAOyZ,GAAgBvN,EACvD,CAWI,SAASwN,GAAgBC,EAAQC,EAAW,CAC5C,IACDC,EAAYb,EAAUc,EAAY,KAAIH,EAAO,KAC5C,MAAMI,EAAkBF,GAAcF,OACd,IAAbX,IACPA,EAAWgB,GAAS,YAAaL,IAErC,MAAMM,EAAQ,CACV,CAACC,OAAOC,aAAc,SACtBC,YAAY,EACZC,QAASV,EACTW,YAAaP,EACb9K,UAAW+J,EACXuB,WAAYT,EACZ9L,SAAWvC,GAAQiO,GAAgB,CAC3BjO,KACGkO,GACJC,EAAUG,EAAiBf,IAEtC,OAAO,IAAIwB,MAAMP,EAAO,CAGpBQ,eAAe,CAAC1a,EAAQ6Y,YACb7Y,EAAO6Y,UACP7Y,EAAO2a,aACPf,EAAO,GAAGf,IACV,GAIXhP,IAAI,CAAC7J,EAAQ6Y,IACF+B,GAAQ5a,EAAQ6Y,GAAM,IAyOzC,SAA8BA,EAAMgB,EAAUD,EAAQiB,GAClD,IAAI1c,EACJ,IAAK,MAAM2c,KAAUjB,EAEjB,GADA1b,EAAQ8b,GAASc,GAAQD,EAAQjC,GAAOe,QACnB,IAAVzb,EACP,OAAO6c,GAAiBnC,EAAM1a,GAAS8c,GAAkBrB,EAAQiB,EAAOhC,EAAM1a,GAASA,CAGnG,CAjP6C+c,CAAqBrC,EAAMgB,EAAUD,EAAQ5Z,KAKlFmb,yBAAyB,CAACnb,EAAQ6Y,IACvBuC,QAAQD,yBAAyBnb,EAAOsa,QAAQ,GAAIzB,GAI/DwC,eAAe,IACJD,QAAQC,eAAezB,EAAO,IAIzCxX,IAAI,CAACpC,EAAQ6Y,IACFyC,GAAqBtb,GAAQoL,SAASyN,GAIjD0C,QAASvb,GACEsb,GAAqBtb,GAIhCgK,IAAKhK,EAAQ6Y,EAAM1a,GACf,MAAMqd,EAAUxb,EAAOyb,WAAazb,EAAOyb,SAAW1B,KAGtD,OAFA/Z,EAAO6Y,GAAQ2C,EAAQ3C,GAAQ1a,SACxB6B,EAAO2a,OACP,CACX,GAER,CAQI,SAASe,GAAeb,EAAO1O,EAASwP,EAAUC,GAClD,MAAM1B,EAAQ,CACVG,YAAY,EACZwB,OAAQhB,EACRiB,SAAU3P,EACV4P,UAAWJ,EACXK,OAAQ,IAAIC,IACZrQ,aAAcA,GAAaiP,EAAOe,GAClCM,WAAapP,GAAM4O,GAAeb,EAAO/N,EAAK6O,EAAUC,GACxD3N,SAAWvC,GAAQgQ,GAAeb,EAAM5M,SAASvC,GAAQS,EAASwP,EAAUC,IAEhF,OAAO,IAAInB,MAAMP,EAAO,CAGpBQ,eAAe,CAAC1a,EAAQ6Y,YACb7Y,EAAO6Y,UACPgC,EAAMhC,IACN,GAIXhP,IAAI,CAAC7J,EAAQ6Y,EAAMsD,IACRvB,GAAQ5a,EAAQ6Y,GAAM,IA6DzC,SAA6B7Y,EAAQ6Y,EAAMsD,GACvC,MAAM,OAAEN,EAAO,SAAEC,EAAS,UAAEC,EAAYnQ,aAAcL,GAAiBvL,EACvE,IAAI7B,EAAQ0d,EAAOhD,GAYnB,OAVI7W,GAAW7D,IAAUoN,EAAY6Q,aAAavD,KAC9C1a,EAWR,SAA4B0a,EAAMwD,EAAUrc,EAAQmc,GAChD,MAAM,OAAEN,EAAO,SAAEC,EAAS,UAAEC,EAAU,OAAEC,GAAYhc,EACpD,GAAIgc,EAAO5Z,IAAIyW,GACX,MAAM,IAAIyD,MAAM,uBAAyBluB,MAAMmL,KAAKyiB,GAAQO,KAAK,MAAQ,KAAO1D,GAEpFmD,EAAOQ,IAAI3D,GACX,IAAI1a,EAAQke,EAASP,EAAUC,GAAaI,GAM5C,OALAH,EAAOS,OAAO5D,GACVmC,GAAiBnC,EAAM1a,KAEvBA,EAAQ8c,GAAkBY,EAAOvB,QAASuB,EAAQhD,EAAM1a,IAErDA,CACX,CAxBgBue,CAAmB7D,EAAM1a,EAAO6B,EAAQmc,IAEhD9tB,EAAQ8P,IAAUA,EAAMlE,SACxBkE,EAsBR,SAAuB0a,EAAM1a,EAAO6B,EAAQ2c,GACxC,MAAM,OAAEd,EAAO,SAAEC,EAAS,UAAEC,EAAYnQ,aAAcL,GAAiBvL,EACvE,QAA8B,IAAnB8b,EAAShc,OAAyB6c,EAAY9D,GACrD,OAAO1a,EAAM2d,EAAShc,MAAQ3B,EAAMlE,QACjC,GAAIuE,EAASL,EAAM,IAAK,CAE3B,MAAMye,EAAMze,EACNyb,EAASiC,EAAOvB,QAAQuC,QAAQtvB,GAAIA,IAAMqvB,IAChDze,EAAQ,GACR,IAAK,MAAMgE,KAAQya,EAAI,CACnB,MAAMvb,EAAW4Z,GAAkBrB,EAAQiC,EAAQhD,EAAM1W,GACzDhE,EAAMuD,KAAKga,GAAera,EAAUya,EAAUC,GAAaA,EAAUlD,GAAOtN,GAChF,CACJ,CACA,OAAOpN,CACX,CArCgB2e,CAAcjE,EAAM1a,EAAO6B,EAAQuL,EAAYoR,cAEvD3B,GAAiBnC,EAAM1a,KAEvBA,EAAQud,GAAevd,EAAO2d,EAAUC,GAAaA,EAAUlD,GAAOtN,IAEnEpN,CACX,CA5E6C4e,CAAoB/c,EAAQ6Y,EAAMsD,KAKvEhB,yBAAyB,CAACnb,EAAQ6Y,IACvB7Y,EAAO4L,aAAaoR,QAAU5B,QAAQhZ,IAAIyY,EAAOhC,GAAQ,CAC5DlK,YAAY,EACZsO,cAAc,QACd7gB,EAAYgf,QAAQD,yBAAyBN,EAAOhC,GAI5DwC,eAAe,IACJD,QAAQC,eAAeR,GAIlCzY,IAAI,CAACpC,EAAQ6Y,IACFuC,QAAQhZ,IAAIyY,EAAOhC,GAI9B0C,QAAQ,IACGH,QAAQG,QAAQV,GAI3B7Q,IAAI,CAAChK,EAAQ6Y,EAAM1a,KACf0c,EAAMhC,GAAQ1a,SACP6B,EAAO6Y,IACP,IAGnB,CAGI,SAASjN,GAAaiP,EAAO/L,EAAW,CACxCoO,YAAY,EACZC,WAAW,IAEX,MAAM,YAAEpO,EAAaD,EAASoO,WAAW,WAAEjO,EAAYH,EAASqO,UAAU,SAAEC,EAAUtO,EAASkO,SAAanC,EAC5G,MAAO,CACHmC,QAASI,EACTF,WAAYnO,EACZoO,UAAWlO,EACXmN,aAAcpa,GAAW+M,GAAeA,EAAc,IAAIA,EAC1D4N,YAAa3a,GAAWiN,GAAcA,EAAa,IAAIA,EAE/D,CACA,MAAM8L,GAAU,CAACD,EAAQ3M,IAAO2M,EAASA,EAASjZ,GAAYsM,GAAQA,EAChE6M,GAAmB,CAACnC,EAAM1a,IAAQK,EAASL,IAAmB,aAAT0a,IAAyD,OAAjChf,OAAOwhB,eAAeld,IAAmBA,EAAMrD,cAAgBjB,QAClJ,SAAS+gB,GAAQ5a,EAAQ6Y,EAAMQ,GAC3B,GAAIxf,OAAOuE,UAAU4C,eAAe1C,KAAK0B,EAAQ6Y,GAC7C,OAAO7Y,EAAO6Y,GAElB,MAAM1a,EAAQkb,IAGd,OADArZ,EAAO6Y,GAAQ1a,EACRA,CACX,CA+CA,SAASkf,GAAgBpE,EAAUJ,EAAM1a,GACrC,OAAO6D,GAAWiX,GAAYA,EAASJ,EAAM1a,GAAS8a,CAC1D,CACA,MAAMqE,GAAW,CAACld,EAAKmd,KAAiB,IAARnd,EAAemd,EAAwB,iBAARnd,EAAmBgB,GAAiBmc,EAAQnd,QAAOhE,EAClH,SAASohB,GAAUxT,EAAKyT,EAAcrd,EAAKsd,EAAgBvf,GACvD,IAAK,MAAMof,KAAUE,EAAa,CAC9B,MAAM/R,EAAQ4R,GAASld,EAAKmd,GAC5B,GAAI7R,EAAO,CACP1B,EAAIwS,IAAI9Q,GACR,MAAMuN,EAAWoE,GAAgB3R,EAAMwD,UAAW9O,EAAKjC,GACvD,QAAwB,IAAb8a,GAA4BA,IAAa7Y,GAAO6Y,IAAayE,EAGpE,OAAOzE,CAEf,MAAO,IAAc,IAAVvN,QAA6C,IAAnBgS,GAAkCtd,IAAQsd,EAG3E,OAAO,IAEf,CACA,OAAO,CACX,CACA,SAASzC,GAAkBwC,EAAcpc,EAAUwX,EAAM1a,GACrD,MAAM2b,EAAazY,EAASkZ,YACtBtB,EAAWoE,GAAgBhc,EAAS6N,UAAW2J,EAAM1a,GACrDwf,EAAY,IACXF,KACA3D,GAED9P,EAAM,IAAIiS,IAChBjS,EAAIwS,IAAIre,GACR,IAAIiC,EAAMwd,GAAiB5T,EAAK2T,EAAW9E,EAAMI,GAAYJ,EAAM1a,GACnE,OAAY,OAARiC,SAGoB,IAAb6Y,GAA4BA,IAAaJ,IAChDzY,EAAMwd,GAAiB5T,EAAK2T,EAAW1E,EAAU7Y,EAAKjC,GAC1C,OAARiC,KAIDuZ,GAAgBvrB,MAAMmL,KAAKyQ,GAAM,CACpC,IACD8P,EAAYb,GAAU,IAQ7B,SAAsB5X,EAAUwX,EAAM1a,GAClC,MAAMof,EAASlc,EAASmZ,aAClB3B,KAAQ0E,IACVA,EAAO1E,GAAQ,CAAC,GAEpB,MAAM7Y,EAASud,EAAO1E,GACtB,OAAIxqB,EAAQ2R,IAAWxB,EAASL,GAErBA,EAEJ6B,GAAU,CAAC,CACtB,CAnBiC6d,CAAaxc,EAAUwX,EAAM1a,IAC9D,CACA,SAASyf,GAAiB5T,EAAK2T,EAAWvd,EAAK6Y,EAAU9W,GACrD,KAAM/B,GACFA,EAAMod,GAAUxT,EAAK2T,EAAWvd,EAAK6Y,EAAU9W,GAEnD,OAAO/B,CACX,CAsBA,SAAS6Z,GAAS7Z,EAAKwZ,GACnB,IAAK,MAAMlO,KAASkO,EAAO,CACvB,IAAKlO,EACD,SAEJ,MAAMvN,EAAQuN,EAAMtL,GACpB,QAAqB,IAAVjC,EACP,OAAOA,CAEf,CACJ,CACA,SAASmd,GAAqBtb,GAC1B,IAAI7E,EAAO6E,EAAO2a,MAIlB,OAHKxf,IACDA,EAAO6E,EAAO2a,MAItB,SAAkCf,GAC9B,MAAM5P,EAAM,IAAIiS,IAChB,IAAK,MAAMvQ,KAASkO,EAChB,IAAK,MAAMxZ,KAAOvG,OAAOsB,KAAKuQ,GAAOmR,QAAQpvB,IAAKA,EAAEuhB,WAAW,OAC3DhF,EAAIwS,IAAIpc,GAGhB,OAAOhS,MAAMmL,KAAKyQ,EACtB,CAZ8B8T,CAAyB9d,EAAOsa,UAEnDnf,CACX,CAyBA,MAAM4iB,GAAUrf,OAAOqf,SAAW,MAC5BC,GAAW,CAACC,EAAQnwB,IAAIA,EAAImwB,EAAOhkB,SAAWgkB,EAAOnwB,GAAGowB,MAAQD,EAAOnwB,GACvEqwB,GAAgBlR,GAA0B,MAAdA,EAAoB,IAAM,IAC5D,SAASmR,GAAYC,EAAYC,EAAaC,EAAYrhB,GAItD,MAAMsY,EAAW6I,EAAWH,KAAOI,EAAcD,EAC3Cxd,EAAUyd,EACVE,EAAOD,EAAWL,KAAOI,EAAcC,EACvCE,EAAM1a,GAAsBlD,EAAS2U,GACrCkJ,EAAM3a,GAAsBya,EAAM3d,GACxC,IAAI8d,EAAMF,GAAOA,EAAMC,GACnBE,EAAMF,GAAOD,EAAMC,GAEvBC,EAAMjb,MAAMib,GAAO,EAAIA,EACvBC,EAAMlb,MAAMkb,GAAO,EAAIA,EACvB,MAAMC,EAAK3hB,EAAIyhB,EACTG,EAAK5hB,EAAI0hB,EACf,MAAO,CACHpJ,SAAU,CACN/mB,EAAGoS,EAAQpS,EAAIowB,GAAML,EAAK/vB,EAAI+mB,EAAS/mB,GACvC0S,EAAGN,EAAQM,EAAI0d,GAAML,EAAKrd,EAAIqU,EAASrU,IAE3Cqd,KAAM,CACF/vB,EAAGoS,EAAQpS,EAAIqwB,GAAMN,EAAK/vB,EAAI+mB,EAAS/mB,GACvC0S,EAAGN,EAAQM,EAAI2d,GAAMN,EAAKrd,EAAIqU,EAASrU,IAGnD,CAoFA,SAAS4d,GAAgBC,EAAIjzB,EAAKD,GAC9B,OAAOD,KAAKC,IAAID,KAAKE,IAAIizB,EAAIlzB,GAAMC,EACvC,CAwBI,SAASkzB,GAA2BhB,EAAQ1d,EAAS4U,EAAM7F,EAAMrC,GACjE,IAAInf,EAAG4R,EAAMwV,EAAOgK,EAKpB,GAHI3e,EAAQ4e,WACRlB,EAASA,EAAOpB,QAAQmC,IAAMA,EAAGd,QAEE,aAAnC3d,EAAQ6e,wBAzDZ,SAA6BnB,EAAQhR,EAAY,KACjD,MAAMoS,EAAYlB,GAAalR,GACzBqS,EAAYrB,EAAOhkB,OACnBslB,EAASnxB,MAAMkxB,GAAWzK,KAAK,GAC/B2K,EAAKpxB,MAAMkxB,GAEjB,IAAIxxB,EAAG2xB,EAAaC,EAChBC,EAAa3B,GAASC,EAAQ,GAClC,IAAInwB,EAAI,EAAGA,EAAIwxB,IAAaxxB,EAIxB,GAHA2xB,EAAcC,EACdA,EAAeC,EACfA,EAAa3B,GAASC,EAAQnwB,EAAI,GAC7B4xB,EAAL,CAGA,GAAIC,EAAY,CACZ,MAAMC,EAAaD,EAAW1S,GAAayS,EAAazS,GAExDsS,EAAOzxB,GAAoB,IAAf8xB,GAAoBD,EAAWN,GAAaK,EAAaL,IAAcO,EAAa,CACpG,CACAJ,EAAG1xB,GAAM2xB,EAA2BE,EAA6B5c,GAAKwc,EAAOzxB,EAAI,MAAQiV,GAAKwc,EAAOzxB,IAAM,GAAKyxB,EAAOzxB,EAAI,GAAKyxB,EAAOzxB,IAAM,EAA5FyxB,EAAOzxB,EAAI,GAArCyxB,EAAOzxB,EAN9B,EAtEJ,SAAwBmwB,EAAQsB,EAAQC,GACxC,MAAMF,EAAYrB,EAAOhkB,OACzB,IAAI4lB,EAAQC,EAAOC,EAAMC,EAAkBN,EACvCC,EAAa3B,GAASC,EAAQ,GAClC,IAAI,IAAInwB,EAAI,EAAGA,EAAIwxB,EAAY,IAAKxxB,EAChC4xB,EAAeC,EACfA,EAAa3B,GAASC,EAAQnwB,EAAI,GAC7B4xB,GAAiBC,IAGlB3c,GAAauc,EAAOzxB,GAAI,EAAGiwB,IAC3ByB,EAAG1xB,GAAK0xB,EAAG1xB,EAAI,GAAK,GAGxB+xB,EAASL,EAAG1xB,GAAKyxB,EAAOzxB,GACxBgyB,EAAQN,EAAG1xB,EAAI,GAAKyxB,EAAOzxB,GAC3BkyB,EAAmBn0B,KAAKyN,IAAIumB,EAAQ,GAAKh0B,KAAKyN,IAAIwmB,EAAO,GACrDE,GAAoB,IAGxBD,EAAO,EAAIl0B,KAAKqY,KAAK8b,GACrBR,EAAG1xB,GAAK+xB,EAASE,EAAOR,EAAOzxB,GAC/B0xB,EAAG1xB,EAAI,GAAKgyB,EAAQC,EAAOR,EAAOzxB,KAE1C,CAsDImyB,CAAehC,EAAQsB,EAAQC,GArDnC,SAAyBvB,EAAQuB,EAAIvS,EAAY,KAC7C,MAAMoS,EAAYlB,GAAalR,GACzBqS,EAAYrB,EAAOhkB,OACzB,IAAIyQ,EAAO+U,EAAaC,EACpBC,EAAa3B,GAASC,EAAQ,GAClC,IAAI,IAAInwB,EAAI,EAAGA,EAAIwxB,IAAaxxB,EAAE,CAI9B,GAHA2xB,EAAcC,EACdA,EAAeC,EACfA,EAAa3B,GAASC,EAAQnwB,EAAI,IAC7B4xB,EACD,SAEJ,MAAMQ,EAASR,EAAazS,GACtBkT,EAAST,EAAaL,GACxBI,IACA/U,GAASwV,EAAST,EAAYxS,IAAc,EAC5CyS,EAAa,MAAMzS,KAAeiT,EAASxV,EAC3CgV,EAAa,MAAML,KAAec,EAASzV,EAAQ8U,EAAG1xB,IAEtD6xB,IACAjV,GAASiV,EAAW1S,GAAaiT,GAAU,EAC3CR,EAAa,MAAMzS,KAAeiT,EAASxV,EAC3CgV,EAAa,MAAML,KAAec,EAASzV,EAAQ8U,EAAG1xB,GAE9D,CACJ,CA6BIsyB,CAAgBnC,EAAQuB,EAAIvS,EAChC,CAkCQoT,CAAoBpC,EAAQhR,OACzB,CACH,IAAIqT,EAAOhR,EAAO2O,EAAOA,EAAOhkB,OAAS,GAAKgkB,EAAO,GACrD,IAAInwB,EAAI,EAAG4R,EAAOue,EAAOhkB,OAAQnM,EAAI4R,IAAQ5R,EACzConB,EAAQ+I,EAAOnwB,GACfoxB,EAAgBd,GAAYkC,EAAMpL,EAAO+I,EAAOpyB,KAAKE,IAAI+B,EAAI,EAAG4R,GAAQ4P,EAAO,EAAI,IAAM5P,GAAOa,EAAQggB,SACxGrL,EAAMW,KAAOqJ,EAAc1J,SAAS/mB,EACpCymB,EAAMa,KAAOmJ,EAAc1J,SAASrU,EACpC+T,EAAMY,KAAOoJ,EAAcV,KAAK/vB,EAChCymB,EAAMc,KAAOkJ,EAAcV,KAAKrd,EAChCmf,EAAOpL,CAEf,CACI3U,EAAQigB,iBA3ChB,SAAyBvC,EAAQ9I,GAC7B,IAAIrnB,EAAG4R,EAAMwV,EAAOuL,EAAQC,EACxBC,EAAa1L,GAAegJ,EAAO,GAAI9I,GAC3C,IAAIrnB,EAAI,EAAG4R,EAAOue,EAAOhkB,OAAQnM,EAAI4R,IAAQ5R,EACzC4yB,EAAaD,EACbA,EAASE,EACTA,EAAa7yB,EAAI4R,EAAO,GAAKuV,GAAegJ,EAAOnwB,EAAI,GAAIqnB,GACtDsL,IAGLvL,EAAQ+I,EAAOnwB,GACX4yB,IACAxL,EAAMW,KAAOkJ,GAAgB7J,EAAMW,KAAMV,EAAKhF,KAAMgF,EAAKlF,OACzDiF,EAAMa,KAAOgJ,GAAgB7J,EAAMa,KAAMZ,EAAKnF,IAAKmF,EAAKjF,SAExDyQ,IACAzL,EAAMY,KAAOiJ,GAAgB7J,EAAMY,KAAMX,EAAKhF,KAAMgF,EAAKlF,OACzDiF,EAAMc,KAAO+I,GAAgB7J,EAAMc,KAAMb,EAAKnF,IAAKmF,EAAKjF,SAGpE,CAwBQsQ,CAAgBvC,EAAQ9I,EAEhC,CAUI,SAASyL,KACT,MAAyB,oBAAXxa,QAA8C,oBAAbya,QACnD,CAGI,SAASC,GAAeC,GACxB,IAAIxD,EAASwD,EAAQC,WAIrB,OAHIzD,GAAgC,wBAAtBA,EAAOlf,aACjBkf,EAASA,EAAO0D,MAEb1D,CACX,CAII,SAAS2D,GAAcC,EAAY1V,EAAM2V,GACzC,IAAIC,EAUJ,MAT0B,iBAAfF,GACPE,EAAgB5lB,SAAS0lB,EAAY,KACJ,IAA7BA,EAAW9gB,QAAQ,OAEnBghB,EAAgBA,EAAgB,IAAM5V,EAAKuV,WAAWI,KAG1DC,EAAgBF,EAEbE,CACX,CACA,MAAMC,GAAoBC,GAAUA,EAAQC,cAAcC,YAAYH,iBAAiBC,EAAS,MAI1FG,GAAY,CACd,MACA,QACA,SACA,QAEJ,SAASC,GAAmBC,EAAQlV,EAAOmV,GACvC,MAAMC,EAAS,CAAC,EAChBD,EAASA,EAAS,IAAMA,EAAS,GACjC,IAAI,IAAI/zB,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,MAAMi0B,EAAML,GAAU5zB,GACtBg0B,EAAOC,GAAOpe,WAAWie,EAAOlV,EAAQ,IAAMqV,EAAMF,KAAY,CACpE,CAGA,OAFAC,EAAOzQ,MAAQyQ,EAAO3R,KAAO2R,EAAO7R,MACpC6R,EAAOvO,OAASuO,EAAO9R,IAAM8R,EAAO5R,OAC7B4R,CACX,CACA,MAAME,GAAe,CAACvzB,EAAG0S,EAAGnB,KAAUvR,EAAI,GAAK0S,EAAI,MAAQnB,IAAWA,EAAOiiB,YA+BzE,SAASC,GAAoBC,EAAO3X,GACpC,GAAI,WAAY2X,EACZ,OAAOA,EAEX,MAAM,OAAEjP,EAAO,wBAAEH,GAA6BvI,EACxCkC,EAAQ4U,GAAiBpO,GACzBkP,EAAgC,eAApB1V,EAAM2V,UAClBC,EAAWX,GAAmBjV,EAAO,WACrC6V,EAAUZ,GAAmBjV,EAAO,SAAU,UAC9C,EAAEje,EAAE,EAAE0S,EAAE,IAAEqhB,GAnChB,SAA2Bz1B,EAAGmmB,GAC9B,MAAMuP,EAAU11B,EAAE01B,QACZ1iB,EAAS0iB,GAAWA,EAAQxoB,OAASwoB,EAAQ,GAAK11B,GAClD,QAAE21B,EAAQ,QAAEC,GAAa5iB,EAC/B,IACItR,EAAG0S,EADHqhB,GAAM,EAEV,GAAIR,GAAaU,EAASC,EAAS51B,EAAEiT,QACjCvR,EAAIi0B,EACJvhB,EAAIwhB,MACD,CACH,MAAM/N,EAAO1B,EAAO0P,wBACpBn0B,EAAIsR,EAAO8iB,QAAUjO,EAAKzE,KAC1BhP,EAAIpB,EAAO+iB,QAAUlO,EAAK5E,IAC1BwS,GAAM,CACV,CACA,MAAO,CACH/zB,IACA0S,IACAqhB,MAER,CAe6BO,CAAkBZ,EAAOjP,GAC5CQ,EAAU4O,EAASnS,MAAQqS,GAAOD,EAAQpS,MAC1CwD,EAAU2O,EAAStS,KAAOwS,GAAOD,EAAQvS,KAC/C,IAAI,MAAEqB,EAAM,OAAEkC,GAAY/I,EAK1B,OAJI4X,IACA/Q,GAASiR,EAASjR,MAAQkR,EAAQlR,MAClCkC,GAAU+O,EAAS/O,OAASgP,EAAQhP,QAEjC,CACH9kB,EAAG5C,KAAKL,OAAOiD,EAAIilB,GAAWrC,EAAQ6B,EAAO7B,MAAQ0B,GACrD5R,EAAGtV,KAAKL,OAAO2V,EAAIwS,GAAWJ,EAASL,EAAOK,OAASR,GAE/D,CA0BA,MAAMiQ,GAAUv3B,GAAII,KAAKL,MAAU,GAAJC,GAAU,GAuCrC,SAASw3B,GAAYzY,EAAO0Y,EAAYC,GACxC,MAAMC,EAAaF,GAAc,EAC3BG,EAAex3B,KAAK0X,MAAMiH,EAAM+I,OAAS6P,GACzCE,EAAcz3B,KAAK0X,MAAMiH,EAAM6G,MAAQ+R,GAC7C5Y,EAAM+I,OAAS1nB,KAAK0X,MAAMiH,EAAM+I,QAChC/I,EAAM6G,MAAQxlB,KAAK0X,MAAMiH,EAAM6G,OAC/B,MAAM6B,EAAS1I,EAAM0I,OAQrB,OAJIA,EAAOxG,QAAUyW,IAAejQ,EAAOxG,MAAM6G,SAAWL,EAAOxG,MAAM2E,SACrE6B,EAAOxG,MAAM6G,OAAS,GAAG/I,EAAM+I,WAC/BL,EAAOxG,MAAM2E,MAAQ,GAAG7G,EAAM6G,YAE9B7G,EAAMuI,0BAA4BqQ,GAAclQ,EAAOK,SAAW8P,GAAgBnQ,EAAO7B,QAAUiS,KACnG9Y,EAAMuI,wBAA0BqQ,EAChClQ,EAAOK,OAAS8P,EAChBnQ,EAAO7B,MAAQiS,EACf9Y,EAAMsC,IAAIyW,aAAaH,EAAY,EAAG,EAAGA,EAAY,EAAG,IACjD,EAGf,CAKI,MAAMI,GAA+B,WACrC,IAAIC,GAAmB,EACvB,IACI,MAAMljB,EAAU,CACRmjB,cAEA,OADAD,GAAmB,GACZ,CACX,GAEA7C,OACAxa,OAAOud,iBAAiB,OAAQ,KAAMpjB,GACtC6F,OAAOwd,oBAAoB,OAAQ,KAAMrjB,GAEjD,CAAE,MAAOxT,GAET,CACA,OAAO02B,CACX,CAjByC,GA0BrC,SAASI,GAAatC,EAASuC,GAC/B,MAAM3lB,EA/LV,SAAkB4lB,EAAID,GAClB,OAAOxC,GAAiByC,GAAIC,iBAAiBF,EACjD,CA6LkBG,CAAS1C,EAASuC,GAC1BxL,EAAUna,GAASA,EAAMoa,MAAM,qBACrC,OAAOD,GAAWA,EAAQ,QAAKlc,CACnC,CAII,SAAS8nB,GAAa1pB,EAAIC,EAAIyC,EAAGiQ,GACjC,MAAO,CACH1e,EAAG+L,EAAG/L,EAAIyO,GAAKzC,EAAGhM,EAAI+L,EAAG/L,GACzB0S,EAAG3G,EAAG2G,EAAIjE,GAAKzC,EAAG0G,EAAI3G,EAAG2G,GAEjC,CAGI,SAASgjB,GAAsB3pB,EAAIC,EAAIyC,EAAGiQ,GAC1C,MAAO,CACH1e,EAAG+L,EAAG/L,EAAIyO,GAAKzC,EAAGhM,EAAI+L,EAAG/L,GACzB0S,EAAY,WAATgM,EAAoBjQ,EAAI,GAAM1C,EAAG2G,EAAI1G,EAAG0G,EAAa,UAATgM,EAAmBjQ,EAAI,EAAI1C,EAAG2G,EAAI1G,EAAG0G,EAAIjE,EAAI,EAAIzC,EAAG0G,EAAI3G,EAAG2G,EAElH,CAGI,SAASijB,GAAqB5pB,EAAIC,EAAIyC,EAAGiQ,GACzC,MAAMkX,EAAM,CACR51B,EAAG+L,EAAGsb,KACN3U,EAAG3G,EAAGwb,MAEJsO,EAAM,CACR71B,EAAGgM,EAAGob,KACN1U,EAAG1G,EAAGsb,MAEJppB,EAAIu3B,GAAa1pB,EAAI6pB,EAAKnnB,GAC1BtQ,EAAIs3B,GAAaG,EAAKC,EAAKpnB,GAC3BrQ,EAAIq3B,GAAaI,EAAK7pB,EAAIyC,GAC1BpQ,EAAIo3B,GAAav3B,EAAGC,EAAGsQ,GACvBnQ,EAAIm3B,GAAat3B,EAAGC,EAAGqQ,GAC7B,OAAOgnB,GAAap3B,EAAGC,EAAGmQ,EAC9B,CA+DA,SAASqnB,GAAWT,GAChB,MAAiB,UAAbA,EACO,CACHU,QAASngB,GACTogB,QAAStgB,GACTugB,UAAWtgB,IAGZ,CACHogB,QAASzf,GACT0f,QAAS,CAAC93B,EAAGC,IAAID,EAAIC,EACrB83B,UAAYj2B,GAAIA,EAExB,CACA,SAASk2B,IAAiB,MAAEpgB,EAAM,IAAEC,EAAI,MAAEogB,EAAM,KAAEtV,EAAK,MAAE5C,IACrD,MAAO,CACHnI,MAAOA,EAAQqgB,EACfpgB,IAAKA,EAAMogB,EACXtV,KAAMA,IAAS9K,EAAMD,EAAQ,GAAKqgB,GAAU,EAC5ClY,QAER,CA8BC,SAASmY,GAAcC,EAAS7G,EAAQ1N,GACrC,IAAKA,EACD,MAAO,CACHuU,GAGR,MAAM,SAAEhB,EAAWvf,MAAOwgB,EAAavgB,IAAKwgB,GAAczU,EACpDqU,EAAQ3G,EAAOhkB,QACf,QAAEwqB,EAAQ,QAAED,EAAQ,UAAEE,GAAeH,GAAWT,IAChD,MAAEvf,EAAM,IAAEC,EAAI,KAAE8K,EAAK,MAAE5C,GAtCjC,SAAoBoY,EAAS7G,EAAQ1N,GACjC,MAAM,SAAEuT,EAAWvf,MAAOwgB,EAAavgB,IAAKwgB,GAAczU,GACpD,QAAEiU,EAAQ,UAAEE,GAAeH,GAAWT,GACtCc,EAAQ3G,EAAOhkB,OACrB,IACInM,EAAG4R,GADH,MAAE6E,EAAM,IAAEC,EAAI,KAAE8K,GAAUwV,EAE9B,GAAIxV,EAAM,CAGN,IAFA/K,GAASqgB,EACTpgB,GAAOogB,EACH92B,EAAI,EAAG4R,EAAOklB,EAAO92B,EAAI4R,GACpB8kB,EAAQE,EAAUzG,EAAO1Z,EAAQqgB,GAAOd,IAAYiB,EAAYC,KADpCl3B,EAIjCyW,IACAC,IAEJD,GAASqgB,EACTpgB,GAAOogB,CACX,CAIA,OAHIpgB,EAAMD,IACNC,GAAOogB,GAEJ,CACHrgB,QACAC,MACA8K,OACA5C,MAAOoY,EAAQpY,MAEvB,CAU4CuY,CAAWH,EAAS7G,EAAQ1N,GAC9DuR,EAAS,GACf,IAEI3jB,EAAO+W,EAAOgQ,EAFdC,GAAS,EACTC,EAAW,KAMf,IAAI,IAAIt3B,EAAIyW,EAAO+b,EAAO/b,EAAOzW,GAAK0W,IAAO1W,EACzConB,EAAQ+I,EAAOnwB,EAAI82B,GACf1P,EAAMgJ,OAGV/f,EAAQumB,EAAUxP,EAAM4O,IACpB3lB,IAAU+mB,IAGdC,EAASX,EAAQrmB,EAAO4mB,EAAYC,GACnB,OAAbI,IAZgBD,GAFEX,EAAQO,EAAYG,EAAW/mB,IAA6C,IAAnCsmB,EAAQM,EAAYG,MAe/EE,EAA0C,IAA/BX,EAAQtmB,EAAO4mB,GAAoBj3B,EAAIwyB,GAErC,OAAb8E,KAdgBD,GAF6B,IAA7BV,EAAQO,EAAU7mB,IAAgBqmB,EAAQQ,EAAUE,EAAW/mB,MAiB/E2jB,EAAOpgB,KAAKijB,GAAiB,CACzBpgB,MAAO6gB,EACP5gB,IAAK1W,EACLwhB,OACAsV,QACAlY,WAEJ0Y,EAAW,MAEf9E,EAAOxyB,EACPo3B,EAAY/mB,IAWhB,OATiB,OAAbinB,GACAtD,EAAOpgB,KAAKijB,GAAiB,CACzBpgB,MAAO6gB,EACP5gB,MACA8K,OACAsV,QACAlY,WAGDoV,CACX,CA6JA,SAASuD,GAAU9kB,GACf,MAAO,CACHwL,gBAAiBxL,EAAQwL,gBACzBuZ,eAAgB/kB,EAAQ+kB,eACxBC,WAAYhlB,EAAQglB,WACpBC,iBAAkBjlB,EAAQilB,iBAC1BC,gBAAiBllB,EAAQklB,gBACzB3Q,YAAavU,EAAQuU,YACrB9I,YAAazL,EAAQyL,YAE7B,CACA,SAAS0Z,GAAahZ,EAAOiZ,GACzB,IAAKA,EACD,OAAO,EAEX,MAAMzL,EAAQ,GACR0L,EAAW,SAASxlB,EAAKjC,GAC3B,OAAK6K,GAAoB7K,IAGpB+b,EAAM9O,SAASjN,IAChB+b,EAAMxY,KAAKvD,GAER+b,EAAM7Z,QAAQlC,IALVA,CAMf,EACA,OAAOuL,KAAKC,UAAU+C,EAAOkZ,KAAclc,KAAKC,UAAUgc,EAAWC,EACzE,CC7qFA,MAAMC,GACF/qB,cACIgB,KAAKgqB,SAAW,KAChBhqB,KAAKiqB,QAAU,IAAI1c,IACnBvN,KAAKkqB,UAAW,EAChBlqB,KAAKmqB,eAAY7pB,CACrB,CACH8pB,QAAQ1b,EAAO2b,EAAOC,EAAMrrB,GACrB,MAAMsrB,EAAYF,EAAMngB,UAAUjL,GAC5BurB,EAAWH,EAAM/W,SACvBiX,EAAUngB,SAASlH,GAAKA,EAAG,CACnBwL,QACA+b,QAASJ,EAAMI,QACfD,WACAE,YAAa36B,KAAKE,IAAIq6B,EAAOD,EAAM5hB,MAAO+hB,MAEtD,CACHG,WACW3qB,KAAKgqB,WAGThqB,KAAKkqB,UAAW,EAChBlqB,KAAKgqB,SAAW3f,GAAiB7H,KAAK8H,QAAQ,KAC1CtK,KAAK4qB,UACL5qB,KAAKgqB,SAAW,KACZhqB,KAAKkqB,UACLlqB,KAAK2qB,UACT,IAER,CACHC,QAAQN,EAAOO,KAAKC,OACb,IAAIC,EAAY,EAChB/qB,KAAKiqB,QAAQ7f,SAAQ,CAACigB,EAAO3b,KACzB,IAAK2b,EAAMW,UAAYX,EAAMY,MAAM9sB,OAC/B,OAEJ,MAAM8sB,EAAQZ,EAAMY,MACpB,IAEI5kB,EAFArU,EAAIi5B,EAAM9sB,OAAS,EACnB+sB,GAAO,EAEX,KAAMl5B,GAAK,IAAKA,EACZqU,EAAO4kB,EAAMj5B,GACTqU,EAAK8kB,SACD9kB,EAAK+kB,OAASf,EAAM/W,WACpB+W,EAAM/W,SAAWjN,EAAK+kB,QAE1B/kB,EAAKglB,KAAKf,GACVY,GAAO,IAEPD,EAAMj5B,GAAKi5B,EAAMA,EAAM9sB,OAAS,GAChC8sB,EAAMK,OAGVJ,IACAxc,EAAMwc,OACNlrB,KAAKoqB,QAAQ1b,EAAO2b,EAAOC,EAAM,aAEhCW,EAAM9sB,SACPksB,EAAMW,SAAU,EAChBhrB,KAAKoqB,QAAQ1b,EAAO2b,EAAOC,EAAM,YACjCD,EAAMI,SAAU,GAEpBM,GAAaE,EAAM9sB,MAAM,IAE7B6B,KAAKmqB,UAAYG,EACC,IAAdS,IACA/qB,KAAKkqB,UAAW,EAExB,CACHqB,UAAU7c,GACH,MAAM8c,EAASxrB,KAAKiqB,QACpB,IAAII,EAAQmB,EAAOzd,IAAIW,GAavB,OAZK2b,IACDA,EAAQ,CACJW,SAAS,EACTP,SAAS,EACTQ,MAAO,GACP/gB,UAAW,CACPuhB,SAAU,GACVC,SAAU,KAGlBF,EAAOtd,IAAIQ,EAAO2b,IAEfA,CACX,CACHsB,OAAOjd,EAAO2X,EAAOuF,GACd5rB,KAAKurB,UAAU7c,GAAOxE,UAAUmc,GAAOzgB,KAAKgmB,EAChD,CACHlL,IAAIhS,EAAOuc,GACCA,GAAUA,EAAM9sB,QAGrB6B,KAAKurB,UAAU7c,GAAOuc,MAAMrlB,QAAQqlB,EACxC,CACH3kB,IAAIoI,GACG,OAAO1O,KAAKurB,UAAU7c,GAAOuc,MAAM9sB,OAAS,CAChD,CACHsK,MAAMiG,GACC,MAAM2b,EAAQrqB,KAAKiqB,QAAQlc,IAAIW,GAC1B2b,IAGLA,EAAMW,SAAU,EAChBX,EAAM5hB,MAAQoiB,KAAKC,MACnBT,EAAM/W,SAAW+W,EAAMY,MAAMY,QAAO,CAACC,EAAKC,IAAMh8B,KAAKC,IAAI87B,EAAKC,EAAIC,YAAY,GAC9EhsB,KAAK2qB,WACT,CACAK,QAAQtc,GACJ,IAAK1O,KAAKkqB,SACN,OAAO,EAEX,MAAMG,EAAQrqB,KAAKiqB,QAAQlc,IAAIW,GAC/B,SAAK2b,GAAUA,EAAMW,SAAYX,EAAMY,MAAM9sB,OAIjD,CACH8tB,KAAKvd,GACE,MAAM2b,EAAQrqB,KAAKiqB,QAAQlc,IAAIW,GAC/B,IAAK2b,IAAUA,EAAMY,MAAM9sB,OACvB,OAEJ,MAAM8sB,EAAQZ,EAAMY,MACpB,IAAIj5B,EAAIi5B,EAAM9sB,OAAS,EACvB,KAAMnM,GAAK,IAAKA,EACZi5B,EAAMj5B,GAAGk6B,SAEb7B,EAAMY,MAAQ,GACdjrB,KAAKoqB,QAAQ1b,EAAO2b,EAAOQ,KAAKC,MAAO,WAC3C,CACHqB,OAAOzd,GACA,OAAO1O,KAAKiqB,QAAQtJ,OAAOjS,EAC/B,EAEJ,IAAI0d,GAA2B,IAAIrC,GAEnC,MAAMlqB,GAAc,cACdwsB,GAAgB,CAClBC,QAAQ,CAAC7uB,EAAMF,EAAIgvB,IACRA,EAAS,GAAMhvB,EAAKE,EAElCmD,MAAOnD,EAAMF,EAAIgvB,GACV,MAAMC,EAAK5rB,GAAMnD,GAAQoC,IACnBiB,EAAK0rB,EAAGrsB,OAASS,GAAMrD,GAAMsC,IACnC,OAAOiB,GAAMA,EAAGX,MAAQW,EAAGH,IAAI6rB,EAAID,GAAQhsB,YAAchD,CAC7D,EACAkvB,OAAO,CAAChvB,EAAMF,EAAIgvB,IACP9uB,GAAQF,EAAKE,GAAQ8uB,GAGpC,MAAMG,GACF1tB,YAAY2tB,EAAKzoB,EAAQ6Y,EAAMxf,GAC3B,MAAMqvB,EAAe1oB,EAAO6Y,GAC5Bxf,EAAKggB,GAAQ,CACToP,EAAIpvB,GACJA,EACAqvB,EACAD,EAAIlvB,OAER,MAAMA,EAAO8f,GAAQ,CACjBoP,EAAIlvB,KACJmvB,EACArvB,IAEJyC,KAAKmrB,SAAU,EACfnrB,KAAK6sB,IAAMF,EAAIzpB,IAAMmpB,GAAcM,EAAI1tB,aAAexB,GACtDuC,KAAK8sB,QAAU7hB,GAAQ0hB,EAAIpZ,SAAWtI,GAAQC,OAC9ClL,KAAK+sB,OAASh9B,KAAK0X,MAAMojB,KAAKC,OAAS6B,EAAItZ,OAAS,IACpDrT,KAAKgsB,UAAYhsB,KAAKorB,OAASr7B,KAAK0X,MAAMklB,EAAIrZ,UAC9CtT,KAAKgtB,QAAUL,EAAInZ,KACnBxT,KAAKitB,QAAU/oB,EACflE,KAAKktB,MAAQnQ,EACb/c,KAAKmtB,MAAQ1vB,EACbuC,KAAKotB,IAAM7vB,EACXyC,KAAKqtB,eAAY/sB,CACrB,CACAoT,SACI,OAAO1T,KAAKmrB,OAChB,CACAmC,OAAOX,EAAKpvB,EAAI+sB,GACZ,GAAItqB,KAAKmrB,QAAS,CACdnrB,KAAKoqB,SAAQ,GACb,MAAMwC,EAAe5sB,KAAKitB,QAAQjtB,KAAKktB,OACjCK,EAAUjD,EAAOtqB,KAAK+sB,OACtB3d,EAASpP,KAAKgsB,UAAYuB,EAChCvtB,KAAK+sB,OAASzC,EACdtqB,KAAKgsB,UAAYj8B,KAAK0X,MAAM1X,KAAKC,IAAIof,EAAQud,EAAIrZ,WACjDtT,KAAKorB,QAAUmC,EACfvtB,KAAKgtB,QAAUL,EAAInZ,KACnBxT,KAAKotB,IAAM7P,GAAQ,CACfoP,EAAIpvB,GACJA,EACAqvB,EACAD,EAAIlvB,OAERuC,KAAKmtB,MAAQ5P,GAAQ,CACjBoP,EAAIlvB,KACJmvB,EACArvB,GAER,CACJ,CACA2uB,SACQlsB,KAAKmrB,UACLnrB,KAAKqrB,KAAKR,KAAKC,OACf9qB,KAAKmrB,SAAU,EACfnrB,KAAKoqB,SAAQ,GAErB,CACAiB,KAAKf,GACD,MAAMiD,EAAUjD,EAAOtqB,KAAK+sB,OACtBzZ,EAAWtT,KAAKgsB,UAChBjP,EAAO/c,KAAKktB,MACZzvB,EAAOuC,KAAKmtB,MACZ3Z,EAAOxT,KAAKgtB,MACZzvB,EAAKyC,KAAKotB,IAChB,IAAIb,EAEJ,GADAvsB,KAAKmrB,QAAU1tB,IAASF,IAAOiW,GAAQ+Z,EAAUja,IAC5CtT,KAAKmrB,QAGN,OAFAnrB,KAAKitB,QAAQlQ,GAAQxf,OACrByC,KAAKoqB,SAAQ,GAGbmD,EAAU,EACVvtB,KAAKitB,QAAQlQ,GAAQtf,GAGzB8uB,EAASgB,EAAUja,EAAW,EAC9BiZ,EAAS/Y,GAAQ+Y,EAAS,EAAI,EAAIA,EAASA,EAC3CA,EAASvsB,KAAK8sB,QAAQ/8B,KAAKE,IAAI,EAAGF,KAAKC,IAAI,EAAGu8B,KAC9CvsB,KAAKitB,QAAQlQ,GAAQ/c,KAAK6sB,IAAIpvB,EAAMF,EAAIgvB,GAC5C,CACAiB,OACI,MAAMC,EAAWztB,KAAKqtB,YAAcrtB,KAAKqtB,UAAY,IACrD,OAAO,IAAIK,SAAQ,CAACC,EAAKC,KACrBH,EAAS7nB,KAAK,CACV+nB,MACAC,OACF,GAEV,CACAxD,QAAQyD,GACJ,MAAMC,EAASD,EAAW,MAAQ,MAC5BJ,EAAWztB,KAAKqtB,WAAa,GACnC,IAAI,IAAIr7B,EAAI,EAAGA,EAAIy7B,EAAStvB,OAAQnM,IAChCy7B,EAASz7B,GAAG87B,IAEpB,EAGJ,MAAMC,GACF/uB,YAAY0P,EAAOsf,GACfhuB,KAAKiuB,OAASvf,EACd1O,KAAKkuB,YAAc,IAAI3gB,IACvBvN,KAAKmuB,UAAUH,EACnB,CACAG,UAAUH,GACN,IAAKtrB,EAASsrB,GACV,OAEJ,MAAMI,EAAmBrwB,OAAOsB,KAAK2T,GAAShD,WACxCqe,EAAgBruB,KAAKkuB,YAC3BnwB,OAAOuwB,oBAAoBN,GAAQ5jB,SAAS9F,IACxC,MAAMqoB,EAAMqB,EAAO1pB,GACnB,IAAK5B,EAASiqB,GACV,OAEJ,MAAMkB,EAAW,CAAC,EAClB,IAAK,MAAMU,KAAUH,EACjBP,EAASU,GAAU5B,EAAI4B,IAE1Bh8B,EAAQo6B,EAAIlZ,aAAekZ,EAAIlZ,YAAc,CAC1CnP,IACD8F,SAAS2S,IACJA,IAASzY,GAAQ+pB,EAAc/nB,IAAIyW,IACnCsR,EAAcngB,IAAI6O,EAAM8Q,EAC5B,GACF,GAEV,CACHW,gBAAgBtqB,EAAQoK,GACjB,MAAMmgB,EAAangB,EAAO7J,QACpBA,EAwEd,SAA8BP,EAAQuqB,GAClC,IAAKA,EACD,OAEJ,IAAIhqB,EAAUP,EAAOO,QACrB,GAAKA,EAUL,OANIA,EAAQiqB,UACRxqB,EAAOO,QAAUA,EAAU1G,OAAOC,OAAO,CAAC,EAAGyG,EAAS,CAClDiqB,SAAS,EACTC,YAAa,CAAC,KAGflqB,EATHP,EAAOO,QAAUgqB,CAUzB,CAxFwBG,CAAqB1qB,EAAQuqB,GAC7C,IAAKhqB,EACD,MAAO,GAEX,MAAMoP,EAAa7T,KAAK6uB,kBAAkBpqB,EAASgqB,GAOnD,OANIA,EAAWC,SAwDvB,SAAkB7a,EAAYJ,GAC1B,MAAMuX,EAAU,GACV3rB,EAAOtB,OAAOsB,KAAKoU,GACzB,IAAI,IAAIzhB,EAAI,EAAGA,EAAIqN,EAAKlB,OAAQnM,IAAI,CAChC,MAAM88B,EAAOjb,EAAWxU,EAAKrN,IACzB88B,GAAQA,EAAKpb,UACbsX,EAAQplB,KAAKkpB,EAAKtB,OAE1B,CACA,OAAOE,QAAQqB,IAAI/D,EACvB,CAjEYgE,CAAS9qB,EAAOO,QAAQkqB,YAAaF,GAAYQ,MAAK,KAClD/qB,EAAOO,QAAUgqB,CAAU,IAC5B,SAGA5a,CACX,CACHgb,kBAAkB3qB,EAAQoK,GACnB,MAAM+f,EAAgBruB,KAAKkuB,YACrBra,EAAa,GACbmX,EAAU9mB,EAAOyqB,cAAgBzqB,EAAOyqB,YAAc,CAAC,GACvD/R,EAAQ7e,OAAOsB,KAAKiP,GACpBgc,EAAOO,KAAKC,MAClB,IAAI94B,EACJ,IAAIA,EAAI4qB,EAAMze,OAAS,EAAGnM,GAAK,IAAKA,EAAE,CAClC,MAAM+qB,EAAOH,EAAM5qB,GACnB,GAAuB,MAAnB+qB,EAAKze,OAAO,GACZ,SAEJ,GAAa,YAATye,EAAoB,CACpBlJ,EAAWjO,QAAQ5F,KAAKwuB,gBAAgBtqB,EAAQoK,IAChD,QACJ,CACA,MAAMjM,EAAQiM,EAAOyO,GACrB,IAAI/M,EAAYgb,EAAQjO,GACxB,MAAM4P,EAAM0B,EAActgB,IAAIgP,GAC9B,GAAI/M,EAAW,CACX,GAAI2c,GAAO3c,EAAU0D,SAAU,CAC3B1D,EAAUsd,OAAOX,EAAKtqB,EAAOioB,GAC7B,QACJ,CACIta,EAAUkc,QAElB,CACKS,GAAQA,EAAIrZ,UAIjB0X,EAAQjO,GAAQ/M,EAAY,IAAI0c,GAAUC,EAAKzoB,EAAQ6Y,EAAM1a,GAC7DwR,EAAWjO,KAAKoK,IAJZ9L,EAAO6Y,GAAQ1a,CAKvB,CACA,OAAOwR,CACX,CACHyZ,OAAOppB,EAAQoK,GACR,GAA8B,IAA1BtO,KAAKkuB,YAAY9nB,KAEjB,YADArI,OAAOC,OAAOkG,EAAQoK,GAG1B,MAAMuF,EAAa7T,KAAK6uB,kBAAkB3qB,EAAQoK,GAClD,OAAIuF,EAAW1V,QACXiuB,GAAS1L,IAAI1gB,KAAKiuB,OAAQpa,IACnB,QAFX,CAIJ,EA+BJ,SAASqb,GAAUpd,EAAOqd,GACtB,MAAM9U,EAAOvI,GAASA,EAAMrN,SAAW,CAAC,EAClCjB,EAAU6W,EAAK7W,QACfvT,OAAmBqQ,IAAb+Z,EAAKpqB,IAAoBk/B,EAAkB,EACjDn/B,OAAmBsQ,IAAb+Z,EAAKrqB,IAAoBm/B,EAAkB,EACvD,MAAO,CACH1mB,MAAOjF,EAAUxT,EAAMC,EACvByY,IAAKlF,EAAUvT,EAAMD,EAE7B,CAgCA,SAASo/B,GAAwB1gB,EAAO2gB,GACpC,MAAMhwB,EAAO,GACPiwB,EAAW5gB,EAAM6gB,uBAAuBF,GAC9C,IAAIr9B,EAAG4R,EACP,IAAI5R,EAAI,EAAG4R,EAAO0rB,EAASnxB,OAAQnM,EAAI4R,IAAQ5R,EAC3CqN,EAAKuG,KAAK0pB,EAASt9B,GAAGgS,OAE1B,OAAO3E,CACX,CACA,SAASmwB,GAAWC,EAAOptB,EAAOqtB,EAASjrB,EAAU,CAAC,GAClD,MAAMpF,EAAOowB,EAAMpwB,KACbswB,EAA8B,WAAjBlrB,EAAQ4M,KAC3B,IAAIrf,EAAG4R,EAAMG,EAAc6rB,EAC3B,GAAc,OAAVvtB,EAAJ,CAGA,IAAIrQ,EAAI,EAAG4R,EAAOvE,EAAKlB,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAEzC,GADA+R,GAAgB1E,EAAKrN,GACjB+R,IAAiB2rB,EAAS,CAC1B,GAAIjrB,EAAQsqB,IACR,SAEJ,KACJ,CACAa,EAAaH,EAAMnhB,OAAOvK,GACtBpB,EAAeitB,KAAgBD,GAAwB,IAAVttB,GAAe4E,GAAK5E,KAAW4E,GAAK2oB,MACjFvtB,GAASutB,EAEjB,CACA,OAAOvtB,CAdP,CAeJ,CAcA,SAASwtB,GAAU/d,EAAOge,GACtB,MAAMC,EAAUje,GAASA,EAAMrN,QAAQsrB,QACvC,OAAOA,QAAuBzvB,IAAZyvB,QAAwCzvB,IAAfwvB,EAAKL,KACpD,CAWA,SAASO,GAAiBC,EAAQC,EAAUC,GACxC,MAAMC,EAAWH,EAAOC,KAAcD,EAAOC,GAAY,CAAC,GAC1D,OAAOE,EAASD,KAAgBC,EAASD,GAAc,CAAC,EAC5D,CACA,SAASE,GAAoBZ,EAAOa,EAAQC,EAAUtxB,GAClD,IAAK,MAAM6wB,KAAQQ,EAAOE,wBAAwBvxB,GAAMuE,UAAU,CAC9D,MAAMnB,EAAQotB,EAAMK,EAAK9rB,OACzB,GAAIusB,GAAYluB,EAAQ,IAAMkuB,GAAYluB,EAAQ,EAC9C,OAAOytB,EAAK9rB,KAEpB,CACA,OAAO,IACX,CACA,SAASysB,GAAaC,EAAYC,GAC9B,MAAM,MAAEjiB,EAAQkiB,YAAad,GAAUY,EACjCT,EAASvhB,EAAMmiB,UAAYniB,EAAMmiB,QAAU,CAAC,IAC5C,OAAEC,EAAO,OAAER,EAAStsB,MAAOD,GAAkB+rB,EAC7CiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACf1sB,EA7BV,SAAqB4sB,EAAYC,EAAYrB,GACzC,MAAO,GAAGoB,EAAW/uB,MAAMgvB,EAAWhvB,MAAM2tB,EAAKL,OAASK,EAAK7wB,MACnE,CA2BgBmyB,CAAYN,EAAQR,EAAQR,GAClClsB,EAAO+sB,EAAOxyB,OACpB,IAAIsxB,EACJ,IAAI,IAAIz9B,EAAI,EAAGA,EAAI4R,IAAQ5R,EAAE,CACzB,MAAMqU,EAAOsqB,EAAO3+B,IACZ,CAAC++B,GAAQ/sB,EAAQ,CAACitB,GAAQ5uB,GAAWgE,EAE7CopB,GADmBppB,EAAKwqB,UAAYxqB,EAAKwqB,QAAU,CAAC,IACjCI,GAASjB,GAAiBC,EAAQ3rB,EAAKN,GAC1DyrB,EAAM1rB,GAAgB1B,EACtBotB,EAAM4B,KAAOhB,GAAoBZ,EAAOa,GAAQ,EAAMR,EAAK7wB,MAC3DwwB,EAAM6B,QAAUjB,GAAoBZ,EAAOa,GAAQ,EAAOR,EAAK7wB,OAC1CwwB,EAAM8B,gBAAkB9B,EAAM8B,cAAgB,CAAC,IACvDxtB,GAAgB1B,CACjC,CACJ,CACA,SAASmvB,GAAgB9iB,EAAOsiB,GAC5B,MAAMjf,EAASrD,EAAMqD,OACrB,OAAOhU,OAAOsB,KAAK0S,GAAQgP,QAAQzc,GAAMyN,EAAOzN,GAAK0sB,OAASA,IAAMS,OACxE,CAuBA,SAASC,GAAY5B,EAAM7E,GACvB,MAAMlnB,EAAe+rB,EAAKY,WAAW1sB,MAC/BgtB,EAAOlB,EAAKQ,QAAUR,EAAKQ,OAAOU,KACxC,GAAKA,EAAL,CAGA/F,EAAQA,GAAS6E,EAAK6B,QACtB,IAAK,MAAMhB,KAAU1F,EAAM,CACvB,MAAMgF,EAASU,EAAOE,QACtB,IAAKZ,QAA2B3vB,IAAjB2vB,EAAOe,SAAsD1wB,IAA/B2vB,EAAOe,GAAMjtB,GACtD,cAEGksB,EAAOe,GAAMjtB,QACezD,IAA/B2vB,EAAOe,GAAMO,oBAA4EjxB,IAA7C2vB,EAAOe,GAAMO,cAAcxtB,WAChEksB,EAAOe,GAAMO,cAAcxtB,EAE1C,CAXA,CAYJ,CACA,MAAM6tB,GAAsBvgB,GAAgB,UAATA,GAA6B,SAATA,EACjDwgB,GAAmB,CAACC,EAAQC,IAASA,EAASD,EAAS/zB,OAAOC,OAAO,CAAC,EAAG8zB,GAK/E,MAAME,GACLC,gBAAkB,CAAC,EACnBA,0BAA4B,KAC5BA,uBAAyB,KACzBjzB,YAAY0P,EAAO3K,GACZ/D,KAAK0O,MAAQA,EACb1O,KAAKkV,KAAOxG,EAAMsC,IAClBhR,KAAKgE,MAAQD,EACb/D,KAAKkyB,gBAAkB,CAAC,EACxBlyB,KAAK4wB,YAAc5wB,KAAKmyB,UACxBnyB,KAAKoyB,MAAQpyB,KAAK4wB,YAAY3xB,KAC9Be,KAAKyE,aAAUnE,EACdN,KAAKqyB,UAAW,EACjBryB,KAAKsyB,WAAQhyB,EACbN,KAAKuyB,iBAAcjyB,EACnBN,KAAKwyB,oBAAiBlyB,EACtBN,KAAKyyB,gBAAanyB,EAClBN,KAAK0yB,gBAAapyB,EAClBN,KAAK2yB,qBAAsB,EAC3B3yB,KAAK4yB,oBAAqB,EAC1B5yB,KAAK6yB,cAAWvyB,EAChBN,KAAK8yB,UAAY,GACjB9yB,KAAK+yB,8BAAgCA,mBACrC/yB,KAAKgzB,2BAA6BA,gBAClChzB,KAAKizB,YACT,CACAA,aACI,MAAMnD,EAAO9vB,KAAK4wB,YAClB5wB,KAAKmuB,YACLnuB,KAAKkzB,aACLpD,EAAKqD,SAAWtD,GAAUC,EAAKQ,OAAQR,GACvC9vB,KAAKozB,cACDpzB,KAAKyE,QAAQsU,OAAS/Y,KAAK0O,MAAM2kB,gBAAgB,WACjDjW,QAAQC,KAAK,qKAErB,CACAiW,YAAYvvB,GACJ/D,KAAKgE,QAAUD,GACf2tB,GAAY1xB,KAAK4wB,aAErB5wB,KAAKgE,MAAQD,CACjB,CACAmvB,aACI,MAAMxkB,EAAQ1O,KAAK0O,MACbohB,EAAO9vB,KAAK4wB,YACZ2C,EAAUvzB,KAAKwzB,aACfC,EAAW,CAACzC,EAAMr+B,EAAG0S,EAAGnT,IAAa,MAAT8+B,EAAer+B,EAAa,MAATq+B,EAAe9+B,EAAImT,EAClEquB,EAAM5D,EAAK6D,QAAU3wB,EAAeuwB,EAAQI,QAASnC,GAAgB9iB,EAAO,MAC5EklB,EAAM9D,EAAK+D,QAAU7wB,EAAeuwB,EAAQM,QAASrC,GAAgB9iB,EAAO,MAC5EolB,EAAMhE,EAAKiE,QAAU/wB,EAAeuwB,EAAQQ,QAASvC,GAAgB9iB,EAAO,MAC5EyC,EAAY2e,EAAK3e,UACjB6iB,EAAMlE,EAAKmE,QAAUR,EAAStiB,EAAWuiB,EAAKE,EAAKE,GACnDI,EAAMpE,EAAKqE,QAAUV,EAAStiB,EAAWyiB,EAAKF,EAAKI,GACzDhE,EAAKsE,OAASp0B,KAAKq0B,cAAcX,GACjC5D,EAAKwE,OAASt0B,KAAKq0B,cAAcT,GACjC9D,EAAKyE,OAASv0B,KAAKq0B,cAAcP,GACjChE,EAAKgB,OAAS9wB,KAAKq0B,cAAcL,GACjClE,EAAKQ,OAAStwB,KAAKq0B,cAAcH,EACrC,CACAV,aACI,OAAOxzB,KAAK0O,MAAM+H,KAAKtG,SAASnQ,KAAKgE,MACzC,CACAmuB,UACI,OAAOnyB,KAAK0O,MAAM8lB,eAAex0B,KAAKgE,MAC1C,CACHqwB,cAAcI,GACP,OAAOz0B,KAAK0O,MAAMqD,OAAO0iB,EAC7B,CACHC,eAAe5iB,GACR,MAAMge,EAAO9vB,KAAK4wB,YAClB,OAAO9e,IAAUge,EAAKgB,OAAShB,EAAKQ,OAASR,EAAKgB,MACtD,CACA6D,QACI30B,KAAK4qB,QAAQ,QACjB,CACHgK,WACO,MAAM9E,EAAO9vB,KAAK4wB,YACd5wB,KAAKsyB,OACLzoB,GAAoB7J,KAAKsyB,MAAOtyB,MAEhC8vB,EAAKqD,UACLzB,GAAY5B,EAEpB,CACH+E,aACO,MAAMtB,EAAUvzB,KAAKwzB,aACf/c,EAAO8c,EAAQ9c,OAAS8c,EAAQ9c,KAAO,IACvC6b,EAAQtyB,KAAKsyB,MACnB,GAAI5vB,EAAS+T,GACTzW,KAAKsyB,MAxMjB,SAAkC7b,GAC9B,MAAMpX,EAAOtB,OAAOsB,KAAKoX,GACnBqe,EAAQ,IAAIxiC,MAAM+M,EAAKlB,QAC7B,IAAInM,EAAG4R,EAAMU,EACb,IAAItS,EAAI,EAAG4R,EAAOvE,EAAKlB,OAAQnM,EAAI4R,IAAQ5R,EACvCsS,EAAMjF,EAAKrN,GACX8iC,EAAM9iC,GAAK,CACPW,EAAG2R,EACHe,EAAGoR,EAAKnS,IAGhB,OAAOwwB,CACX,CA4LyBC,CAAyBte,QACnC,GAAI6b,IAAU7b,EAAM,CACvB,GAAI6b,EAAO,CACPzoB,GAAoByoB,EAAOtyB,MAC3B,MAAM8vB,EAAO9vB,KAAK4wB,YAClBc,GAAY5B,GACZA,EAAK6B,QAAU,EACnB,CACIlb,GAAQ1Y,OAAOi3B,aAAave,KACJzW,MDvKb8J,ECuKO2M,GDtKpBxM,SACNH,EAAMG,SAASC,UAAUtE,KCqKO5F,ODlKpCjC,OAAOk3B,eAAenrB,EAAO,WAAY,CACrCqX,cAAc,EACdtO,YAAY,EACZxQ,MAAO,CACH6H,UAAW,CC8JiBlK,SDzJpC4J,GAAYQ,SAAS9F,IACjB,MAAMwpB,EAAS,UAAY/nB,GAAYzB,GACjC4wB,EAAOprB,EAAMxF,GACnBvG,OAAOk3B,eAAenrB,EAAOxF,EAAK,CAC9B6c,cAAc,EACdtO,YAAY,EACZxQ,SAAUc,GACN,MAAMwqB,EAAMuH,EAAK7xB,MAAMrD,KAAMmD,GAM7B,OALA2G,EAAMG,SAASC,UAAUE,SAAS+qB,IACA,mBAAnBA,EAAOrH,IACdqH,EAAOrH,MAAW3qB,EACtB,IAEGwqB,CACX,GACF,MC4IE3tB,KAAK8yB,UAAY,GACjB9yB,KAAKsyB,MAAQ7b,CACjB,CD3KR,IAA2B3M,CC4KvB,CACAspB,cACI,MAAMtD,EAAO9vB,KAAK4wB,YAClB5wB,KAAK60B,aACD70B,KAAK+yB,qBACLjD,EAAKyD,QAAU,IAAIvzB,KAAK+yB,mBAEhC,CACAqC,sBAAsBC,GAClB,MAAMvF,EAAO9vB,KAAK4wB,YACZ2C,EAAUvzB,KAAKwzB,aACrB,IAAI8B,GAAe,EACnBt1B,KAAK60B,aACL,MAAMU,EAAazF,EAAKqD,SACxBrD,EAAKqD,SAAWtD,GAAUC,EAAKQ,OAAQR,GACnCA,EAAKL,QAAU8D,EAAQ9D,QACvB6F,GAAe,EACf5D,GAAY5B,GACZA,EAAKL,MAAQ8D,EAAQ9D,OAEzBzvB,KAAKw1B,gBAAgBH,IACjBC,GAAgBC,IAAezF,EAAKqD,WACpC1C,GAAazwB,KAAM8vB,EAAK6B,QAEhC,CACHxD,YACO,MAAMH,EAAShuB,KAAK0O,MAAMsf,OACpByH,EAAYzH,EAAO0H,iBAAiB11B,KAAKoyB,OACzCtU,EAASkQ,EAAO2H,gBAAgB31B,KAAKwzB,aAAciC,GAAW,GACpEz1B,KAAKyE,QAAUupB,EAAO4H,eAAe9X,EAAQ9d,KAAKqX,cAClDrX,KAAKqyB,SAAWryB,KAAKyE,QAAQkN,QAC7B3R,KAAKkyB,gBAAkB,CAAC,CAC5B,CACH2D,MAAMptB,EAAOqgB,GACN,MAAQ8H,YAAad,EAAOwC,MAAO7b,GAAUzW,MACvC,OAAE8wB,EAAO,SAAEqC,GAAcrD,EACzBiB,EAAQD,EAAOE,KACrB,IAEIh/B,EAAG+5B,EAAK4E,EAFRmF,EAAmB,IAAVrtB,GAAeqgB,IAAUrS,EAAKtY,QAAgB2xB,EAAKiG,QAC5DvR,EAAO/b,EAAQ,GAAKqnB,EAAK6B,QAAQlpB,EAAQ,GAE7C,IAAsB,IAAlBzI,KAAKqyB,SACLvC,EAAK6B,QAAUlb,EACfqZ,EAAKiG,SAAU,EACfpF,EAASla,MACN,CAECka,EADAp+B,EAAQkkB,EAAKhO,IACJzI,KAAKg2B,eAAelG,EAAMrZ,EAAMhO,EAAOqgB,GACzCpmB,EAAS+T,EAAKhO,IACZzI,KAAKi2B,gBAAgBnG,EAAMrZ,EAAMhO,EAAOqgB,GAExC9oB,KAAKk2B,mBAAmBpG,EAAMrZ,EAAMhO,EAAOqgB,GAExD,MAAMqN,EAA6B,IAAmB,OAAfpK,EAAIgF,IAAmBvM,GAAQuH,EAAIgF,GAASvM,EAAKuM,GACxF,IAAI/+B,EAAI,EAAGA,EAAI82B,IAAS92B,EACpB89B,EAAK6B,QAAQ3/B,EAAIyW,GAASsjB,EAAM4E,EAAO3+B,GACnC8jC,IACIK,MACAL,GAAS,GAEbtR,EAAOuH,GAGf+D,EAAKiG,QAAUD,CACnB,CACI3C,GACA1C,GAAazwB,KAAM2wB,EAE3B,CACHuF,mBAAmBpG,EAAMrZ,EAAMhO,EAAOqgB,GAC/B,MAAM,OAAEgI,EAAO,OAAER,GAAYR,EACvBiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACfoF,EAAStF,EAAOuF,YAChBC,EAAcxF,IAAWR,EACzBK,EAAS,IAAIr+B,MAAMw2B,GACzB,IAAI92B,EAAG4R,EAAMI,EACb,IAAIhS,EAAI,EAAG4R,EAAOklB,EAAO92B,EAAI4R,IAAQ5R,EACjCgS,EAAQhS,EAAIyW,EACZkoB,EAAO3+B,GAAK,CACR,CAAC++B,GAAQuF,GAAexF,EAAO+E,MAAMO,EAAOpyB,GAAQA,GACpD,CAACitB,GAAQX,EAAOuF,MAAMpf,EAAKzS,GAAQA,IAG3C,OAAO2sB,CACX,CACHqF,eAAelG,EAAMrZ,EAAMhO,EAAOqgB,GAC3B,MAAM,OAAEsL,EAAO,OAAEE,GAAYxE,EACvBa,EAAS,IAAIr+B,MAAMw2B,GACzB,IAAI92B,EAAG4R,EAAMI,EAAOqC,EACpB,IAAIrU,EAAI,EAAG4R,EAAOklB,EAAO92B,EAAI4R,IAAQ5R,EACjCgS,EAAQhS,EAAIyW,EACZpC,EAAOoQ,EAAKzS,GACZ2sB,EAAO3+B,GAAK,CACRW,EAAGyhC,EAAOyB,MAAMxvB,EAAK,GAAIrC,GACzBqB,EAAGivB,EAAOuB,MAAMxvB,EAAK,GAAIrC,IAGjC,OAAO2sB,CACX,CACHsF,gBAAgBnG,EAAMrZ,EAAMhO,EAAOqgB,GAC5B,MAAM,OAAEsL,EAAO,OAAEE,GAAYxE,GACvB,SAAEyG,EAAU,IAAI,SAAEC,EAAU,KAASx2B,KAAKqyB,SAC1C1B,EAAS,IAAIr+B,MAAMw2B,GACzB,IAAI92B,EAAG4R,EAAMI,EAAOqC,EACpB,IAAIrU,EAAI,EAAG4R,EAAOklB,EAAO92B,EAAI4R,IAAQ5R,EACjCgS,EAAQhS,EAAIyW,EACZpC,EAAOoQ,EAAKzS,GACZ2sB,EAAO3+B,GAAK,CACRW,EAAGyhC,EAAOyB,MAAMvwB,GAAiBe,EAAMkwB,GAAWvyB,GAClDqB,EAAGivB,EAAOuB,MAAMvwB,GAAiBe,EAAMmwB,GAAWxyB,IAG1D,OAAO2sB,CACX,CACH8F,UAAUzyB,GACH,OAAOhE,KAAK4wB,YAAYe,QAAQ3tB,EACpC,CACH0yB,eAAe1yB,GACR,OAAOhE,KAAK4wB,YAAYna,KAAKzS,EACjC,CACHwrB,WAAW1d,EAAO6e,EAAQtf,GACnB,MAAM3C,EAAQ1O,KAAK0O,MACbohB,EAAO9vB,KAAK4wB,YACZvuB,EAAQsuB,EAAO7e,EAAMkf,MAK3B,OAAOxB,GAJO,CACVnwB,KAAM+vB,GAAwB1gB,GAAO,GACrCJ,OAAQqiB,EAAOE,QAAQ/e,EAAMkf,MAAMO,eAEdlvB,EAAOytB,EAAK9rB,MAAO,CACxCqN,QAER,CACHslB,sBAAsBrvB,EAAOwK,EAAO6e,EAAQlB,GACrC,MAAMmH,EAAcjG,EAAO7e,EAAMkf,MACjC,IAAI3uB,EAAwB,OAAhBu0B,EAAuBC,IAAMD,EACzC,MAAMtoB,EAASmhB,GAASkB,EAAOE,QAAQ/e,EAAMkf,MACzCvB,GAASnhB,IACTmhB,EAAMnhB,OAASA,EACfjM,EAAQmtB,GAAWC,EAAOmH,EAAa52B,KAAK4wB,YAAY5sB,QAE5DsD,EAAMrX,IAAMF,KAAKE,IAAIqX,EAAMrX,IAAKoS,GAChCiF,EAAMtX,IAAMD,KAAKC,IAAIsX,EAAMtX,IAAKqS,EACpC,CACHy0B,UAAUhlB,EAAOilB,GACV,MAAMjH,EAAO9vB,KAAK4wB,YACZe,EAAU7B,EAAK6B,QACfmE,EAAShG,EAAKiG,SAAWjkB,IAAUge,EAAKgB,OACxCltB,EAAO+tB,EAAQxzB,OACf64B,EAAah3B,KAAK00B,eAAe5iB,GACjC2d,EAhQM,EAACsH,EAAUjH,EAAMphB,IAAQqoB,IAAajH,EAAKmH,QAAUnH,EAAKqD,UAAY,CAClF9zB,KAAM+vB,GAAwB1gB,GAAO,GACrCJ,OAAQ,MA8PM4oB,CAAYH,EAAUjH,EAAM9vB,KAAK0O,OACzCpH,EAAQ,CACVrX,IAAK2S,OAAO+D,kBACZ3W,IAAK4S,OAAOu0B,oBAERlnC,IAAKmnC,EAAWpnC,IAAKqnC,GA5VrC,SAAuBvlB,GACnB,MAAM,IAAE7hB,EAAI,IAAED,EAAI,WAAEsnC,EAAW,WAAEC,GAAgBzlB,EAAM0lB,gBACvD,MAAO,CACHvnC,IAAKqnC,EAAarnC,EAAM2S,OAAOu0B,kBAC/BnnC,IAAKunC,EAAavnC,EAAM4S,OAAO+D,kBAEvC,CAsVmD6wB,CAAcR,GACzD,IAAIhlC,EAAG2+B,EACP,SAAS8G,IACL9G,EAASgB,EAAQ3/B,GACjB,MAAM49B,EAAae,EAAOqG,EAAWhG,MACrC,OAAQruB,EAAeguB,EAAO7e,EAAMkf,QAAUoG,EAAWxH,GAAcyH,EAAWzH,CACtF,CACA,IAAI59B,EAAI,EAAGA,EAAI4R,IACP6zB,MAGJz3B,KAAK22B,sBAAsBrvB,EAAOwK,EAAO6e,EAAQlB,IAC7CqG,MALe9jC,GASvB,GAAI8jC,EACA,IAAI9jC,EAAI4R,EAAO,EAAG5R,GAAK,IAAKA,EACxB,IAAIylC,IAAJ,CAGAz3B,KAAK22B,sBAAsBrvB,EAAOwK,EAAO6e,EAAQlB,GACjD,KAFA,CAKR,OAAOnoB,CACX,CACAowB,mBAAmB5lB,GACf,MAAM6e,EAAS3wB,KAAK4wB,YAAYe,QAC1BrjB,EAAS,GACf,IAAItc,EAAG4R,EAAMvB,EACb,IAAIrQ,EAAI,EAAG4R,EAAO+sB,EAAOxyB,OAAQnM,EAAI4R,IAAQ5R,EACzCqQ,EAAQsuB,EAAO3+B,GAAG8f,EAAMkf,MACpBruB,EAAeN,IACfiM,EAAO1I,KAAKvD,GAGpB,OAAOiM,CACX,CACHqpB,iBACO,OAAO,CACX,CACHC,iBAAiB5zB,GACV,MAAM8rB,EAAO9vB,KAAK4wB,YACZE,EAAShB,EAAKgB,OACdR,EAASR,EAAKQ,OACdK,EAAS3wB,KAAKy2B,UAAUzyB,GAC9B,MAAO,CACH6zB,MAAO/G,EAAS,GAAKA,EAAOgH,iBAAiBnH,EAAOG,EAAOE,OAAS,GACpE3uB,MAAOiuB,EAAS,GAAKA,EAAOwH,iBAAiBnH,EAAOL,EAAOU,OAAS,GAE5E,CACHpG,QAAQvZ,GACD,MAAMye,EAAO9vB,KAAK4wB,YAClB5wB,KAAKstB,OAAOjc,GAAQ,WACpBye,EAAKiI,MAxdb,SAAgB11B,GACZ,IAAIjB,EAAGlP,EAAGpB,EAAGjB,EASb,OARI6S,EAASL,IACTjB,EAAIiB,EAAM6R,IACVhiB,EAAImQ,EAAM8R,MACVrjB,EAAIuR,EAAM+R,OACVvkB,EAAIwS,EAAMgS,MAEVjT,EAAIlP,EAAIpB,EAAIjB,EAAIwS,EAEb,CACH6R,IAAK9S,EACL+S,MAAOjiB,EACPkiB,OAAQtjB,EACRujB,KAAMxkB,EACNmoC,UAAoB,IAAV31B,EAElB,CAucqB41B,CAAOj1B,EAAehD,KAAKyE,QAAQiQ,KArexD,SAAqB0f,EAAQE,EAAQnF,GACjC,IAAwB,IAApBA,EACA,OAAO,EAEX,MAAMx8B,EAAIu8B,GAAUkF,EAAQjF,GACtB9pB,EAAI6pB,GAAUoF,EAAQnF,GAC5B,MAAO,CACHjb,IAAK7O,EAAEqD,IACPyL,MAAOxhB,EAAE+V,IACT0L,OAAQ/O,EAAEoD,MACV4L,KAAM1hB,EAAE8V,MAEhB,CAyd8DyvB,CAAYpI,EAAKsE,OAAQtE,EAAKwE,OAAQt0B,KAAK23B,mBACrG,CACHrK,OAAOjc,GAAO,CACX6Z,OACI,MAAMla,EAAMhR,KAAKkV,KACXxG,EAAQ1O,KAAK0O,MACbohB,EAAO9vB,KAAK4wB,YACZpgB,EAAWsf,EAAKrZ,MAAQ,GACxB4C,EAAO3K,EAAMypB,UACbzkB,EAAS,GACTjL,EAAQzI,KAAKyyB,YAAc,EAC3B3J,EAAQ9oB,KAAK0yB,YAAcliB,EAASrS,OAASsK,EAC7CwJ,EAA0BjS,KAAKyE,QAAQwN,wBAC7C,IAAIjgB,EAIJ,IAHI89B,EAAKyD,SACLzD,EAAKyD,QAAQrI,KAAKla,EAAKqI,EAAM5Q,EAAOqgB,GAEpC92B,EAAIyW,EAAOzW,EAAIyW,EAAQqgB,IAAS92B,EAAE,CAClC,MAAMyzB,EAAUjV,EAASxe,GACrByzB,EAAQwR,SAGRxR,EAAQ/R,QAAUzB,EAClByB,EAAO9N,KAAK6f,GAEZA,EAAQyF,KAAKla,EAAKqI,GAE1B,CACA,IAAIrnB,EAAI,EAAGA,EAAI0hB,EAAOvV,SAAUnM,EAC5B0hB,EAAO1hB,GAAGk5B,KAAKla,EAAKqI,EAE5B,CACH8O,SAASnkB,EAAO0P,GACT,MAAMrC,EAAOqC,EAAS,SAAW,UACjC,YAAiBpT,IAAV0D,GAAuBhE,KAAK4wB,YAAY2C,QAAUvzB,KAAKo4B,6BAA6B/mB,GAAQrR,KAAKq4B,0BAA0Br0B,GAAS,EAAGqN,EAClJ,CACHgG,WAAWrT,EAAO0P,EAAQrC,GACnB,MAAMkiB,EAAUvzB,KAAKwzB,aACrB,IAAInjB,EACJ,GAAIrM,GAAS,GAAKA,EAAQhE,KAAK4wB,YAAYna,KAAKtY,OAAQ,CACpD,MAAMsnB,EAAUzlB,KAAK4wB,YAAYna,KAAKzS,GACtCqM,EAAUoV,EAAQoN,WAAapN,EAAQoN,SArYnD,SAA2BpR,EAAQzd,EAAOyhB,GACtC,OAAO9H,GAAc8D,EAAQ,CACzB/N,QAAQ,EACR4kB,UAAWt0B,EACX2sB,YAAQrwB,EACRi4B,SAAKj4B,EACLmlB,UACAzhB,QACAqN,KAAM,UACNpS,KAAM,QAEd,CA0X8Du5B,CAAkBx4B,KAAKqX,aAAcrT,EAAOyhB,IAC9FpV,EAAQsgB,OAAS3wB,KAAKy2B,UAAUzyB,GAChCqM,EAAQkoB,IAAMhF,EAAQ9c,KAAKzS,GAC3BqM,EAAQrM,MAAQqM,EAAQioB,UAAYt0B,CACxC,MACIqM,EAAUrQ,KAAK6yB,WAAa7yB,KAAK6yB,SApZ7C,SAA8BpR,EAAQzd,GAClC,OAAO2Z,GAAc8D,EAAQ,CACzB/N,QAAQ,EACR6f,aAASjzB,EACTyD,aAAcC,EACdA,QACAqN,KAAM,UACNpS,KAAM,WAEd,CA2YwDw5B,CAAqBz4B,KAAK0O,MAAM2I,aAAcrX,KAAKgE,QAC/FqM,EAAQkjB,QAAUA,EAClBljB,EAAQrM,MAAQqM,EAAQtM,aAAe/D,KAAKgE,MAIhD,OAFAqM,EAAQqD,SAAWA,EACnBrD,EAAQgB,KAAOA,EACRhB,CACX,CACH+nB,6BAA6B/mB,GACtB,OAAOrR,KAAK04B,uBAAuB14B,KAAK+yB,mBAAmB5wB,GAAIkP,EACnE,CACHgnB,0BAA0Br0B,EAAOqN,GAC1B,OAAOrR,KAAK04B,uBAAuB14B,KAAKgzB,gBAAgB7wB,GAAIkP,EAAMrN,EACtE,CACH00B,uBAAuBC,EAAatnB,EAAO,UAAWrN,GAC/C,MAAM0P,EAAkB,WAATrC,EACT+M,EAAQpe,KAAKkyB,gBACbvkB,EAAWgrB,EAAc,IAAMtnB,EAC/BygB,EAAS1T,EAAMzQ,GACfirB,EAAU54B,KAAK2yB,qBAAuB1sB,GAAQjC,GACpD,GAAI8tB,EACA,OAAOD,GAAiBC,EAAQ8G,GAEpC,MAAM5K,EAAShuB,KAAK0O,MAAMsf,OACpByH,EAAYzH,EAAO6K,wBAAwB74B,KAAKoyB,MAAOuG,GACvD5a,EAAWrK,EAAS,CACtB,GAAGilB,SACH,QACAA,EACA,IACA,CACAA,EACA,IAEE7a,EAASkQ,EAAO2H,gBAAgB31B,KAAKwzB,aAAciC,GACnDp4B,EAAQU,OAAOsB,KAAK2T,GAASxC,SAASmoB,IAEtCrqB,EAAS0f,EAAO8K,oBAAoBhb,EAAQzgB,GADlC,IAAI2C,KAAKqX,WAAWrT,EAAO0P,EAAQrC,IACe0M,GAKlE,OAJIzP,EAAOogB,UACPpgB,EAAOogB,QAAUkK,EACjBxa,EAAMzQ,GAAY5P,OAAOg7B,OAAOlH,GAAiBvjB,EAAQsqB,KAEtDtqB,CACX,CACH0qB,mBAAmBh1B,EAAOi1B,EAAYvlB,GAC/B,MAAMhF,EAAQ1O,KAAK0O,MACb0P,EAAQpe,KAAKkyB,gBACbvkB,EAAW,aAAasrB,IACxBnH,EAAS1T,EAAMzQ,GACrB,GAAImkB,EACA,OAAOA,EAEX,IAAIrtB,EACJ,IAAgC,IAA5BiK,EAAMjK,QAAQuL,UAAqB,CACnC,MAAMge,EAAShuB,KAAK0O,MAAMsf,OACpByH,EAAYzH,EAAOkL,0BAA0Bl5B,KAAKoyB,MAAO6G,GACzDnb,EAASkQ,EAAO2H,gBAAgB31B,KAAKwzB,aAAciC,GACzDhxB,EAAUupB,EAAO4H,eAAe9X,EAAQ9d,KAAKqX,WAAWrT,EAAO0P,EAAQulB,GAC3E,CACA,MAAMplB,EAAa,IAAIka,GAAWrf,EAAOjK,GAAWA,EAAQoP,YAI5D,OAHIpP,GAAWA,EAAQ8Z,aACnBH,EAAMzQ,GAAY5P,OAAOg7B,OAAOllB,IAE7BA,CACX,CACHslB,iBAAiB10B,GACV,GAAKA,EAAQiqB,QAGb,OAAO1uB,KAAKwyB,iBAAmBxyB,KAAKwyB,eAAiBz0B,OAAOC,OAAO,CAAC,EAAGyG,GAC3E,CACH20B,eAAe/nB,EAAMgoB,GACd,OAAQA,GAAiBzH,GAAmBvgB,IAASrR,KAAK0O,MAAM4qB,mBACpE,CACHC,kBAAkB9wB,EAAO4I,GAClB,MAAMmoB,EAAYx5B,KAAKq4B,0BAA0B5vB,EAAO4I,GAClDooB,EAA0Bz5B,KAAKwyB,eAC/B6G,EAAgBr5B,KAAKm5B,iBAAiBK,GACtCJ,EAAiBp5B,KAAKo5B,eAAe/nB,EAAMgoB,IAAkBA,IAAkBI,EAErF,OADAz5B,KAAK05B,oBAAoBL,EAAehoB,EAAMmoB,GACvC,CACHH,gBACAD,iBAER,CACHO,cAAclU,EAASzhB,EAAOyP,EAAYpC,GAC/BugB,GAAmBvgB,GACnBtT,OAAOC,OAAOynB,EAAShS,GAEvBzT,KAAKg5B,mBAAmBh1B,EAAOqN,GAAMic,OAAO7H,EAAShS,EAE7D,CACHimB,oBAAoBL,EAAehoB,EAAMod,GAC9B4K,IAAkBzH,GAAmBvgB,IACrCrR,KAAKg5B,wBAAmB14B,EAAW+Q,GAAMic,OAAO+L,EAAe5K,EAEvE,CACHmL,UAAUnU,EAASzhB,EAAOqN,EAAMqC,GACzB+R,EAAQ/R,OAASA,EACjB,MAAMjP,EAAUzE,KAAKmoB,SAASnkB,EAAO0P,GACrC1T,KAAKg5B,mBAAmBh1B,EAAOqN,EAAMqC,GAAQ4Z,OAAO7H,EAAS,CACzDhhB,SAAUiP,GAAU1T,KAAKm5B,iBAAiB10B,IAAYA,GAE9D,CACAo1B,iBAAiBpU,EAAS1hB,EAAcC,GACpChE,KAAK45B,UAAUnU,EAASzhB,EAAO,UAAU,EAC7C,CACA81B,cAAcrU,EAAS1hB,EAAcC,GACjChE,KAAK45B,UAAUnU,EAASzhB,EAAO,UAAU,EAC7C,CACH+1B,2BACO,MAAMtU,EAAUzlB,KAAK4wB,YAAY2C,QAC7B9N,GACAzlB,KAAK45B,UAAUnU,OAASnlB,EAAW,UAAU,EAErD,CACH05B,wBACO,MAAMvU,EAAUzlB,KAAK4wB,YAAY2C,QAC7B9N,GACAzlB,KAAK45B,UAAUnU,OAASnlB,EAAW,UAAU,EAErD,CACHk1B,gBAAgBH,GACT,MAAM5e,EAAOzW,KAAKsyB,MACZ9hB,EAAWxQ,KAAK4wB,YAAYna,KAClC,IAAK,MAAOqX,EAAQmM,EAAMC,KAASl6B,KAAK8yB,UACpC9yB,KAAK8tB,GAAQmM,EAAMC,GAEvBl6B,KAAK8yB,UAAY,GACjB,MAAMqH,EAAU3pB,EAASrS,OACnBi8B,EAAU3jB,EAAKtY,OACf2qB,EAAQ/4B,KAAKE,IAAImqC,EAASD,GAC5BrR,GACA9oB,KAAK61B,MAAM,EAAG/M,GAEdsR,EAAUD,EACVn6B,KAAKq6B,gBAAgBF,EAASC,EAAUD,EAAS9E,GAC1C+E,EAAUD,GACjBn6B,KAAKs6B,gBAAgBF,EAASD,EAAUC,EAEhD,CACHC,gBAAgB5xB,EAAOqgB,EAAOuM,GAAmB,GAC1C,MAAMvF,EAAO9vB,KAAK4wB,YACZna,EAAOqZ,EAAKrZ,KACZ/N,EAAMD,EAAQqgB,EACpB,IAAI92B,EACJ,MAAMuoC,EAAQzZ,IAEV,IADAA,EAAI3iB,QAAU2qB,EACV92B,EAAI8uB,EAAI3iB,OAAS,EAAGnM,GAAK0W,EAAK1W,IAC9B8uB,EAAI9uB,GAAK8uB,EAAI9uB,EAAI82B,EACrB,EAGJ,IADAyR,EAAK9jB,GACDzkB,EAAIyW,EAAOzW,EAAI0W,IAAO1W,EACtBykB,EAAKzkB,GAAK,IAAIgO,KAAKgzB,gBAEnBhzB,KAAKqyB,UACLkI,EAAKzK,EAAK6B,SAEd3xB,KAAK61B,MAAMptB,EAAOqgB,GACduM,GACAr1B,KAAKw6B,eAAe/jB,EAAMhO,EAAOqgB,EAAO,QAEhD,CACA0R,eAAe/U,EAAShd,EAAOqgB,EAAOzX,GAAO,CAChDipB,gBAAgB7xB,EAAOqgB,GAChB,MAAMgH,EAAO9vB,KAAK4wB,YAClB,GAAI5wB,KAAKqyB,SAAU,CACf,MAAMoI,EAAU3K,EAAK6B,QAAQxnB,OAAO1B,EAAOqgB,GACvCgH,EAAKqD,UACLzB,GAAY5B,EAAM2K,EAE1B,CACA3K,EAAKrZ,KAAKtM,OAAO1B,EAAOqgB,EAC5B,CACH4R,MAAMv3B,GACC,GAAInD,KAAKqyB,SACLryB,KAAK8yB,UAAUltB,KAAKzC,OACjB,CACH,MAAO2qB,EAAQmM,EAAMC,GAAQ/2B,EAC7BnD,KAAK8tB,GAAQmM,EAAMC,EACvB,CACAl6B,KAAK0O,MAAMisB,aAAa/0B,KAAK,CACzB5F,KAAKgE,SACFb,GAEX,CACAy3B,cACI,MAAM9R,EAAQ+R,UAAU18B,OACxB6B,KAAK06B,MAAM,CACP,kBACA16B,KAAKwzB,aAAa/c,KAAKtY,OAAS2qB,EAChCA,GAER,CACAgS,aACI96B,KAAK06B,MAAM,CACP,kBACA16B,KAAK4wB,YAAYna,KAAKtY,OAAS,EAC/B,GAER,CACA48B,eACI/6B,KAAK06B,MAAM,CACP,kBACA,EACA,GAER,CACAM,cAAcvyB,EAAOqgB,GACbA,GACA9oB,KAAK06B,MAAM,CACP,kBACAjyB,EACAqgB,IAGR,MAAMmS,EAAWJ,UAAU18B,OAAS,EAChC88B,GACAj7B,KAAK06B,MAAM,CACP,kBACAjyB,EACAwyB,GAGZ,CACAC,iBACIl7B,KAAK06B,MAAM,CACP,kBACA,EACAG,UAAU18B,QAElB,EAcH,SAASg9B,GAAqBrL,GAC3B,MAAMhe,EAAQge,EAAKgB,OACbxiB,EAbV,SAA2BwD,EAAO7S,GAC9B,IAAK6S,EAAMspB,OAAOC,KAAM,CACpB,MAAMC,EAAexpB,EAAM0e,wBAAwBvxB,GACnD,IAAIqP,EAAS,GACb,IAAI,IAAItc,EAAI,EAAG4R,EAAO03B,EAAan9B,OAAQnM,EAAI4R,EAAM5R,IACjDsc,EAASA,EAAOitB,OAAOD,EAAatpC,GAAG0+B,WAAWgH,mBAAmB5lB,IAEzEA,EAAMspB,OAAOC,KDzmBjB,SAAsBpQ,GACtB,MAAM/c,EAAM,IAAIiS,IAAI8K,GACpB,OAAI/c,EAAI9H,OAAS6kB,EAAM9sB,OACZ8sB,EAEJ34B,MAAMmL,KAAKyQ,EACtB,CCmmB4BstB,CAAaltB,EAAOmtB,MAAK,CAAC5qC,EAAGC,IAAID,EAAIC,IAC7D,CACA,OAAOghB,EAAMspB,OAAOC,IACxB,CAGmBK,CAAkB5pB,EAAOge,EAAK7wB,MAC7C,IACIjN,EAAG4R,EAAM+3B,EAAMnX,EADfv0B,EAAM6hB,EAAM8pB,QAEhB,MAAMC,EAAmB,KACR,QAATF,IAA4B,QAAVA,IAGlB11B,GAAQue,KACRv0B,EAAMF,KAAKE,IAAIA,EAAKF,KAAKqX,IAAIu0B,EAAOnX,IAASv0B,IAEjDu0B,EAAOmX,EAAI,EAEf,IAAI3pC,EAAI,EAAG4R,EAAO0K,EAAOnQ,OAAQnM,EAAI4R,IAAQ5R,EACzC2pC,EAAO7pB,EAAMgqB,iBAAiBxtB,EAAOtc,IACrC6pC,IAGJ,IADArX,OAAOlkB,EACHtO,EAAI,EAAG4R,EAAOkO,EAAMrD,MAAMtQ,OAAQnM,EAAI4R,IAAQ5R,EAC9C2pC,EAAO7pB,EAAMiqB,gBAAgB/pC,GAC7B6pC,IAEJ,OAAO5rC,CACX,CA0DA,SAAS+rC,GAAWC,EAAO51B,EAAMiqB,EAAQt+B,GAMrC,OALIO,EAAQ0pC,GAtBhB,SAAuBA,EAAO51B,EAAMiqB,EAAQt+B,GACxC,MAAMkqC,EAAa5L,EAAOuF,MAAMoG,EAAM,GAAIjqC,GACpCmqC,EAAW7L,EAAOuF,MAAMoG,EAAM,GAAIjqC,GAClC/B,EAAMF,KAAKE,IAAIisC,EAAYC,GAC3BnsC,EAAMD,KAAKC,IAAIksC,EAAYC,GACjC,IAAIC,EAAWnsC,EACXosC,EAASrsC,EACTD,KAAKqX,IAAInX,GAAOF,KAAKqX,IAAIpX,KACzBosC,EAAWpsC,EACXqsC,EAASpsC,GAEboW,EAAKiqB,EAAOU,MAAQqL,EACpBh2B,EAAKi2B,QAAU,CACXF,WACAC,SACA5zB,MAAOyzB,EACPxzB,IAAKyzB,EACLlsC,MACAD,MAER,CAGQusC,CAAcN,EAAO51B,EAAMiqB,EAAQt+B,GAEnCqU,EAAKiqB,EAAOU,MAAQV,EAAOuF,MAAMoG,EAAOjqC,GAErCqU,CACX,CACA,SAASm2B,GAAsB1M,EAAMrZ,EAAMhO,EAAOqgB,GAC9C,MAAMgI,EAAShB,EAAKgB,OACdR,EAASR,EAAKQ,OACd8F,EAAStF,EAAOuF,YAChBC,EAAcxF,IAAWR,EACzBK,EAAS,GACf,IAAI3+B,EAAG4R,EAAMyC,EAAM41B,EACnB,IAAIjqC,EAAIyW,EAAO7E,EAAO6E,EAAQqgB,EAAO92B,EAAI4R,IAAQ5R,EAC7CiqC,EAAQxlB,EAAKzkB,GACbqU,EAAO,CAAC,EACRA,EAAKyqB,EAAOE,MAAQsF,GAAexF,EAAO+E,MAAMO,EAAOpkC,GAAIA,GAC3D2+B,EAAO/qB,KAAKo2B,GAAWC,EAAO51B,EAAMiqB,EAAQt+B,IAEhD,OAAO2+B,CACX,CACA,SAAS8L,GAAWC,GAChB,OAAOA,QAA8Bp8B,IAApBo8B,EAAON,eAA4C97B,IAAlBo8B,EAAOL,MAC7D,CAiCA,SAASM,GAAiBlpB,EAAYhP,EAASgrB,EAAOzrB,GAClD,IAAI44B,EAAOn4B,EAAQo4B,cACnB,MAAMlP,EAAM,CAAC,EACb,IAAKiP,EAED,YADAnpB,EAAWopB,cAAgBlP,GAG/B,IAAa,IAATiP,EAOA,YANAnpB,EAAWopB,cAAgB,CACvB3oB,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,IAId,MAAM,MAAE5L,EAAM,IAAEC,EAAI,QAAElF,EAAQ,IAAE0Q,EAAI,OAAEE,GA1C1C,SAAqBX,GACjB,IAAIjQ,EAASiF,EAAOC,EAAKwL,EAAKE,EAiB9B,OAhBIX,EAAWqpB,YACXt5B,EAAUiQ,EAAWyhB,KAAOzhB,EAAW9gB,EACvC8V,EAAQ,OACRC,EAAM,UAENlF,EAAUiQ,EAAWyhB,KAAOzhB,EAAWpO,EACvCoD,EAAQ,SACRC,EAAM,OAENlF,GACA0Q,EAAM,MACNE,EAAS,UAETF,EAAM,QACNE,EAAS,OAEN,CACH3L,QACAC,MACAlF,UACA0Q,MACAE,SAER,CAiBsD2oB,CAAYtpB,GACjD,WAATmpB,GAAqBnN,IACrBhc,EAAWupB,oBAAqB,GAC3BvN,EAAM4B,MAAQ,KAAOrtB,EACtB44B,EAAO1oB,GACCub,EAAM6B,SAAW,KAAOttB,EAChC44B,EAAOxoB,GAEPuZ,EAAIsP,GAAU7oB,EAAQ3L,EAAOC,EAAKlF,KAAY,EAC9Co5B,EAAO1oB,IAGfyZ,EAAIsP,GAAUL,EAAMn0B,EAAOC,EAAKlF,KAAY,EAC5CiQ,EAAWopB,cAAgBlP,CAC/B,CACA,SAASsP,GAAUL,EAAM/rC,EAAGC,EAAG0S,GAS/B,IAAc05B,EAAMp5B,EAAIq5B,EAFpB,OANI35B,GAQgB25B,EAPKrsC,EACrB8rC,EAAOQ,GADPR,GAOMM,EAPMN,MAOA94B,EAPMjT,GAQDssC,EAAKD,IAASC,EAAKr5B,EAAKo5B,EAPnBpsC,EAAGD,IAEzB+rC,EAAOQ,GAASR,EAAM/rC,EAAGC,GAEtB8rC,CACX,CAIA,SAASQ,GAASztC,EAAG8Y,EAAOC,GACxB,MAAa,UAAN/Y,EAAgB8Y,EAAc,QAAN9Y,EAAc+Y,EAAM/Y,CACvD,CACA,SAAS0tC,GAAiB5pB,GAAY,cAAE6pB,GAAkB3/B,GACtD8V,EAAW6pB,cAAkC,SAAlBA,EAAqC,IAAV3/B,EAAc,IAAO,EAAI2/B,CACnF,CA6uCA,SAASC,GAAaC,EAASxM,EAAM3uB,EAAOiP,GACxC,MAAM,WAAEof,EAAW,KAAEja,EAAK,QAAEsf,GAAayH,EACnC1M,EAASJ,EAAWE,YAAYE,OACtC,GAAIA,GAAUE,IAASF,EAAOE,MAAiB,MAATA,GAAgB+E,GAAWtf,EAAKtY,OAAQ,CAC1E,MAAMs/B,EAAe3M,EAAO4M,eAAiB/zB,GAAgBH,GAC7D,IAAK8H,EACD,OAAOmsB,EAAahnB,EAAMua,EAAM3uB,GAC7B,GAAIquB,EAAW8B,eAAgB,CAClC,MAAMvK,EAAKxR,EAAK,GACVnP,EAA+B,mBAAhB2gB,EAAG0V,UAA2B1V,EAAG0V,SAAS3M,GAC/D,GAAI1pB,EAAO,CACP,MAAMmB,EAAQg1B,EAAahnB,EAAMua,EAAM3uB,EAAQiF,GACzCoB,EAAM+0B,EAAahnB,EAAMua,EAAM3uB,EAAQiF,GAC7C,MAAO,CACHiC,GAAId,EAAMc,GACVD,GAAIZ,EAAIY,GAEhB,CACJ,CACJ,CACA,MAAO,CACHC,GAAI,EACJD,GAAImN,EAAKtY,OAAS,EAE1B,CACC,SAASy/B,GAAyBlvB,EAAOsiB,EAAM6M,EAAUC,EAASxsB,GAC/D,MAAMge,EAAW5gB,EAAMqvB,+BACjB17B,EAAQw7B,EAAS7M,GACvB,IAAI,IAAIh/B,EAAI,EAAG4R,EAAO0rB,EAASnxB,OAAQnM,EAAI4R,IAAQ5R,EAAE,CACjD,MAAM,MAAEgS,EAAM,KAAEyS,GAAU6Y,EAASt9B,IAC7B,GAAEuX,EAAG,GAAED,GAAQi0B,GAAajO,EAASt9B,GAAIg/B,EAAM3uB,EAAOiP,GAC5D,IAAI,IAAI/R,EAAIgK,EAAIhK,GAAK+J,IAAM/J,EAAE,CACzB,MAAMkmB,EAAUhP,EAAKlX,GAChBkmB,EAAQrD,MACT0b,EAAQrY,EAASzhB,EAAOzE,EAEhC,CACJ,CACJ,CAUC,SAASy+B,GAAkBtvB,EAAOmvB,EAAU7M,EAAMiN,EAAkB1sB,GACjE,MAAM0Z,EAAQ,GACd,OAAK1Z,GAAqB7C,EAAMwvB,cAAcL,IAe9CD,GAAyBlvB,EAAOsiB,EAAM6M,GAZf,SAASpY,EAAS1hB,EAAcC,IAC9CuN,GAAqB4H,GAAesM,EAAS/W,EAAMypB,UAAW,KAG/D1S,EAAQ0Y,QAAQN,EAASlrC,EAAGkrC,EAASx4B,EAAG44B,IACxChT,EAAMrlB,KAAK,CACP6f,UACA1hB,eACAC,SAGZ,IACgE,GACzDinB,GAfIA,CAgBf,CA0DC,SAASmT,GAAgB1vB,EAAOmvB,EAAU7M,EAAM1f,EAAW2sB,EAAkB1sB,GAC1E,OAAKA,GAAqB7C,EAAMwvB,cAAcL,GAG9B,MAAT7M,GAAiB1f,EAvC3B,SAAkC5C,EAAOmvB,EAAU7M,EAAM1f,EAAW2sB,EAAkB1sB,GACnF,IAAI0Z,EAAQ,GACZ,MAAMoT,EArDT,SAAkCrN,GAC/B,MAAMsN,GAA8B,IAAvBtN,EAAKzsB,QAAQ,KACpBg6B,GAA8B,IAAvBvN,EAAKzsB,QAAQ,KAC1B,OAAO,SAAS2D,EAAKC,GACjB,MAAMq2B,EAASF,EAAOvuC,KAAKqX,IAAIc,EAAIvV,EAAIwV,EAAIxV,GAAK,EAC1C8rC,EAASF,EAAOxuC,KAAKqX,IAAIc,EAAI7C,EAAI8C,EAAI9C,GAAK,EAChD,OAAOtV,KAAKqY,KAAKrY,KAAKyN,IAAIghC,EAAQ,GAAKzuC,KAAKyN,IAAIihC,EAAQ,GAC5D,CACJ,CA6C2BC,CAAyB1N,GAChD,IAAI2N,EAAc/7B,OAAO+D,kBA8BzB,OADAi3B,GAAyBlvB,EAAOsiB,EAAM6M,GA5BtC,SAAwBpY,EAAS1hB,EAAcC,GAC3C,MAAMm6B,EAAU1Y,EAAQ0Y,QAAQN,EAASlrC,EAAGkrC,EAASx4B,EAAG44B,GACxD,GAAI3sB,IAAc6sB,EACd,OAEJ,MAAMS,EAASnZ,EAAQoZ,eAAeZ,GAEtC,IADsB1sB,IAAoB7C,EAAMwvB,cAAcU,KACzCT,EACjB,OAEJ,MAAMW,EAAWT,EAAeR,EAAUe,GACtCE,EAAWH,GACX1T,EAAQ,CACJ,CACIxF,UACA1hB,eACAC,UAGR26B,EAAcG,GACPA,IAAaH,GACpB1T,EAAMrlB,KAAK,CACP6f,UACA1hB,eACAC,SAGZ,IAEOinB,CACX,CAKyG8T,CAAyBrwB,EAAOmvB,EAAU7M,EAAM1f,EAAW2sB,EAAkB1sB,GA7DrL,SAA+B7C,EAAOmvB,EAAU7M,EAAMiN,GACnD,IAAIhT,EAAQ,GAmBZ,OADA2S,GAAyBlvB,EAAOsiB,EAAM6M,GAjBtC,SAAwBpY,EAAS1hB,EAAcC,GAC3C,MAAM,WAAEg7B,EAAW,SAAEC,GAAcxZ,EAAQyZ,SAAS,CAChD,aACA,YACDjB,IACG,MAAEz1B,GDlxEhB,SAA2B22B,EAAaC,GACpC,MAAMC,EAAsBD,EAAWzsC,EAAIwsC,EAAYxsC,EACjD2sC,EAAsBF,EAAW/5B,EAAI85B,EAAY95B,EACjDk6B,EAA2BxvC,KAAKqY,KAAKi3B,EAAsBA,EAAsBC,EAAsBA,GAC7G,IAAI92B,EAAQzY,KAAKyvC,MAAMF,EAAqBD,GAI5C,OAHI72B,GAAS,GAAMjC,KACfiC,GAAShC,IAEN,CACHgC,QACAs2B,SAAUS,EAElB,CCswE2BE,CAAkBha,EAAS,CAC1C9yB,EAAGkrC,EAASlrC,EACZ0S,EAAGw4B,EAASx4B,IAEZkD,GAAcC,EAAOw2B,EAAYC,IACjChU,EAAMrlB,KAAK,CACP6f,UACA1hB,eACAC,SAGZ,IAEOinB,CACX,CAwCwCyU,CAAsBhxB,EAAOmvB,EAAU7M,EAAMiN,GAFtE,EAGf,CACC,SAAS0B,GAAajxB,EAAOmvB,EAAU7M,EAAM1f,EAAW2sB,GACrD,MAAMhT,EAAQ,GACR2U,EAAuB,MAAT5O,EAAe,WAAa,WAChD,IAAI6O,GAAiB,EAWrB,OAVAjC,GAAyBlvB,EAAOsiB,EAAM6M,GAAU,CAACpY,EAAS1hB,EAAcC,KAChEyhB,EAAQma,GAAa/B,EAAS7M,GAAOiN,KACrChT,EAAMrlB,KAAK,CACP6f,UACA1hB,eACAC,UAEJ67B,EAAiBA,GAAkBpa,EAAQ0Y,QAAQN,EAASlrC,EAAGkrC,EAASx4B,EAAG44B,GAC/E,IAEA3sB,IAAcuuB,EACP,GAEJ5U,CACX,CACC,IAAI6U,GAAc,CACflC,4BACAmC,MAAO,CACV/7B,MAAO0K,EAAOzd,EAAGwT,EAASw5B,GACf,MAAMJ,EAAWzX,GAAoBn1B,EAAGyd,GAClCsiB,EAAOvsB,EAAQusB,MAAQ,IACvBzf,EAAmB9M,EAAQ8M,mBAAoB,EAC/C0Z,EAAQxmB,EAAQ6M,UAAY0sB,GAAkBtvB,EAAOmvB,EAAU7M,EAAMiN,EAAkB1sB,GAAoB6sB,GAAgB1vB,EAAOmvB,EAAU7M,GAAM,EAAOiN,EAAkB1sB,GAC3Kf,EAAW,GACjB,OAAKya,EAAM9sB,QAGXuQ,EAAMqvB,+BAA+B3zB,SAAS0lB,IAC1C,MAAM9rB,EAAQinB,EAAM,GAAGjnB,MACjByhB,EAAUqK,EAAKrZ,KAAKzS,GACtByhB,IAAYA,EAAQrD,MACpB5R,EAAS5K,KAAK,CACV6f,UACA1hB,aAAc+rB,EAAK9rB,MACnBA,SAER,IAEGwM,GAbI,EAcf,EACP+iB,QAAS7kB,EAAOzd,EAAGwT,EAASw5B,GACjB,MAAMJ,EAAWzX,GAAoBn1B,EAAGyd,GAClCsiB,EAAOvsB,EAAQusB,MAAQ,KACvBzf,EAAmB9M,EAAQ8M,mBAAoB,EACrD,IAAI0Z,EAAQxmB,EAAQ6M,UAAY0sB,GAAkBtvB,EAAOmvB,EAAU7M,EAAMiN,EAAkB1sB,GAAoB6sB,GAAgB1vB,EAAOmvB,EAAU7M,GAAM,EAAOiN,EAAkB1sB,GAC/K,GAAI0Z,EAAM9sB,OAAS,EAAG,CAClB,MAAM4F,EAAeknB,EAAM,GAAGlnB,aACxB0S,EAAO/H,EAAM8lB,eAAezwB,GAAc0S,KAChDwU,EAAQ,GACR,IAAI,IAAIj5B,EAAI,EAAGA,EAAIykB,EAAKtY,SAAUnM,EAC9Bi5B,EAAMrlB,KAAK,CACP6f,QAAShP,EAAKzkB,GACd+R,eACAC,MAAOhS,GAGnB,CACA,OAAOi5B,CACX,EACP7R,MAAM,CAAC1K,EAAOzd,EAAGwT,EAASw5B,IAIRD,GAAkBtvB,EAHR0X,GAAoBn1B,EAAGyd,GAC3BjK,EAAQusB,MAAQ,KAEmBiN,EADvBx5B,EAAQ8M,mBAAoB,GAGhEyuB,QAAStxB,EAAOzd,EAAGwT,EAASw5B,GACjB,MAAMJ,EAAWzX,GAAoBn1B,EAAGyd,GAClCsiB,EAAOvsB,EAAQusB,MAAQ,KACvBzf,EAAmB9M,EAAQ8M,mBAAoB,EACrD,OAAO6sB,GAAgB1vB,EAAOmvB,EAAU7M,EAAMvsB,EAAQ6M,UAAW2sB,EAAkB1sB,EACvF,EACP5e,EAAE,CAAC+b,EAAOzd,EAAGwT,EAASw5B,IAEJ0B,GAAajxB,EADH0X,GAAoBn1B,EAAGyd,GACH,IAAKjK,EAAQ6M,UAAW2sB,GAExE54B,EAAE,CAACqJ,EAAOzd,EAAGwT,EAASw5B,IAEJ0B,GAAajxB,EADH0X,GAAoBn1B,EAAGyd,GACH,IAAKjK,EAAQ6M,UAAW2sB,KAKzE,MAAMgC,GAAmB,CACrB,OACA,MACA,QACA,UAEJ,SAASC,GAAiBp2B,EAAO+zB,GAC7B,OAAO/zB,EAAMiX,QAAQpxB,GAAIA,EAAEs2B,MAAQ4X,GACvC,CACA,SAASsC,GAA4Br2B,EAAOknB,GACxC,OAAOlnB,EAAMiX,QAAQpxB,IAAyC,IAArCswC,GAAiB17B,QAAQ5U,EAAEs2B,MAAet2B,EAAE+2B,IAAIsK,OAASA,GACtF,CACA,SAASoP,GAAat2B,EAAOtG,GACzB,OAAOsG,EAAM2xB,MAAK,CAAC5qC,EAAGC,KAClB,MAAM+S,EAAKL,EAAU1S,EAAID,EACnBiT,EAAKN,EAAU3S,EAAIC,EACzB,OAAO+S,EAAGhD,SAAWiD,EAAGjD,OAASgD,EAAGG,MAAQF,EAAGE,MAAQH,EAAGhD,OAASiD,EAAGjD,MAAM,GAEpF,CA0EA,SAASw/B,GAAeC,EAAYnI,EAAWtnC,EAAGC,GAC9C,OAAOf,KAAKC,IAAIswC,EAAWzvC,GAAIsnC,EAAUtnC,IAAMd,KAAKC,IAAIswC,EAAWxvC,GAAIqnC,EAAUrnC,GACrF,CACA,SAASyvC,GAAiBD,EAAYE,GAClCF,EAAWpsB,IAAMnkB,KAAKC,IAAIswC,EAAWpsB,IAAKssB,EAAWtsB,KACrDosB,EAAWjsB,KAAOtkB,KAAKC,IAAIswC,EAAWjsB,KAAMmsB,EAAWnsB,MACvDisB,EAAWlsB,OAASrkB,KAAKC,IAAIswC,EAAWlsB,OAAQosB,EAAWpsB,QAC3DksB,EAAWnsB,MAAQpkB,KAAKC,IAAIswC,EAAWnsB,MAAOqsB,EAAWrsB,MAC7D,CACA,SAASssB,GAAWtI,EAAWuI,EAAQC,EAAQ1Q,GAC3C,MAAM,IAAEhK,EAAI,IAAES,GAASia,EACjBL,EAAanI,EAAUmI,WAC7B,IAAK59B,EAASujB,GAAM,CACZ0a,EAAOv6B,OACP+xB,EAAUlS,IAAQ0a,EAAOv6B,MAE7B,MAAMqpB,EAAQQ,EAAO0Q,EAAOlR,QAAU,CAClCrpB,KAAM,EACN0iB,MAAO,GAEX2G,EAAMrpB,KAAOrW,KAAKC,IAAIy/B,EAAMrpB,KAAMu6B,EAAO7D,WAAapW,EAAIjP,OAASiP,EAAInR,OACvEorB,EAAOv6B,KAAOqpB,EAAMrpB,KAAOqpB,EAAM3G,MACjCqP,EAAUlS,IAAQ0a,EAAOv6B,IAC7B,CACIsgB,EAAIka,YACJL,GAAiBD,EAAY5Z,EAAIka,cAErC,MAAMC,EAAW9wC,KAAKC,IAAI,EAAG0wC,EAAOI,WAAaT,GAAeC,EAAYnI,EAAW,OAAQ,UACzF4I,EAAYhxC,KAAKC,IAAI,EAAG0wC,EAAOM,YAAcX,GAAeC,EAAYnI,EAAW,MAAO,WAC1F8I,EAAeJ,IAAa1I,EAAUrmC,EACtCovC,EAAgBH,IAAc5I,EAAUroC,EAG9C,OAFAqoC,EAAUrmC,EAAI+uC,EACd1I,EAAUroC,EAAIixC,EACPJ,EAAO7D,WAAa,CACvBqE,KAAMF,EACNG,MAAOF,GACP,CACAC,KAAMD,EACNE,MAAOH,EAEf,CAaA,SAASI,GAAWvE,EAAY3E,GAC5B,MAAMmI,EAAanI,EAAUmI,WAa7B,OAZA,SAA4B1a,GACxB,MAAMtM,EAAS,CACXjF,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GAKZ,OAHAwR,EAAUxb,SAAS6b,IACf3M,EAAO2M,GAAOl2B,KAAKC,IAAImoC,EAAUlS,GAAMqa,EAAWra,GAAK,IAEpD3M,CACX,CACoBgoB,CAAbxE,EAAgC,CACnC,OACA,SACoB,CACpB,MACA,UAER,CACA,SAASyE,GAASC,EAAOrJ,EAAWuI,EAAQzQ,GACxC,MAAMwR,EAAa,GACnB,IAAIzvC,EAAG4R,EAAM+8B,EAAQja,EAAKgb,EAAOC,EACjC,IAAI3vC,EAAI,EAAG4R,EAAO49B,EAAMrjC,OAAQujC,EAAQ,EAAG1vC,EAAI4R,IAAQ5R,EAAE,CACrD2uC,EAASa,EAAMxvC,GACf00B,EAAMia,EAAOja,IACbA,EAAI4G,OAAOqT,EAAOprB,OAAS4iB,EAAUrmC,EAAG6uC,EAAOlpB,QAAU0gB,EAAUroC,EAAGuxC,GAAWV,EAAO7D,WAAY3E,IACpG,MAAM,KAAEgJ,EAAK,MAAEC,GAAWX,GAAWtI,EAAWuI,EAAQC,EAAQ1Q,GAChEyR,GAASP,GAAQM,EAAWtjC,OAC5BwjC,EAAUA,GAAWP,EAChB1a,EAAIkb,UACLH,EAAW77B,KAAK+6B,EAExB,CACA,OAAOe,GAASH,GAASE,EAAYtJ,EAAWuI,EAAQzQ,IAAW0R,CACvE,CACA,SAASE,GAAWnb,EAAKrS,EAAMH,EAAKqB,EAAOkC,GACvCiP,EAAIxS,IAAMA,EACVwS,EAAIrS,KAAOA,EACXqS,EAAIvS,MAAQE,EAAOkB,EACnBmR,EAAItS,OAASF,EAAMuD,EACnBiP,EAAInR,MAAQA,EACZmR,EAAIjP,OAASA,CACjB,CACA,SAASqqB,GAAWN,EAAOrJ,EAAWuI,EAAQzQ,GAC1C,MAAM8R,EAAcrB,EAAOzsB,QAC3B,IAAI,EAAEthB,EAAE,EAAE0S,GAAO8yB,EACjB,IAAK,MAAMwI,KAAUa,EAAM,CACvB,MAAM9a,EAAMia,EAAOja,IACb+I,EAAQQ,EAAO0Q,EAAOlR,QAAU,CAClC3G,MAAO,EACPkZ,OAAQ,EACRnhC,OAAQ,GAENA,EAAS8/B,EAAOsB,YAAcxS,EAAM5uB,QAAU,EACpD,GAAI8/B,EAAO7D,WAAY,CACnB,MAAMvnB,EAAQ4iB,EAAUrmC,EAAI+O,EACtB4W,EAASgY,EAAMrpB,MAAQsgB,EAAIjP,OAC7BxR,GAAQwpB,EAAMhnB,SACdpD,EAAIoqB,EAAMhnB,OAEVie,EAAIkb,SACJC,GAAWnb,EAAKqb,EAAY1tB,KAAMhP,EAAGq7B,EAAOI,WAAaiB,EAAY5tB,MAAQ4tB,EAAY1tB,KAAMoD,GAE/FoqB,GAAWnb,EAAKyR,EAAU9jB,KAAOob,EAAMuS,OAAQ38B,EAAGkQ,EAAOkC,GAE7DgY,EAAMhnB,MAAQpD,EACdoqB,EAAMuS,QAAUzsB,EAChBlQ,EAAIqhB,EAAItS,MACZ,KAAO,CACH,MAAMqD,EAAS0gB,EAAUroC,EAAI+Q,EACvB0U,EAAQka,EAAMrpB,MAAQsgB,EAAInR,MAC5BtP,GAAQwpB,EAAMhnB,SACd9V,EAAI88B,EAAMhnB,OAEVie,EAAIkb,SACJC,GAAWnb,EAAK/zB,EAAGovC,EAAY7tB,IAAKqB,EAAOmrB,EAAOM,YAAce,EAAY3tB,OAAS2tB,EAAY7tB,KAEjG2tB,GAAWnb,EAAK/zB,EAAGwlC,EAAUjkB,IAAMub,EAAMuS,OAAQzsB,EAAOkC,GAE5DgY,EAAMhnB,MAAQ9V,EACd88B,EAAMuS,QAAUvqB,EAChB9kB,EAAI+zB,EAAIvS,KACZ,CACJ,CACAgkB,EAAUxlC,EAAIA,EACdwlC,EAAU9yB,EAAIA,CAClB,CACA,IAAI68B,GAAU,CACbC,OAAQzzB,EAAOrI,GACHqI,EAAM8yB,QACP9yB,EAAM8yB,MAAQ,IAElBn7B,EAAKu7B,SAAWv7B,EAAKu7B,WAAY,EACjCv7B,EAAKw3B,SAAWx3B,EAAKw3B,UAAY,MACjCx3B,EAAKxF,OAASwF,EAAKxF,QAAU,EAC7BwF,EAAK+7B,QAAU/7B,EAAK+7B,SAAW,WAC3B,MAAO,CACH,CACIC,EAAG,EACHnX,KAAMiN,GACF9xB,EAAK6kB,KAAKiN,EACd,GAGZ,EACAzpB,EAAM8yB,MAAM57B,KAAKS,EACrB,EACHi8B,UAAW5zB,EAAO6zB,GACX,MAAMv+B,EAAQ0K,EAAM8yB,MAAQ9yB,EAAM8yB,MAAMj9B,QAAQg+B,IAAe,GAChD,IAAXv+B,GACA0K,EAAM8yB,MAAMr3B,OAAOnG,EAAO,EAElC,EACHmqB,UAAWzf,EAAOrI,EAAM5B,GACjB4B,EAAKu7B,SAAWn9B,EAAQm9B,SACxBv7B,EAAKw3B,SAAWp5B,EAAQo5B,SACxBx3B,EAAKxF,OAAS4D,EAAQ5D,MAC1B,EACHysB,OAAQ5e,EAAO6G,EAAOkC,EAAQ+qB,GACvB,IAAK9zB,EACD,OAEJ,MAAMuF,EAAUgJ,GAAUvO,EAAMjK,QAAQk8B,OAAO1sB,SACzCwuB,EAAiB1yC,KAAKC,IAAIulB,EAAQtB,EAAQsB,MAAO,GACjDmtB,EAAkB3yC,KAAKC,IAAIynB,EAASxD,EAAQwD,OAAQ,GACpD+pB,EAvMd,SAA0BA,GACtB,MAAMmB,EAxDV,SAAmBnB,GACf,MAAMmB,EAAc,GACpB,IAAI3wC,EAAG4R,EAAM8iB,EAAKT,EAAKwJ,EAAOwS,EAC9B,IAAIjwC,EAAI,EAAG4R,GAAQ49B,GAAS,IAAIrjC,OAAQnM,EAAI4R,IAAQ5R,EAChD00B,EAAM8a,EAAMxvC,KACT6rC,SAAU5X,EAAMxhB,SAAWgrB,QAAQwS,cAAa,IAAUvb,GAC7Dic,EAAY/8B,KAAK,CACb5B,MAAOhS,EACP00B,MACAT,MACA6W,WAAYpW,EAAIkc,eAChB/hC,OAAQ6lB,EAAI7lB,OACZ4uB,MAAOA,GAASxJ,EAAMwJ,EACtBwS,gBAGR,OAAOU,CACX,CAuCwBE,CAAUrB,GACxBI,EAAWxB,GAAauC,EAAY5hB,QAAQ+hB,GAAOA,EAAKpc,IAAIkb,YAAW,GACvEvtB,EAAO+rB,GAAaF,GAAiByC,EAAa,SAAS,GAC3DxuB,EAAQisB,GAAaF,GAAiByC,EAAa,UACnDzuB,EAAMksB,GAAaF,GAAiByC,EAAa,QAAQ,GACzDvuB,EAASgsB,GAAaF,GAAiByC,EAAa,WACpDI,EAAmB5C,GAA4BwC,EAAa,KAC5DK,EAAiB7C,GAA4BwC,EAAa,KAChE,MAAO,CACHf,WACAqB,WAAY5uB,EAAKknB,OAAOrnB,GACxBgvB,eAAgB/uB,EAAMonB,OAAOyH,GAAgBzH,OAAOnnB,GAAQmnB,OAAOwH,GACnE5K,UAAW+H,GAAiByC,EAAa,aACzCQ,SAAU9uB,EAAKknB,OAAOpnB,GAAOonB,OAAOyH,GACpClG,WAAY5oB,EAAIqnB,OAAOnnB,GAAQmnB,OAAOwH,GAE9C,CAsLsBK,CAAiB10B,EAAM8yB,OAC/B6B,EAAgB7B,EAAM2B,SACtBG,EAAkB9B,EAAM1E,WAC9Bx5B,EAAKoL,EAAM8yB,OAAQ9a,IACiB,mBAArBA,EAAI6c,cACX7c,EAAI6c,cACR,IAEJ,MAAMC,EAA0BH,EAAcxX,QAAO,CAAC4X,EAAOX,IAAOA,EAAKpc,IAAIjiB,UAAwC,IAA7Bq+B,EAAKpc,IAAIjiB,QAAQ6P,QAAoBmvB,EAAQA,EAAQ,GAAG,IAAM,EAChJ/C,EAAS3iC,OAAOg7B,OAAO,CACzB+H,WAAYvrB,EACZyrB,YAAavpB,EACbxD,UACAwuB,iBACAC,kBACAgB,aAAcjB,EAAiB,EAAIe,EACnCG,cAAejB,EAAkB,IAE/BpC,EAAaviC,OAAOC,OAAO,CAAC,EAAGiW,GACrCssB,GAAiBD,EAAYrjB,GAAUulB,IACvC,MAAMrK,EAAYp6B,OAAOC,OAAO,CAC5BsiC,aACAxuC,EAAG2wC,EACH3yC,EAAG4yC,EACH/vC,EAAGshB,EAAQI,KACXhP,EAAG4O,EAAQC,KACZD,GACGgc,EArPb,SAAuBiS,EAASxB,GAC7B,MAAMzQ,EAnBV,SAAqBiS,GACjB,MAAMjS,EAAS,CAAC,EAChB,IAAK,MAAM6S,KAAQZ,EAAQ,CACvB,MAAM,MAAEzS,EAAM,IAAExJ,EAAI,YAAEgc,GAAiBa,EACvC,IAAKrT,IAAUwQ,GAAiB3wB,SAAS2W,GACrC,SAEJ,MAAM/F,EAAS+P,EAAOR,KAAWQ,EAAOR,GAAS,CAC7C3G,MAAO,EACPkZ,OAAQ,EACRnhC,OAAQ,EACRuF,KAAM,IAEV8Z,EAAO4I,QACP5I,EAAOrf,QAAUohC,CACrB,CACA,OAAOhS,CACX,CAEmB2T,CAAY1B,IACrB,aAAEwB,EAAa,cAAEC,GAAmBjD,EAC1C,IAAI1uC,EAAG4R,EAAM+8B,EACb,IAAI3uC,EAAI,EAAG4R,EAAOs+B,EAAQ/jC,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC5C2uC,EAASuB,EAAQlwC,GACjB,MAAM,SAAE4vC,GAAcjB,EAAOja,IACvB+I,EAAQQ,EAAO0Q,EAAOlR,OACtBlD,EAASkD,GAASkR,EAAOsB,YAAcxS,EAAM5uB,OAC/C8/B,EAAO7D,YACP6D,EAAOprB,MAAQgX,EAASA,EAASmX,EAAe9B,GAAYlB,EAAO+B,eACnE9B,EAAOlpB,OAASksB,IAEhBhD,EAAOprB,MAAQmuB,EACf/C,EAAOlpB,OAAS8U,EAASA,EAASoX,EAAgB/B,GAAYlB,EAAOgC,gBAE7E,CACA,OAAOzS,CACX,CAmOuB4T,CAAcR,EAAc9H,OAAO+H,GAAkB5C,GACpEa,GAASC,EAAMI,SAAUzJ,EAAWuI,EAAQzQ,GAC5CsR,GAAS8B,EAAelL,EAAWuI,EAAQzQ,GACvCsR,GAAS+B,EAAiBnL,EAAWuI,EAAQzQ,IAC7CsR,GAAS8B,EAAelL,EAAWuI,EAAQzQ,GA3KvD,SAA0BkI,GACtB,MAAMmI,EAAanI,EAAUmI,WAC7B,SAASwD,EAAU7d,GACf,MAAM8d,EAASh0C,KAAKC,IAAIswC,EAAWra,GAAOkS,EAAUlS,GAAM,GAE1D,OADAkS,EAAUlS,IAAQ8d,EACXA,CACX,CACA5L,EAAU9yB,GAAKy+B,EAAU,OACzB3L,EAAUxlC,GAAKmxC,EAAU,QACzBA,EAAU,SACVA,EAAU,SACd,CAkKQE,CAAiB7L,GACjB2J,GAAWN,EAAMyB,WAAY9K,EAAWuI,EAAQzQ,GAChDkI,EAAUxlC,GAAKwlC,EAAUrmC,EACzBqmC,EAAU9yB,GAAK8yB,EAAUroC,EACzBgyC,GAAWN,EAAM0B,eAAgB/K,EAAWuI,EAAQzQ,GACpDvhB,EAAMypB,UAAY,CACd9jB,KAAM8jB,EAAU9jB,KAChBH,IAAKikB,EAAUjkB,IACfC,MAAOgkB,EAAU9jB,KAAO8jB,EAAUrmC,EAClCsiB,OAAQ+jB,EAAUjkB,IAAMikB,EAAUroC,EAClC2nB,OAAQ0gB,EAAUroC,EAClBylB,MAAO4iB,EAAUrmC,GAErBwR,EAAKk+B,EAAMrJ,WAAYwI,IACnB,MAAMja,EAAMia,EAAOja,IACnB3oB,OAAOC,OAAO0oB,EAAKhY,EAAMypB,WACzBzR,EAAI4G,OAAO6K,EAAUrmC,EAAGqmC,EAAUroC,EAAG,CACjCukB,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GACV,GAEV,GAGJ,MAAM6vB,GACLC,eAAe9sB,EAAQ+sB,GAAc,CACrCC,eAAe/zB,GACR,OAAO,CACX,CACHwX,iBAAiBnZ,EAAOzP,EAAM8K,GAAW,CACzC+d,oBAAoBpZ,EAAOzP,EAAM8K,GAAW,CAC5CwG,sBACO,OAAO,CACX,CACH8zB,eAAe5e,EAASlQ,EAAOkC,EAAQ0sB,GAGhC,OAFA5uB,EAAQxlB,KAAKC,IAAI,EAAGulB,GAASkQ,EAAQlQ,OACrCkC,EAASA,GAAUgO,EAAQhO,OACpB,CACHlC,QACAkC,OAAQ1nB,KAAKC,IAAI,EAAGm0C,EAAcp0C,KAAK0X,MAAM8N,EAAQ4uB,GAAe1sB,GAE5E,CACH6sB,WAAWltB,GACJ,OAAO,CACX,CACHmtB,aAAavW,GACV,EAGJ,MAAMwW,WAAsBP,GACxBC,eAAe79B,GACX,OAAOA,GAAQA,EAAKgR,YAAchR,EAAKgR,WAAW,OAAS,IAC/D,CACAktB,aAAavW,GACTA,EAAOvpB,QAAQuL,WAAY,CAC/B,EAGJ,MAAMy0B,GAAc,WACbC,GAAc,CACjBC,WAAY,YACZC,UAAW,YACXC,SAAU,UACVC,aAAc,aACdC,YAAa,YACbC,YAAa,YACbC,UAAW,UACXC,aAAc,WACdC,WAAY,YAEVC,GAAiB/iC,GAAkB,OAAVA,GAA4B,KAAVA,EAoC3CgjC,KAAuB3d,IAA+B,CACxDE,SAAS,GAKb,SAAS0d,GAAe52B,EAAOzP,EAAM8K,GACjC2E,EAAM0I,OAAO0Q,oBAAoB7oB,EAAM8K,EAAUs7B,GACrD,CAYA,SAASE,GAAiBC,EAAUpuB,GAChC,IAAK,MAAMzH,KAAQ61B,EACf,GAAI71B,IAASyH,GAAUzH,EAAK81B,SAASruB,GACjC,OAAO,CAGnB,CACA,SAASsuB,GAAqBh3B,EAAOzP,EAAM8K,GACvC,MAAMqN,EAAS1I,EAAM0I,OACfuuB,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAM7J,KAAS4J,EAChBC,EAAUA,GAAWP,GAAiBtJ,EAAM8J,WAAY3uB,GACxD0uB,EAAUA,IAAYP,GAAiBtJ,EAAM+J,aAAc5uB,GAE3D0uB,GACA/7B,GACJ,IAMJ,OAJA47B,EAASM,QAAQlhB,SAAU,CACvBmhB,WAAW,EACXC,SAAS,IAENR,CACX,CACA,SAASS,GAAqB13B,EAAOzP,EAAM8K,GACvC,MAAMqN,EAAS1I,EAAM0I,OACfuuB,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAM7J,KAAS4J,EAChBC,EAAUA,GAAWP,GAAiBtJ,EAAM+J,aAAc5uB,GAC1D0uB,EAAUA,IAAYP,GAAiBtJ,EAAM8J,WAAY3uB,GAEzD0uB,GACA/7B,GACJ,IAMJ,OAJA47B,EAASM,QAAQlhB,SAAU,CACvBmhB,WAAW,EACXC,SAAS,IAENR,CACX,CACA,MAAMU,GAAqB,IAAI94B,IAC/B,IAAI+4B,GAAsB,EAC1B,SAASC,KACL,MAAMC,EAAMl8B,OAAO8F,iBACfo2B,IAAQF,KAGZA,GAAsBE,EACtBH,GAAmBj8B,SAAQ,CAACuJ,EAAQjF,KAC5BA,EAAMuI,0BAA4BuvB,GAClC7yB,GACJ,IAER,CAaA,SAAS8yB,GAAqB/3B,EAAOzP,EAAM8K,GACvC,MAAMqN,EAAS1I,EAAM0I,OACfsvB,EAAYtvB,GAAU4N,GAAe5N,GAC3C,IAAKsvB,EACD,OAEJ,MAAM/yB,EAASnJ,IAAU,CAAC+K,EAAOkC,KAC7B,MAAM3lB,EAAI40C,EAAUC,YACpB58B,EAASwL,EAAOkC,GACZ3lB,EAAI40C,EAAUC,aACd58B,GACJ,GACDO,QACGq7B,EAAW,IAAIiB,gBAAgBf,IACjC,MAAM5J,EAAQ4J,EAAQ,GAChBtwB,EAAQ0mB,EAAM4K,YAAYtxB,MAC1BkC,EAASwkB,EAAM4K,YAAYpvB,OACnB,IAAVlC,GAA0B,IAAXkC,GAGnB9D,EAAO4B,EAAOkC,EAAO,IAIzB,OAFAkuB,EAASM,QAAQS,GAlCrB,SAAuCh4B,EAAOiF,GACrC0yB,GAAmBjgC,MACpBkE,OAAOud,iBAAiB,SAAU0e,IAEtCF,GAAmBn4B,IAAIQ,EAAOiF,EAClC,CA8BImzB,CAA8Bp4B,EAAOiF,GAC9BgyB,CACX,CACA,SAASoB,GAAgBr4B,EAAOzP,EAAM0mC,GAC9BA,GACAA,EAASqB,aAEA,WAAT/nC,GApCR,SAAyCyP,GACrC23B,GAAmB1lB,OAAOjS,GACrB23B,GAAmBjgC,MACpBkE,OAAOwd,oBAAoB,SAAUye,GAE7C,CAgCQU,CAAgCv4B,EAExC,CACA,SAASw4B,GAAqBx4B,EAAOzP,EAAM8K,GACvC,MAAMqN,EAAS1I,EAAM0I,OACf2H,EAAQvU,IAAW6b,IACH,OAAd3X,EAAMsC,KACNjH,EAtHZ,SAAyBsc,EAAO3X,GAC5B,MAAMzP,EAAOylC,GAAYre,EAAMpnB,OAASonB,EAAMpnB,MACxC,EAAEtM,EAAE,EAAE0S,GAAO+gB,GAAoBC,EAAO3X,GAC9C,MAAO,CACHzP,OACAyP,QACAy4B,OAAQ9gB,EACR1zB,OAAS2N,IAAN3N,EAAkBA,EAAI,KACzB0S,OAAS/E,IAAN+E,EAAkBA,EAAI,KAEjC,CA4GqB+hC,CAAgB/gB,EAAO3X,GACpC,GACDA,GAEH,OAhIJ,SAAqBiB,EAAM1Q,EAAM8K,GAC7B4F,EAAKkY,iBAAiB5oB,EAAM8K,EAAUs7B,GAC1C,CA6HIgC,CAAYjwB,EAAQnY,EAAM8f,GACnBA,CACX,CACC,MAAMuoB,WAAoBrD,GAC1BC,eAAe9sB,EAAQ+sB,GAChB,MAAM9zB,EAAU+G,GAAUA,EAAOC,YAAcD,EAAOC,WAAW,MACjE,OAAIhH,GAAWA,EAAQ+G,SAAWA,GA3KzC,SAAoBA,EAAQ+sB,GACzB,MAAMvzB,EAAQwG,EAAOxG,MACf22B,EAAenwB,EAAOowB,aAAa,UACnCC,EAAcrwB,EAAOowB,aAAa,SAcxC,GAbApwB,EAAOqtB,IAAe,CAClBha,QAAS,CACLhT,OAAQ8vB,EACRhyB,MAAOkyB,EACP72B,MAAO,CACH0D,QAAS1D,EAAM0D,QACfmD,OAAQ7G,EAAM6G,OACdlC,MAAO3E,EAAM2E,SAIzB3E,EAAM0D,QAAU1D,EAAM0D,SAAW,QACjC1D,EAAM2V,UAAY3V,EAAM2V,WAAa,aACjC6e,GAAcqC,GAAc,CAC5B,MAAMC,EAAe3f,GAAa3Q,EAAQ,cACrB9W,IAAjBonC,IACAtwB,EAAO7B,MAAQmyB,EAEvB,CACA,GAAItC,GAAcmC,GACd,GAA4B,KAAxBnwB,EAAOxG,MAAM6G,OACbL,EAAOK,OAASL,EAAO7B,OAAS4uB,GAAe,OAC5C,CACH,MAAMwD,EAAgB5f,GAAa3Q,EAAQ,eACrB9W,IAAlBqnC,IACAvwB,EAAOK,OAASkwB,EAExB,CAGR,CA0IYC,CAAWxwB,EAAQ+sB,GACZ9zB,GAEJ,IACX,CACH+zB,eAAe/zB,GACR,MAAM+G,EAAS/G,EAAQ+G,OACvB,IAAKA,EAAOqtB,IACR,OAAO,EAEX,MAAMha,EAAUrT,EAAOqtB,IAAaha,QACpC,CACI,SACA,SACFrgB,SAAS2S,IACP,MAAM1a,EAAQooB,EAAQ1N,GAClB3a,EAAcC,GACd+U,EAAOywB,gBAAgB9qB,GAEvB3F,EAAO0wB,aAAa/qB,EAAM1a,EAC9B,IAEJ,MAAMuO,EAAQ6Z,EAAQ7Z,OAAS,CAAC,EAMhC,OALA7S,OAAOsB,KAAKuR,GAAOxG,SAAS9F,IACxB8S,EAAOxG,MAAMtM,GAAOsM,EAAMtM,EAAI,IAElC8S,EAAO7B,MAAQ6B,EAAO7B,aACf6B,EAAOqtB,KACP,CACX,CACH5c,iBAAiBnZ,EAAOzP,EAAM8K,GACvB/J,KAAK8nB,oBAAoBpZ,EAAOzP,GAChC,MAAM8oC,EAAUr5B,EAAMs5B,WAAat5B,EAAMs5B,SAAW,CAAC,GAM/ClK,EALW,CACbmK,OAAQvC,GACRwC,OAAQ9B,GACRzyB,OAAQ8yB,IAEaxnC,IAASioC,GAClCa,EAAQ9oC,GAAQ6+B,EAAQpvB,EAAOzP,EAAM8K,EACzC,CACH+d,oBAAoBpZ,EAAOzP,GACpB,MAAM8oC,EAAUr5B,EAAMs5B,WAAat5B,EAAMs5B,SAAW,CAAC,GAC/CjpB,EAAQgpB,EAAQ9oC,GACjB8f,KAGY,CACbkpB,OAAQlB,GACRmB,OAAQnB,GACRpzB,OAAQozB,IAEa9nC,IAASqmC,IAC1B52B,EAAOzP,EAAM8f,GACrBgpB,EAAQ9oC,QAAQqB,EACpB,CACAiQ,sBACI,OAAOjG,OAAO8F,gBAClB,CACHi0B,eAAejtB,EAAQ7B,EAAOkC,EAAQ0sB,GAC/B,ODhqCR,SAAwB/sB,EAAQ+wB,EAASC,EAAUjE,GAC/C,MAAMvzB,EAAQ4U,GAAiBpO,GACzBixB,EAAUxiB,GAAmBjV,EAAO,UACpCkL,EAAWsJ,GAAcxU,EAAMkL,SAAU1E,EAAQ,gBAAkB1Q,GACnE4hC,EAAYljB,GAAcxU,EAAM03B,UAAWlxB,EAAQ,iBAAmB1Q,GACtE6hC,EAhCV,SAA0BnxB,EAAQ7B,EAAOkC,GACrC,IAAIqE,EAAUwsB,EACd,QAAchoC,IAAViV,QAAkCjV,IAAXmX,EAAsB,CAC7C,MAAMivB,EAAY1hB,GAAe5N,GACjC,GAAKsvB,EAGE,CACH,MAAM5tB,EAAO4tB,EAAU5f,wBACjB0hB,EAAiBhjB,GAAiBkhB,GAClC+B,EAAkB5iB,GAAmB2iB,EAAgB,SAAU,SAC/DE,EAAmB7iB,GAAmB2iB,EAAgB,WAC5DjzB,EAAQuD,EAAKvD,MAAQmzB,EAAiBnzB,MAAQkzB,EAAgBlzB,MAC9DkC,EAASqB,EAAKrB,OAASixB,EAAiBjxB,OAASgxB,EAAgBhxB,OACjEqE,EAAWsJ,GAAcojB,EAAe1sB,SAAU4qB,EAAW,eAC7D4B,EAAYljB,GAAcojB,EAAeF,UAAW5B,EAAW,eACnE,MAXInxB,EAAQ6B,EAAOuvB,YACflvB,EAASL,EAAOuxB,YAWxB,CACA,MAAO,CACHpzB,QACAkC,SACAqE,SAAUA,GAAYpV,GACtB4hC,UAAWA,GAAa5hC,GAEhC,CAQ0BkiC,CAAiBxxB,EAAQ+wB,EAASC,GACxD,IAAI,MAAE7yB,EAAM,OAAEkC,GAAY8wB,EAC1B,GAAwB,gBAApB33B,EAAM2V,UAA6B,CACnC,MAAME,EAAUZ,GAAmBjV,EAAO,SAAU,SAC9C4V,EAAWX,GAAmBjV,EAAO,WAC3C2E,GAASiR,EAASjR,MAAQkR,EAAQlR,MAClCkC,GAAU+O,EAAS/O,OAASgP,EAAQhP,MACxC,CAeA,OAdAlC,EAAQxlB,KAAKC,IAAI,EAAGulB,EAAQ8yB,EAAQ9yB,OACpCkC,EAAS1nB,KAAKC,IAAI,EAAGm0C,EAAc5uB,EAAQ4uB,EAAc1sB,EAAS4wB,EAAQ5wB,QAC1ElC,EAAQ2R,GAAOn3B,KAAKE,IAAIslB,EAAOuG,EAAUysB,EAAczsB,WACvDrE,EAASyP,GAAOn3B,KAAKE,IAAIwnB,EAAQ6wB,EAAWC,EAAcD,YACtD/yB,IAAUkC,IAGVA,EAASyP,GAAO3R,EAAQ,UAEOjV,IAAZ6nC,QAAsC7nC,IAAb8nC,IAC1BjE,GAAeoE,EAAc9wB,QAAUA,EAAS8wB,EAAc9wB,SAChFA,EAAS8wB,EAAc9wB,OACvBlC,EAAQ2R,GAAOn3B,KAAK0X,MAAMgQ,EAAS0sB,KAEhC,CACH5uB,QACAkC,SAER,CCioCe4sB,CAAejtB,EAAQ7B,EAAOkC,EAAQ0sB,EACjD,CACHG,WAAWltB,GACJ,MAAMsvB,EAAY1hB,GAAe5N,GACjC,SAAUsvB,IAAaA,EAAUmC,YACrC,EAUJ,MAAMC,GACF7W,gBAAkB,CAAC,EACnBA,0BAAuB3xB,EACvB3N,EACA0S,EACAqO,QAAS,EACTjP,QACAkqB,YACAoa,gBAAgB9K,GACZ,MAAM,EAAEtrC,EAAE,EAAE0S,GAAOrF,KAAKk/B,SAAS,CAC7B,IACA,KACDjB,GACH,MAAO,CACHtrC,IACA0S,IAER,CACA2jC,WACI,OAAOrhC,GAAS3H,KAAKrN,IAAMgV,GAAS3H,KAAKqF,EAC7C,CACA65B,SAAStiB,EAAOqsB,GACZ,MAAM5e,EAAQrqB,KAAK2uB,YACnB,IAAKsa,IAAU5e,EAEX,OAAOrqB,KAEX,MAAMd,EAAM,CAAC,EAIb,OAHA0d,EAAMxS,SAAS2S,IACX7d,EAAI6d,GAAQsN,EAAMtN,IAASsN,EAAMtN,GAAMrJ,SAAW2W,EAAMtN,GAAMqQ,IAAMptB,KAAK+c,EAAK,IAE3E7d,CACX,EA2EH,SAASkjB,GAAK3T,EAAOy6B,EAAUC,EAASC,EAAYC,GACjD,MAAM5gC,EAAQzF,EAAeomC,EAAY,GACnC1gC,EAAM3Y,KAAKE,IAAI+S,EAAeqmC,EAAU56B,EAAMtQ,QAASsQ,EAAMtQ,QACnE,IACIA,EAAQnM,EAAG0wB,EADXoG,EAAQ,EAQZ,IANAqgB,EAAUp5C,KAAKu5C,KAAKH,GAChBE,IACAlrC,EAASkrC,EAAWD,EACpBD,EAAUhrC,EAASpO,KAAK0X,MAAMtJ,EAASgrC,IAE3CzmB,EAAOja,EACDia,EAAO,GACToG,IACApG,EAAO3yB,KAAKL,MAAM+Y,EAAQqgB,EAAQqgB,GAEtC,IAAIn3C,EAAIjC,KAAKC,IAAIyY,EAAO,GAAIzW,EAAI0W,EAAK1W,IAC7BA,IAAM0wB,IACNwmB,EAAStjC,KAAK6I,EAAMzc,IACpB82B,IACApG,EAAO3yB,KAAKL,MAAM+Y,EAAQqgB,EAAQqgB,GAG9C,CAeA,MACMI,GAAiB,CAACz3B,EAAO8qB,EAAMroB,IAAkB,QAATqoB,GAA2B,SAATA,EAAkB9qB,EAAM8qB,GAAQroB,EAASzC,EAAM8qB,GAAQroB,EACjHi1B,GAAgB,CAACC,EAAaC,IAAgB35C,KAAKE,IAAIy5C,GAAiBD,EAAaA,GAC1F,SAASE,GAAO7oB,EAAK8oB,GAClB,MAAM5jB,EAAS,GACT6jB,EAAY/oB,EAAI3iB,OAASyrC,EACzBzqC,EAAM2hB,EAAI3iB,OAChB,IAAInM,EAAI,EACR,KAAMA,EAAImN,EAAKnN,GAAK63C,EAChB7jB,EAAOpgB,KAAKkb,EAAI/wB,KAAK0X,MAAMzV,KAE/B,OAAOg0B,CACX,CACC,SAAS8jB,GAAoBh4B,EAAO9N,EAAO+lC,GACxC,MAAM5rC,EAAS2T,EAAMrD,MAAMtQ,OACrB6rC,EAAaj6C,KAAKE,IAAI+T,EAAO7F,EAAS,GACtCsK,EAAQqJ,EAAMm4B,YACdvhC,EAAMoJ,EAAMo4B,UACZ/iC,EAAU,KAChB,IACIoN,EADA41B,EAAYr4B,EAAMiqB,gBAAgBiO,GAEtC,KAAID,IAEIx1B,EADW,IAAXpW,EACSpO,KAAKC,IAAIm6C,EAAY1hC,EAAOC,EAAMyhC,GAC1B,IAAVnmC,GACG8N,EAAMiqB,gBAAgB,GAAKoO,GAAa,GAExCA,EAAYr4B,EAAMiqB,gBAAgBiO,EAAa,IAAM,EAEnEG,GAAaH,EAAahmC,EAAQuQ,GAAUA,EACxC41B,EAAY1hC,EAAQtB,GAAWgjC,EAAYzhC,EAAMvB,IAIzD,OAAOgjC,CACX,CAcC,SAASC,GAAkB3lC,GACxB,OAAOA,EAAQsQ,UAAYtQ,EAAQuQ,WAAa,CACpD,CACC,SAASq1B,GAAe5lC,EAAS0Y,GAC9B,IAAK1Y,EAAQ6P,QACT,OAAO,EAEX,MAAM5D,EAAOwM,GAAOzY,EAAQiM,KAAMyM,GAC5BlJ,EAAUgJ,GAAUxY,EAAQwP,SAElC,OADc1hB,EAAQkS,EAAQgR,MAAQhR,EAAQgR,KAAKtX,OAAS,GAC7CuS,EAAKG,WAAaoD,EAAQwD,MAC7C,CAcA,SAAS6yB,GAAW1/B,EAAOizB,EAAUr6B,GAChC,IAAItE,EDpgGsB,CAAC0L,GAAkB,UAAVA,EAAoB,OAAmB,QAAVA,EAAkB,QAAU,SCogGlF2/B,CAAmB3/B,GAI9B,OAHIpH,GAAwB,UAAbq6B,IAAyBr6B,GAAwB,UAAbq6B,KAC/C3+B,EA7Ea,CAAC0L,GAAkB,SAAVA,EAAmB,QAAoB,UAAVA,EAAoB,OAASA,EA6E1E4/B,CAAatrC,IAEhBA,CACX,CAwCA,MAAMurC,WAAc3B,GAChB9pC,YAAY2tB,GACR+d,QACC1qC,KAAKmC,GAAKwqB,EAAIxqB,GACdnC,KAAKf,KAAO0tB,EAAI1tB,KAChBe,KAAKyE,aAAUnE,EACfN,KAAKgR,IAAM2b,EAAI3b,IACfhR,KAAK0O,MAAQie,EAAIje,MACjB1O,KAAKkU,SAAM5T,EACXN,KAAKoU,YAAS9T,EACdN,KAAKqU,UAAO/T,EACZN,KAAKmU,WAAQ7T,EACbN,KAAKuV,WAAQjV,EACbN,KAAKyX,YAASnX,EACfN,KAAK2qC,SAAW,CACZt2B,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GAEXpU,KAAK8b,cAAWxb,EAChBN,KAAKsoC,eAAYhoC,EACjBN,KAAK4qC,gBAAatqC,EAClBN,KAAK6qC,mBAAgBvqC,EACrBN,KAAK8qC,iBAAcxqC,EACnBN,KAAK+qC,kBAAezqC,EACpBN,KAAKgxB,UAAO1wB,EACZN,KAAKgrC,mBAAgB1qC,EACtBN,KAAK/P,SAAMqQ,EACXN,KAAKhQ,SAAMsQ,EACXN,KAAKirC,YAAS3qC,EACbN,KAAKyO,MAAQ,GACbzO,KAAKkrC,eAAiB,KACtBlrC,KAAKmrC,YAAc,KACnBnrC,KAAKorC,YAAc,KACpBprC,KAAK47B,QAAU,EACf57B,KAAKqrC,WAAa,EAClBrrC,KAAKsrC,kBAAoB,CAAC,EACzBtrC,KAAKiqC,iBAAc3pC,EACnBN,KAAKkqC,eAAY5pC,EAClBN,KAAK09B,gBAAiB,EACtB19B,KAAKurC,cAAWjrC,EAChBN,KAAKwrC,cAAWlrC,EAChBN,KAAKyrC,mBAAgBnrC,EACrBN,KAAK0rC,mBAAgBprC,EACrBN,KAAK2rC,aAAe,EACpB3rC,KAAK4rC,aAAe,EACpB5rC,KAAKo7B,OAAS,CAAC,EACfp7B,KAAK6rC,mBAAoB,EACzB7rC,KAAK6yB,cAAWvyB,CACpB,CACHwrC,KAAKrnC,GACEzE,KAAKyE,QAAUA,EAAQ2b,WAAWpgB,KAAKqX,cACvCrX,KAAKgxB,KAAOvsB,EAAQusB,KACpBhxB,KAAKwrC,SAAWxrC,KAAK61B,MAAMpxB,EAAQxU,KACnC+P,KAAKurC,SAAWvrC,KAAK61B,MAAMpxB,EAAQzU,KACnCgQ,KAAK0rC,cAAgB1rC,KAAK61B,MAAMpxB,EAAQsnC,cACxC/rC,KAAKyrC,cAAgBzrC,KAAK61B,MAAMpxB,EAAQunC,aAC5C,CACHnW,MAAM0C,EAAKv0B,GACJ,OAAOu0B,CACX,CACHf,gBACO,IAAI,SAAEgU,EAAS,SAAED,EAAS,cAAEG,EAAc,cAAED,GAAmBzrC,KAK/D,OAJAwrC,EAAW1oC,EAAgB0oC,EAAU5oC,OAAO+D,mBAC5C4kC,EAAWzoC,EAAgByoC,EAAU3oC,OAAOu0B,mBAC5CuU,EAAgB5oC,EAAgB4oC,EAAe9oC,OAAO+D,mBACtD8kC,EAAgB3oC,EAAgB2oC,EAAe7oC,OAAOu0B,mBAC/C,CACHlnC,IAAK6S,EAAgB0oC,EAAUE,GAC/B17C,IAAK8S,EAAgByoC,EAAUE,GAC/BnU,WAAY30B,EAAe6oC,GAC3BjU,WAAY50B,EAAe4oC,GAEnC,CACHzU,UAAUC,GACH,IACIzvB,GADA,IAAErX,EAAI,IAAED,EAAI,WAAEsnC,EAAW,WAAEC,GAAgBv3B,KAAKw3B,gBAEpD,GAAIF,GAAcC,EACd,MAAO,CACHtnC,MACAD,OAGR,MAAMi8C,EAAQjsC,KAAKwwB,0BACnB,IAAI,IAAIx+B,EAAI,EAAG4R,EAAOqoC,EAAM9tC,OAAQnM,EAAI4R,IAAQ5R,EAC5CsV,EAAQ2kC,EAAMj6C,GAAG0+B,WAAWoG,UAAU92B,KAAM+2B,GACvCO,IACDrnC,EAAMF,KAAKE,IAAIA,EAAKqX,EAAMrX,MAEzBsnC,IACDvnC,EAAMD,KAAKC,IAAIA,EAAKsX,EAAMtX,MAKlC,OAFAC,EAAMsnC,GAActnC,EAAMD,EAAMA,EAAMC,EACtCD,EAAMsnC,GAAcrnC,EAAMD,EAAMC,EAAMD,EAC/B,CACHC,IAAK6S,EAAgB7S,EAAK6S,EAAgB9S,EAAKC,IAC/CD,IAAK8S,EAAgB9S,EAAK8S,EAAgB7S,EAAKD,IAEvD,CACH4wC,aACO,MAAO,CACHvsB,KAAMrU,KAAK8qC,aAAe,EAC1B52B,IAAKlU,KAAK4qC,YAAc,EACxBz2B,MAAOnU,KAAK+qC,cAAgB,EAC5B32B,OAAQpU,KAAK6qC,eAAiB,EAEtC,CACHqB,WACO,OAAOlsC,KAAKyO,KAChB,CACH4nB,YACO,MAAM5f,EAAOzW,KAAK0O,MAAM+H,KACxB,OAAOzW,KAAKyE,QAAQ2xB,SAAWp2B,KAAK4iC,eAAiBnsB,EAAK01B,QAAU11B,EAAK21B,UAAY31B,EAAK2f,QAAU,EACxG,CACHiW,cAAclU,EAAYn4B,KAAK0O,MAAMypB,WAE9B,OADcn4B,KAAKmrC,cAAgBnrC,KAAKmrC,YAAcnrC,KAAKssC,mBAAmBnU,GAElF,CACAoL,eACIvjC,KAAKo7B,OAAS,CAAC,EACfp7B,KAAK6rC,mBAAoB,CAC7B,CACAU,eACItpC,EAASjD,KAAKyE,QAAQ8nC,aAAc,CAChCvsC,MAER,CACHstB,OAAOxR,EAAUwsB,EAAWD,GACrB,MAAM,YAAE7zB,EAAY,MAAEG,EAAQlG,MAAO+9B,GAAcxsC,KAAKyE,QAClDgoC,EAAaD,EAASC,WAC5BzsC,KAAKusC,eACLvsC,KAAK8b,SAAWA,EAChB9b,KAAKsoC,UAAYA,EACjBtoC,KAAK2qC,SAAWtC,EAAUtqC,OAAOC,OAAO,CACpCqW,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GACTi0B,GACHroC,KAAKyO,MAAQ,KACbzO,KAAKorC,YAAc,KACnBprC,KAAKkrC,eAAiB,KACtBlrC,KAAKmrC,YAAc,KACnBnrC,KAAK0sC,sBACL1sC,KAAK2sC,gBACL3sC,KAAK4sC,qBACL5sC,KAAKqrC,WAAarrC,KAAK4iC,eAAiB5iC,KAAKuV,MAAQ8yB,EAAQh0B,KAAOg0B,EAAQl0B,MAAQnU,KAAKyX,OAAS4wB,EAAQn0B,IAAMm0B,EAAQj0B,OACnHpU,KAAK6rC,oBACN7rC,KAAK6sC,mBACL7sC,KAAK8sC,sBACL9sC,KAAK+sC,kBACL/sC,KAAKirC,OD9sEb,SAAmB+B,EAAQr4B,EAAOH,GAClC,MAAM,IAAEvkB,EAAI,IAAED,GAASg9C,EACjBjJ,GArhDkBkJ,GAqhDWj9C,EAAMC,GAAO,EArhDK,iBAApCoS,EAqhDUsS,IArhDsCtS,EAAMsD,SAAS,KAAOkC,WAAWxF,GAAS,IAAM4qC,GAAa5qC,GAshDxH6qC,EAAW,CAAC7qC,EAAOqe,IAAMlM,GAAyB,IAAVnS,EAAc,EAAIA,EAAQqe,EAthDxD,IAACre,EAAO4qC,EAuhDxB,MAAO,CACHh9C,IAAKi9C,EAASj9C,GAAMF,KAAKqX,IAAI28B,IAC7B/zC,IAAKk9C,EAASl9C,EAAK+zC,GAE3B,CCssE0BoJ,CAAUntC,KAAM2U,EAAOH,GACrCxU,KAAK6rC,mBAAoB,GAE7B7rC,KAAKotC,mBACLptC,KAAKyO,MAAQzO,KAAKqtC,cAAgB,GAClCrtC,KAAKstC,kBACL,MAAMC,EAAkBd,EAAazsC,KAAKyO,MAAMtQ,OAChD6B,KAAKwtC,sBAAsBD,EAAkB5D,GAAO3pC,KAAKyO,MAAOg+B,GAAczsC,KAAKyO,OACnFzO,KAAKmuB,YACLnuB,KAAKytC,+BACLztC,KAAK0tC,yBACL1tC,KAAK2tC,8BACDnB,EAASl4B,UAAYk4B,EAASz2B,UAAgC,SAApBy2B,EAASvoC,UACnDjE,KAAKyO,MA3YjB,SAAkBqD,EAAOrD,GACrB,MAAM+9B,EAAW16B,EAAMrN,QAAQgK,MACzBm/B,EAyBV,SAA2B97B,GACvB,MAAMyC,EAASzC,EAAMrN,QAAQ8P,OACvBS,EAAalD,EAAM+7B,YACnBC,EAAWh8B,EAAM8pB,QAAU5mB,GAAcT,EAAS,EAAI,GACtDw5B,EAAWj8B,EAAMu5B,WAAar2B,EACpC,OAAOjlB,KAAK0X,MAAM1X,KAAKE,IAAI69C,EAAUC,GACzC,CA/B+BC,CAAkBl8B,GACvCm8B,EAAal+C,KAAKE,IAAIu8C,EAAS9C,eAAiBkE,EAAoBA,GACpEM,EAAe1B,EAASr2B,MAAMg4B,QA6CvC,SAAyB1/B,GACtB,MAAMuX,EAAS,GACf,IAAIh0B,EAAG4R,EACP,IAAI5R,EAAI,EAAG4R,EAAO6K,EAAMtQ,OAAQnM,EAAI4R,EAAM5R,IAClCyc,EAAMzc,GAAGmkB,OACT6P,EAAOpgB,KAAK5T,GAGpB,OAAOg0B,CACX,CAtDkDooB,CAAgB3/B,GAAS,GACjE4/B,EAAkBH,EAAa/vC,OAC/BmwC,EAAQJ,EAAa,GACrBzkC,EAAOykC,EAAaG,EAAkB,GACtCnF,EAAW,GACjB,GAAImF,EAAkBJ,EAElB,OAgDP,SAAoBx/B,EAAOy6B,EAAUgF,EAAc/E,GAChD,IAEIn3C,EAFA82B,EAAQ,EACRpG,EAAOwrB,EAAa,GAGxB,IADA/E,EAAUp5C,KAAKu5C,KAAKH,GAChBn3C,EAAI,EAAGA,EAAIyc,EAAMtQ,OAAQnM,IACrBA,IAAM0wB,IACNwmB,EAAStjC,KAAK6I,EAAMzc,IACpB82B,IACApG,EAAOwrB,EAAaplB,EAAQqgB,GAGxC,CA7DQoF,CAAW9/B,EAAOy6B,EAAUgF,EAAcG,EAAkBJ,GACrD/E,EAEX,MAAMC,EAqBT,SAA0B+E,EAAcz/B,EAAOw/B,GAC5C,MAAMO,EA4DT,SAAwB1tB,GACrB,MAAM3hB,EAAM2hB,EAAI3iB,OAChB,IAAInM,EAAGy8C,EACP,GAAItvC,EAAM,EACN,OAAO,EAEX,IAAIsvC,EAAO3tB,EAAI,GAAI9uB,EAAI,EAAGA,EAAImN,IAAOnN,EACjC,GAAI8uB,EAAI9uB,GAAK8uB,EAAI9uB,EAAI,KAAOy8C,EACxB,OAAO,EAGf,OAAOA,CACX,CAxE6BC,CAAeR,GAClC/E,EAAU16B,EAAMtQ,OAAS8vC,EAC/B,IAAKO,EACD,OAAOz+C,KAAKC,IAAIm5C,EAAS,GAE7B,MAAMwF,EDzpGN,SAAoBtsC,GACpB,MAAM2jB,EAAS,GACT5d,EAAOrY,KAAKqY,KAAK/F,GACvB,IAAIrQ,EACJ,IAAIA,EAAI,EAAGA,EAAIoW,EAAMpW,IACbqQ,EAAQrQ,GAAM,IACdg0B,EAAOpgB,KAAK5T,GACZg0B,EAAOpgB,KAAKvD,EAAQrQ,IAO5B,OAJIoW,KAAiB,EAAPA,IACV4d,EAAOpgB,KAAKwC,GAEhB4d,EAAOyV,MAAK,CAAC5qC,EAAGC,IAAID,EAAIC,IAAGw6B,MACpBtF,CACX,CC0oGoB4oB,CAAWJ,GAC3B,IAAI,IAAIx8C,EAAI,EAAG4R,EAAO+qC,EAAQxwC,OAAS,EAAGnM,EAAI4R,EAAM5R,IAAI,CACpD,MAAMu6B,EAASoiB,EAAQ38C,GACvB,GAAIu6B,EAAS4c,EACT,OAAO5c,CAEf,CACA,OAAOx8B,KAAKC,IAAIm5C,EAAS,EAC7B,CAnCoB0F,CAAiBX,EAAcz/B,EAAOw/B,GACtD,GAAII,EAAkB,EAAG,CACrB,IAAIr8C,EAAG4R,EACP,MAAMkrC,EAAkBT,EAAkB,EAAIt+C,KAAKL,OAAO+Z,EAAO6kC,IAAUD,EAAkB,IAAM,KAEnG,IADAjsB,GAAK3T,EAAOy6B,EAAUC,EAAS/mC,EAAc0sC,GAAmB,EAAIR,EAAQQ,EAAiBR,GACzFt8C,EAAI,EAAG4R,EAAOyqC,EAAkB,EAAGr8C,EAAI4R,EAAM5R,IAC7CowB,GAAK3T,EAAOy6B,EAAUC,EAAS+E,EAAal8C,GAAIk8C,EAAal8C,EAAI,IAGrE,OADAowB,GAAK3T,EAAOy6B,EAAUC,EAAS1/B,EAAMrH,EAAc0sC,GAAmBrgC,EAAMtQ,OAASsL,EAAOqlC,GACrF5F,CACX,CAEA,OADA9mB,GAAK3T,EAAOy6B,EAAUC,GACfD,CACX,CAiXyBnzB,CAAS/V,KAAMA,KAAKyO,OACjCzO,KAAKorC,YAAc,KACnBprC,KAAK+uC,iBAELxB,GACAvtC,KAAKwtC,sBAAsBxtC,KAAKyO,OAEpCzO,KAAKgvC,YACLhvC,KAAKivC,MACLjvC,KAAKkvC,WACLlvC,KAAKmvC,aACT,CACHhhB,YACO,IACIihB,EAAYC,EADZC,EAAgBtvC,KAAKyE,QAAQjB,QAE7BxD,KAAK4iC,gBACLwM,EAAapvC,KAAKqU,KAClBg7B,EAAWrvC,KAAKmU,QAEhBi7B,EAAapvC,KAAKkU,IAClBm7B,EAAWrvC,KAAKoU,OAChBk7B,GAAiBA,GAErBtvC,KAAKiqC,YAAcmF,EACnBpvC,KAAKkqC,UAAYmF,EACjBrvC,KAAK09B,eAAiB4R,EACtBtvC,KAAK47B,QAAUyT,EAAWD,EAC1BpvC,KAAKuvC,eAAiBvvC,KAAKyE,QAAQ+qC,aACvC,CACAL,cACIlsC,EAASjD,KAAKyE,QAAQ0qC,YAAa,CAC/BnvC,MAER,CACA0sC,sBACIzpC,EAASjD,KAAKyE,QAAQioC,oBAAqB,CACvC1sC,MAER,CACA2sC,gBACQ3sC,KAAK4iC,gBACL5iC,KAAKuV,MAAQvV,KAAK8b,SAClB9b,KAAKqU,KAAO,EACZrU,KAAKmU,MAAQnU,KAAKuV,QAElBvV,KAAKyX,OAASzX,KAAKsoC,UACnBtoC,KAAKkU,IAAM,EACXlU,KAAKoU,OAASpU,KAAKyX,QAEvBzX,KAAK8qC,YAAc,EACnB9qC,KAAK4qC,WAAa,EAClB5qC,KAAK+qC,aAAe,EACpB/qC,KAAK6qC,cAAgB,CACzB,CACA+B,qBACI3pC,EAASjD,KAAKyE,QAAQmoC,mBAAoB,CACtC5sC,MAER,CACAyvC,WAAWp9B,GACPrS,KAAK0O,MAAMghC,cAAcr9B,EAAMrS,KAAKqX,cACpCpU,EAASjD,KAAKyE,QAAQ4N,GAAO,CACzBrS,MAER,CACA6sC,mBACI7sC,KAAKyvC,WAAW,mBACpB,CACA3C,sBAAuB,CACvBC,kBACI/sC,KAAKyvC,WAAW,kBACpB,CACArC,mBACIptC,KAAKyvC,WAAW,mBACpB,CACHpC,aACO,MAAO,EACX,CACAC,kBACIttC,KAAKyvC,WAAW,kBACpB,CACAE,8BACI1sC,EAASjD,KAAKyE,QAAQkrC,4BAA6B,CAC/C3vC,MAER,CACH4vC,mBAAmBnhC,GACZ,MAAM+9B,EAAWxsC,KAAKyE,QAAQgK,MAC9B,IAAIzc,EAAG4R,EAAMynB,EACb,IAAIr5B,EAAI,EAAG4R,EAAO6K,EAAMtQ,OAAQnM,EAAI4R,EAAM5R,IACtCq5B,EAAO5c,EAAMzc,GACbq5B,EAAKwM,MAAQ50B,EAASupC,EAASvpC,SAAU,CACrCooB,EAAKhpB,MACLrQ,EACAyc,GACDzO,KAEX,CACA6vC,6BACI5sC,EAASjD,KAAKyE,QAAQorC,2BAA4B,CAC9C7vC,MAER,CACAytC,+BACIxqC,EAASjD,KAAKyE,QAAQgpC,6BAA8B,CAChDztC,MAER,CACA0tC,yBACI,MAAMjpC,EAAUzE,KAAKyE,QACf+nC,EAAW/nC,EAAQgK,MACnBqhC,EAAWtG,GAAcxpC,KAAKyO,MAAMtQ,OAAQsG,EAAQgK,MAAMi7B,eAC1Dh0B,EAAc82B,EAAS92B,aAAe,EACtCC,EAAc62B,EAAS72B,YAC7B,IACIV,EAAWqzB,EAAWyH,EADtB/E,EAAgBt1B,EAEpB,IAAK1V,KAAKgwC,eAAiBxD,EAASl4B,SAAWoB,GAAeC,GAAem6B,GAAY,IAAM9vC,KAAK4iC,eAEhG,YADA5iC,KAAKgrC,cAAgBt1B,GAGzB,MAAMu6B,EAAajwC,KAAKkwC,iBAClBC,EAAgBF,EAAWG,OAAO76B,MAClC86B,EAAiBJ,EAAWK,QAAQ74B,OACpCqE,EAAW9S,GAAYhJ,KAAK0O,MAAM6G,MAAQ46B,EAAe,EAAGnwC,KAAK8b,UACvE7G,EAAYxQ,EAAQ8P,OAASvU,KAAK8b,SAAWg0B,EAAWh0B,GAAYg0B,EAAW,GAC3EK,EAAgB,EAAIl7B,IACpBA,EAAY6G,GAAYg0B,GAAYrrC,EAAQ8P,OAAS,GAAM,IAC3D+zB,EAAYtoC,KAAKsoC,UAAY8B,GAAkB3lC,EAAQmQ,MAAQ43B,EAASv4B,QAAUo2B,GAAe5lC,EAAQ+Q,MAAOxV,KAAK0O,MAAMjK,QAAQiM,MACnIq/B,EAAmBhgD,KAAKqY,KAAK+nC,EAAgBA,EAAgBE,EAAiBA,GAC9ErF,EAA0Bj7C,KAAKE,IAAIF,KAAKwgD,KAAKvnC,IAAainC,EAAWK,QAAQ74B,OAAS,GAAKxC,GAAY,EAAG,IAAKllB,KAAKwgD,KAAKvnC,GAAYs/B,EAAYyH,GAAmB,EAAG,IAAMhgD,KAAKwgD,KAAKvnC,GAAYqnC,EAAiBN,GAAmB,EAAG,MDtlHhO,IAAMxpC,ICulHhBykC,EAAgBj7C,KAAKC,IAAI0lB,EAAa3lB,KAAKE,IAAI0lB,EAAaq1B,KAEhEhrC,KAAKgrC,cAAgBA,CACzB,CACA2C,8BACI1qC,EAASjD,KAAKyE,QAAQkpC,4BAA6B,CAC/C3tC,MAER,CACA+uC,gBAAiB,CACjBC,YACI/rC,EAASjD,KAAKyE,QAAQuqC,UAAW,CAC7BhvC,MAER,CACAivC,MACI,MAAMuB,EAAU,CACZj7B,MAAO,EACPkC,OAAQ,IAEN,MAAE/I,EAAQjK,SAAWgK,MAAO+9B,EAAWh3B,MAAOi7B,EAAY77B,KAAM87B,IAAiB1wC,KACjFsU,EAAUtU,KAAKgwC,aACfpN,EAAe5iC,KAAK4iC,eAC1B,GAAItuB,EAAS,CACT,MAAMq8B,EAActG,GAAeoG,EAAW/hC,EAAMjK,QAAQiM,MAQ5D,GAPIkyB,GACA4N,EAAQj7B,MAAQvV,KAAK8b,SACrB00B,EAAQ/4B,OAAS2yB,GAAkBsG,GAAYC,IAE/CH,EAAQ/4B,OAASzX,KAAKsoC,UACtBkI,EAAQj7B,MAAQ60B,GAAkBsG,GAAYC,GAE9CnE,EAASl4B,SAAWtU,KAAKyO,MAAMtQ,OAAQ,CACvC,MAAM,MAAEmwC,EAAM,KAAE7kC,EAAK,OAAE2mC,EAAO,QAAEE,GAAatwC,KAAKkwC,iBAC5CU,EAAiC,EAAnBpE,EAASv4B,QACvB48B,EAAe/oC,GAAU9H,KAAKgrC,eAC9Bh/B,EAAMjc,KAAKic,IAAI6kC,GACf9lC,EAAMhb,KAAKgb,IAAI8lC,GACrB,GAAIjO,EAAc,CACd,MAAMkO,EAActE,EAAS52B,OAAS,EAAI7K,EAAMqlC,EAAO76B,MAAQvJ,EAAMskC,EAAQ74B,OAC7E+4B,EAAQ/4B,OAAS1nB,KAAKE,IAAI+P,KAAKsoC,UAAWkI,EAAQ/4B,OAASq5B,EAAcF,EAC7E,KAAO,CACH,MAAMG,EAAavE,EAAS52B,OAAS,EAAI5J,EAAMokC,EAAO76B,MAAQxK,EAAMulC,EAAQ74B,OAC5E+4B,EAAQj7B,MAAQxlB,KAAKE,IAAI+P,KAAK8b,SAAU00B,EAAQj7B,MAAQw7B,EAAaH,EACzE,CACA5wC,KAAKgxC,kBAAkB1C,EAAO7kC,EAAMsB,EAAKiB,EAC7C,CACJ,CACAhM,KAAKixC,iBACDrO,GACA5iC,KAAKuV,MAAQvV,KAAK47B,QAAUltB,EAAM6G,MAAQvV,KAAK2qC,SAASt2B,KAAOrU,KAAK2qC,SAASx2B,MAC7EnU,KAAKyX,OAAS+4B,EAAQ/4B,SAEtBzX,KAAKuV,MAAQi7B,EAAQj7B,MACrBvV,KAAKyX,OAASzX,KAAK47B,QAAUltB,EAAM+I,OAASzX,KAAK2qC,SAASz2B,IAAMlU,KAAK2qC,SAASv2B,OAEtF,CACA48B,kBAAkB1C,EAAO7kC,EAAMsB,EAAKiB,GAChC,MAAQyC,OAAO,MAAE7D,EAAM,QAAEqJ,GAAW,SAAE4pB,GAAc79B,KAAKyE,QACnDysC,EAAmC,IAAvBlxC,KAAKgrC,cACjBmG,EAAgC,QAAbtT,GAAoC,MAAd79B,KAAKgxB,KACpD,GAAIhxB,KAAK4iC,eAAgB,CACrB,MAAMwO,EAAapxC,KAAK+7B,gBAAgB,GAAK/7B,KAAKqU,KAC5Cg9B,EAAcrxC,KAAKmU,MAAQnU,KAAK+7B,gBAAgB/7B,KAAKyO,MAAMtQ,OAAS,GAC1E,IAAI2sC,EAAc,EACdC,EAAe,EACfmG,EACIC,GACArG,EAAc9+B,EAAMsiC,EAAM/4B,MAC1Bw1B,EAAehgC,EAAMtB,EAAKgO,SAE1BqzB,EAAc//B,EAAMujC,EAAM72B,OAC1BszB,EAAe/+B,EAAMvC,EAAK8L,OAEb,UAAV3K,EACPmgC,EAAethC,EAAK8L,MACH,QAAV3K,EACPkgC,EAAcwD,EAAM/4B,MACH,UAAV3K,IACPkgC,EAAcwD,EAAM/4B,MAAQ,EAC5Bw1B,EAAethC,EAAK8L,MAAQ,GAEhCvV,KAAK8qC,YAAc/6C,KAAKC,KAAK86C,EAAcsG,EAAan9B,GAAWjU,KAAKuV,OAASvV,KAAKuV,MAAQ67B,GAAa,GAC3GpxC,KAAK+qC,aAAeh7C,KAAKC,KAAK+6C,EAAesG,EAAcp9B,GAAWjU,KAAKuV,OAASvV,KAAKuV,MAAQ87B,GAAc,EACnH,KAAO,CACH,IAAIzG,EAAanhC,EAAKgO,OAAS,EAC3BozB,EAAgByD,EAAM72B,OAAS,EACrB,UAAV7M,GACAggC,EAAa,EACbC,EAAgByD,EAAM72B,QACL,QAAV7M,IACPggC,EAAanhC,EAAKgO,OAClBozB,EAAgB,GAEpB7qC,KAAK4qC,WAAaA,EAAa32B,EAC/BjU,KAAK6qC,cAAgBA,EAAgB52B,CACzC,CACJ,CACHg9B,iBACWjxC,KAAK2qC,WACL3qC,KAAK2qC,SAASt2B,KAAOtkB,KAAKC,IAAIgQ,KAAK8qC,YAAa9qC,KAAK2qC,SAASt2B,MAC9DrU,KAAK2qC,SAASz2B,IAAMnkB,KAAKC,IAAIgQ,KAAK4qC,WAAY5qC,KAAK2qC,SAASz2B,KAC5DlU,KAAK2qC,SAASx2B,MAAQpkB,KAAKC,IAAIgQ,KAAK+qC,aAAc/qC,KAAK2qC,SAASx2B,OAChEnU,KAAK2qC,SAASv2B,OAASrkB,KAAKC,IAAIgQ,KAAK6qC,cAAe7qC,KAAK2qC,SAASv2B,QAE1E,CACA86B,WACIjsC,EAASjD,KAAKyE,QAAQyqC,SAAU,CAC5BlvC,MAER,CACH4iC,eACO,MAAM,KAAE5R,EAAK,SAAE6M,GAAc79B,KAAKyE,QAClC,MAAoB,QAAbo5B,GAAmC,WAAbA,GAAkC,MAAT7M,CAC1D,CACHsgB,aACO,OAAOtxC,KAAKyE,QAAQm9B,QACxB,CACH4L,sBAAsB/+B,GAGf,IAAIzc,EAAG4R,EACP,IAHA5D,KAAK2vC,8BACL3vC,KAAK4vC,mBAAmBnhC,GAEpBzc,EAAI,EAAG4R,EAAO6K,EAAMtQ,OAAQnM,EAAI4R,EAAM5R,IAClCoQ,EAAcqM,EAAMzc,GAAG6lC,SACvBppB,EAAMtE,OAAOnY,EAAG,GAChB4R,IACA5R,KAGRgO,KAAK6vC,4BACT,CACHK,iBACO,IAAID,EAAajwC,KAAKorC,YACtB,IAAK6E,EAAY,CACb,MAAMxD,EAAazsC,KAAKyE,QAAQgK,MAAMg+B,WACtC,IAAIh+B,EAAQzO,KAAKyO,MACbg+B,EAAah+B,EAAMtQ,SACnBsQ,EAAQk7B,GAAOl7B,EAAOg+B,IAE1BzsC,KAAKorC,YAAc6E,EAAajwC,KAAKuxC,mBAAmB9iC,EAAOA,EAAMtQ,OAAQ6B,KAAKyE,QAAQgK,MAAMi7B,cACpG,CACA,OAAOuG,CACX,CACHsB,mBAAmB9iC,EAAOtQ,EAAQurC,GAC3B,MAAM,IAAE14B,EAAMs6B,kBAAmBkG,GAAYxxC,KACvCyxC,EAAS,GACTC,EAAU,GACV7H,EAAY95C,KAAK0X,MAAMtJ,EAASqrC,GAAcrrC,EAAQurC,IAC5D,IAEI13C,EAAGuN,EAAGoyC,EAAM9Z,EAAO+Z,EAAUC,EAAYzzB,EAAOvN,EAAY0E,EAAOkC,EAAQq6B,EAF3EC,EAAkB,EAClBC,EAAmB,EAEvB,IAAIhgD,EAAI,EAAGA,EAAImM,EAAQnM,GAAK63C,EAAU,CAUlC,GATAhS,EAAQppB,EAAMzc,GAAG6lC,MACjB+Z,EAAW5xC,KAAKiyC,wBAAwBjgD,GACxCgf,EAAIN,KAAOmhC,EAAaD,EAASh7B,OACjCwH,EAAQozB,EAAOK,GAAcL,EAAOK,IAAe,CAC/Cp7B,KAAM,CAAC,EACPC,GAAI,IAER7F,EAAa+gC,EAAS/gC,WACtB0E,EAAQkC,EAAS,EACZrV,EAAcy1B,IAAWtlC,EAAQslC,IAG/B,GAAItlC,EAAQslC,GACf,IAAIt4B,EAAI,EAAGoyC,EAAO9Z,EAAM15B,OAAQoB,EAAIoyC,IAAQpyC,EACxCuyC,EAAeja,EAAMt4B,GAChB6C,EAAc0vC,IAAiBv/C,EAAQu/C,KACxCv8B,EAAQiB,GAAaxF,EAAKoN,EAAM3H,KAAM2H,EAAM1H,GAAInB,EAAOu8B,GACvDr6B,GAAU5G,QAPlB0E,EAAQiB,GAAaxF,EAAKoN,EAAM3H,KAAM2H,EAAM1H,GAAInB,EAAOsiB,GACvDpgB,EAAS5G,EAUb4gC,EAAO7rC,KAAK2P,GACZm8B,EAAQ9rC,KAAK6R,GACbs6B,EAAkBhiD,KAAKC,IAAIulB,EAAOw8B,GAClCC,EAAmBjiD,KAAKC,IAAIynB,EAAQu6B,EACxC,EA7iBP,SAAwBR,EAAQrzC,GAC7BmF,EAAKkuC,GAASpzB,IACV,MAAM1H,EAAK0H,EAAM1H,GACXw7B,EAAQx7B,EAAGvY,OAAS,EAC1B,IAAInM,EACJ,GAAIkgD,EAAQ/zC,EAAQ,CAChB,IAAInM,EAAI,EAAGA,EAAIkgD,IAASlgD,SACbosB,EAAM3H,KAAKC,EAAG1kB,IAEzB0kB,EAAGvM,OAAO,EAAG+nC,EACjB,IAER,CAkiBQC,CAAeX,EAAQrzC,GACvB,MAAMiyC,EAASqB,EAAOltC,QAAQwtC,GACxBzB,EAAUoB,EAAQntC,QAAQytC,GAC1BI,EAAWC,IAAM,CACf98B,MAAOk8B,EAAOY,IAAQ,EACtB56B,OAAQi6B,EAAQW,IAAQ,IAEhC,MAAO,CACH/D,MAAO8D,EAAQ,GACf3oC,KAAM2oC,EAAQj0C,EAAS,GACvBiyC,OAAQgC,EAAQhC,GAChBE,QAAS8B,EAAQ9B,GACjBmB,SACAC,UAER,CACH5Z,iBAAiBz1B,GACV,OAAOA,CACX,CACHy5B,iBAAiBz5B,EAAO2B,GACjB,OAAO6yB,GACX,CACHyb,iBAAiBt7B,GAAQ,CACzB+kB,gBAAgB/3B,GACT,MAAMyK,EAAQzO,KAAKyO,MACnB,OAAIzK,EAAQ,GAAKA,EAAQyK,EAAMtQ,OAAS,EAC7B,KAEJ6B,KAAK87B,iBAAiBrtB,EAAMzK,GAAO3B,MAC9C,CACHkwC,mBAAmBC,GACRxyC,KAAK09B,iBACL8U,EAAU,EAAIA,GAElB,MAAMx7B,EAAQhX,KAAKiqC,YAAcuI,EAAUxyC,KAAK47B,QAChD,ODluHG5yB,GCkuHgBhJ,KAAKuvC,eAAiBx4B,GAAY/W,KAAK0O,MAAOsI,EAAO,GAAKA,GDluHtD,MAAO,MCmuHlC,CACHy7B,mBAAmBz7B,GACZ,MAAMw7B,GAAWx7B,EAAQhX,KAAKiqC,aAAejqC,KAAK47B,QAClD,OAAO57B,KAAK09B,eAAiB,EAAI8U,EAAUA,CAC/C,CACHE,eACO,OAAO1yC,KAAK87B,iBAAiB97B,KAAK2yC,eACtC,CACHA,eACO,MAAM,IAAE1iD,EAAI,IAAED,GAASgQ,KACvB,OAAO/P,EAAM,GAAKD,EAAM,EAAIA,EAAMC,EAAM,GAAKD,EAAM,EAAIC,EAAM,CACjE,CACHonB,WAAWrT,GACJ,MAAMyK,EAAQzO,KAAKyO,OAAS,GAC5B,GAAIzK,GAAS,GAAKA,EAAQyK,EAAMtQ,OAAQ,CACpC,MAAMktB,EAAO5c,EAAMzK,GACnB,OAAOqnB,EAAKwH,WAAaxH,EAAKwH,SAnkB1C,SAA2BpR,EAAQzd,EAAOqnB,GACtC,OAAO1N,GAAc8D,EAAQ,CACzB4J,OACArnB,QACA/E,KAAM,QAEd,CA6jBqD2zC,CAAkB5yC,KAAKqX,aAAcrT,EAAOqnB,GACzF,CACA,OAAOrrB,KAAK6yB,WAAa7yB,KAAK6yB,SA1kB3BlV,GA0kByD3d,KAAK0O,MAAM2I,aA1kB9C,CACzBvF,MAykBqF9R,KAxkBrFf,KAAM,UAykBV,CACH4uC,YACO,MAAMgF,EAAc7yC,KAAKyE,QAAQgK,MAC3BqkC,EAAMhrC,GAAU9H,KAAKgrC,eACrBh/B,EAAMjc,KAAKqX,IAAIrX,KAAKic,IAAI8mC,IACxB/nC,EAAMhb,KAAKqX,IAAIrX,KAAKgb,IAAI+nC,IACxB7C,EAAajwC,KAAKkwC,iBAClBj8B,EAAU4+B,EAAY78B,iBAAmB,EACzClkB,EAAIm+C,EAAaA,EAAWG,OAAO76B,MAAQtB,EAAU,EACrDnkB,EAAImgD,EAAaA,EAAWK,QAAQ74B,OAASxD,EAAU,EAC7D,OAAOjU,KAAK4iC,eAAiB9yC,EAAIkc,EAAMla,EAAIiZ,EAAMjZ,EAAIka,EAAMlc,EAAIib,EAAMjb,EAAIib,EAAMjZ,EAAIka,EAAMlc,EAAIkc,EAAMla,EAAIiZ,CAC3G,CACHilC,aACO,MAAM17B,EAAUtU,KAAKyE,QAAQ6P,QAC7B,MAAgB,SAAZA,IACSA,EAENtU,KAAKwwB,0BAA0BryB,OAAS,CACnD,CACH40C,sBAAsB5a,GACf,MAAMnH,EAAOhxB,KAAKgxB,KACZtiB,EAAQ1O,KAAK0O,MACbjK,EAAUzE,KAAKyE,SACf,KAAEmQ,EAAK,SAAEipB,EAAS,OAAEzoB,GAAY3Q,EAChC8P,EAASK,EAAKL,OACdquB,EAAe5iC,KAAK4iC,eAEpB6G,EADQzpC,KAAKyO,MACOtQ,QAAUoW,EAAS,EAAI,GAC3Cy+B,EAAK5I,GAAkBx1B,GACvBqW,EAAQ,GACRgoB,EAAa79B,EAAOgL,WAAWpgB,KAAKqX,cACpC67B,EAAYD,EAAW3+B,QAAU2+B,EAAW19B,MAAQ,EACpD49B,EAAgBD,EAAY,EAC5BE,EAAmB,SAASp8B,GAC9B,OAAOD,GAAYrI,EAAOsI,EAAOk8B,EACrC,EACA,IAAIG,EAAarhD,EAAGm4C,EAAWmJ,EAC3BC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EAAIC,EAAIC,EACpC,GAAiB,QAAbjW,EACAwV,EAAcD,EAAiBpzC,KAAKoU,QACpCo/B,EAAMxzC,KAAKoU,OAAS4+B,EACpBU,EAAML,EAAcF,EACpBS,EAAKR,EAAiBjb,EAAUjkB,KAAOi/B,EACvCW,EAAK3b,EAAU/jB,YACZ,GAAiB,WAAbypB,EACPwV,EAAcD,EAAiBpzC,KAAKkU,KACpC0/B,EAAKzb,EAAUjkB,IACf4/B,EAAKV,EAAiBjb,EAAU/jB,QAAU++B,EAC1CK,EAAMH,EAAcF,EACpBO,EAAM1zC,KAAKkU,IAAM8+B,OACd,GAAiB,SAAbnV,EACPwV,EAAcD,EAAiBpzC,KAAKmU,OACpCo/B,EAAMvzC,KAAKmU,MAAQ6+B,EACnBS,EAAMJ,EAAcF,EACpBQ,EAAKP,EAAiBjb,EAAU9jB,MAAQ8+B,EACxCU,EAAK1b,EAAUhkB,WACZ,GAAiB,UAAb0pB,EACPwV,EAAcD,EAAiBpzC,KAAKqU,MACpCs/B,EAAKxb,EAAU9jB,KACfw/B,EAAKT,EAAiBjb,EAAUhkB,OAASg/B,EACzCI,EAAMF,EAAcF,EACpBM,EAAMzzC,KAAKqU,KAAO2+B,OACf,GAAa,MAAThiB,EAAc,CACrB,GAAiB,WAAb6M,EACAwV,EAAcD,GAAkBjb,EAAUjkB,IAAMikB,EAAU/jB,QAAU,EAAI,SACrE,GAAI1R,EAASm7B,GAAW,CAC3B,MAAMkW,EAAiBh2C,OAAOsB,KAAKw+B,GAAU,GACvCx7B,EAAQw7B,EAASkW,GACvBV,EAAcD,EAAiBpzC,KAAK0O,MAAMqD,OAAOgiC,GAAgBjY,iBAAiBz5B,GACtF,CACAuxC,EAAKzb,EAAUjkB,IACf4/B,EAAK3b,EAAU/jB,OACfo/B,EAAMH,EAAcF,EACpBO,EAAMF,EAAMR,CAChB,MAAO,GAAa,MAAThiB,EAAc,CACrB,GAAiB,WAAb6M,EACAwV,EAAcD,GAAkBjb,EAAU9jB,KAAO8jB,EAAUhkB,OAAS,QACjE,GAAIzR,EAASm7B,GAAW,CAC3B,MAAMkW,EAAiBh2C,OAAOsB,KAAKw+B,GAAU,GACvCx7B,EAAQw7B,EAASkW,GACvBV,EAAcD,EAAiBpzC,KAAK0O,MAAMqD,OAAOgiC,GAAgBjY,iBAAiBz5B,GACtF,CACAkxC,EAAMF,EAAcF,EACpBM,EAAMF,EAAMP,EACZW,EAAKxb,EAAU9jB,KACfw/B,EAAK1b,EAAUhkB,KACnB,CACA,MAAM6/B,EAAQhxC,EAAeyB,EAAQgK,MAAMi7B,cAAeD,GACpDwK,EAAOlkD,KAAKC,IAAI,EAAGD,KAAKu5C,KAAKG,EAAcuK,IACjD,IAAIhiD,EAAI,EAAGA,EAAIy3C,EAAaz3C,GAAKiiD,EAAK,CAClC,MAAM5jC,EAAUrQ,KAAKqX,WAAWrlB,GAC1BkiD,EAAct/B,EAAKwL,WAAW/P,GAC9B8jC,EAAoB/+B,EAAOgL,WAAW/P,GACtCwE,EAAYq/B,EAAYr/B,UACxBu/B,EAAYF,EAAYtzC,MACxB6oB,EAAa0qB,EAAkB9+B,MAAQ,GACvCqU,EAAmByqB,EAAkB7+B,WACrCL,EAAYi/B,EAAYj/B,UACxBE,EAAY++B,EAAY/+B,UACxBk/B,EAAiBH,EAAYG,gBAAkB,GAC/CC,EAAuBJ,EAAYI,qBACzCnK,EAAYL,GAAoB9pC,KAAMhO,EAAGuiB,QACvBjU,IAAd6pC,IAGJmJ,EAAmBv8B,GAAYrI,EAAOy7B,EAAWt1B,GAC7C+tB,EACA2Q,EAAME,EAAME,EAAKE,EAAKP,EAEtBE,EAAME,EAAME,EAAKE,EAAKR,EAE1BroB,EAAMrlB,KAAK,CACP2tC,MACAC,MACAC,MACAC,MACAC,KACAC,KACAC,KACAC,KACAv+B,MAAOV,EACPjU,MAAOwzC,EACP3qB,aACAC,mBACAzU,YACAE,YACAk/B,iBACAC,yBAER,CAGA,OAFAt0C,KAAK2rC,aAAelC,EACpBzpC,KAAK4rC,aAAeyH,EACbpoB,CACX,CACHqhB,mBAAmBnU,GACZ,MAAMnH,EAAOhxB,KAAKgxB,KACZvsB,EAAUzE,KAAKyE,SACf,SAAEo5B,EAAWpvB,MAAOokC,GAAiBpuC,EACrCm+B,EAAe5iC,KAAK4iC,eACpBn0B,EAAQzO,KAAKyO,OACb,MAAE7D,EAAM,WAAEwL,EAAW,QAAEnC,EAAQ,OAAE2B,GAAYi9B,EAC7CG,EAAK5I,GAAkB3lC,EAAQmQ,MAC/B2/B,EAAiBvB,EAAK/+B,EACtBugC,EAAkB5+B,GAAU3B,EAAUsgC,EACtCr8B,GAAYpQ,GAAU9H,KAAKgrC,eAC3B/f,EAAQ,GACd,IAAIj5B,EAAG4R,EAAMynB,EAAMwM,EAAOllC,EAAG0S,EAAGoW,EAAWzE,EAAOtG,EAAMG,EAAY4jC,EAAWC,EAC3Eh5B,EAAe,SACnB,GAAiB,QAAbmiB,EACAx4B,EAAIrF,KAAKoU,OAASogC,EAClB/4B,EAAYzb,KAAK20C,+BACd,GAAiB,WAAb9W,EACPx4B,EAAIrF,KAAKkU,IAAMsgC,EACf/4B,EAAYzb,KAAK20C,+BACd,GAAiB,SAAb9W,EAAqB,CAC5B,MAAM3+B,EAAMc,KAAK40C,wBAAwB5B,GACzCv3B,EAAYvc,EAAIuc,UAChB9oB,EAAIuM,EAAIvM,CACZ,MAAO,GAAiB,UAAbkrC,EAAsB,CAC7B,MAAM3+B,EAAMc,KAAK40C,wBAAwB5B,GACzCv3B,EAAYvc,EAAIuc,UAChB9oB,EAAIuM,EAAIvM,CACZ,MAAO,GAAa,MAATq+B,EAAc,CACrB,GAAiB,WAAb6M,EACAx4B,GAAK8yB,EAAUjkB,IAAMikB,EAAU/jB,QAAU,EAAImgC,OAC1C,GAAI7xC,EAASm7B,GAAW,CAC3B,MAAMkW,EAAiBh2C,OAAOsB,KAAKw+B,GAAU,GACvCx7B,EAAQw7B,EAASkW,GACvB1uC,EAAIrF,KAAK0O,MAAMqD,OAAOgiC,GAAgBjY,iBAAiBz5B,GAASkyC,CACpE,CACA94B,EAAYzb,KAAK20C,yBACrB,MAAO,GAAa,MAAT3jB,EAAc,CACrB,GAAiB,WAAb6M,EACAlrC,GAAKwlC,EAAU9jB,KAAO8jB,EAAUhkB,OAAS,EAAIogC,OAC1C,GAAI7xC,EAASm7B,GAAW,CAC3B,MAAMkW,EAAiBh2C,OAAOsB,KAAKw+B,GAAU,GACvCx7B,EAAQw7B,EAASkW,GACvBphD,EAAIqN,KAAK0O,MAAMqD,OAAOgiC,GAAgBjY,iBAAiBz5B,EAC3D,CACAoZ,EAAYzb,KAAK40C,wBAAwB5B,GAAIv3B,SACjD,CACa,MAATuV,IACc,UAAVpmB,EACA8Q,EAAe,MACE,QAAV9Q,IACP8Q,EAAe,WAGvB,MAAMu0B,EAAajwC,KAAKkwC,iBACxB,IAAIl+C,EAAI,EAAG4R,EAAO6K,EAAMtQ,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC1Cq5B,EAAO5c,EAAMzc,GACb6lC,EAAQxM,EAAKwM,MACb,MAAMqc,EAAcrB,EAAYzyB,WAAWpgB,KAAKqX,WAAWrlB,IAC3DglB,EAAQhX,KAAK+7B,gBAAgB/pC,GAAK6gD,EAAY58B,YAC9CvF,EAAO1Q,KAAKiyC,wBAAwBjgD,GACpC6e,EAAaH,EAAKG,WAClB4jC,EAAYliD,EAAQslC,GAASA,EAAM15B,OAAS,EAC5C,MAAM02C,EAAYJ,EAAY,EACxB7zC,EAAQszC,EAAYtzC,MACpB2a,EAAc24B,EAAYp+B,gBAC1BwF,EAAc44B,EAAYr+B,gBAChC,IAuCI+F,EAvCAk5B,EAAgBr5B,EAwCpB,GAvCImnB,GACAjwC,EAAIqkB,EACc,UAAdyE,IAEIq5B,EADA9iD,IAAM4R,EAAO,EACI5D,KAAKyE,QAAQjB,QAAoB,OAAV,QAC3B,IAANxR,EACUgO,KAAKyE,QAAQjB,QAAmB,QAAT,OAExB,UAKhBkxC,EAFS,QAAb7W,EACmB,SAAfznB,GAAsC,IAAb8B,GACXu8B,EAAY5jC,EAAaA,EAAa,EAC9B,WAAfuF,GACO65B,EAAWK,QAAQ74B,OAAS,EAAIo9B,EAAYhkC,EAAaA,GAEzDo/B,EAAWK,QAAQ74B,OAAS5G,EAAa,EAGxC,SAAfuF,GAAsC,IAAb8B,EACZrH,EAAa,EACJ,WAAfuF,EACM65B,EAAWK,QAAQ74B,OAAS,EAAIo9B,EAAYhkC,EAE5Co/B,EAAWK,QAAQ74B,OAASg9B,EAAY5jC,EAGzD+E,IACA8+B,IAAe,GAEF,IAAbx8B,GAAmBg8B,EAAY79B,oBAC/B1jB,GAAKke,EAAa,EAAI9gB,KAAKgb,IAAImN,MAGnC7S,EAAI2R,EACJ09B,GAAc,EAAID,GAAa5jC,EAAa,GAG5CqjC,EAAY79B,kBAAmB,CAC/B,MAAM0+B,EAAe93B,GAAUi3B,EAAY39B,iBACrCkB,EAASw4B,EAAWyB,QAAQ1/C,GAC5BujB,EAAQ06B,EAAWwB,OAAOz/C,GAChC,IAAIkiB,EAAMwgC,EAAaK,EAAa7gC,IAChCG,EAAO,EAAI0gC,EAAa1gC,KAC5B,OAAOqH,GACH,IAAK,SACDxH,GAAOuD,EAAS,EAChB,MACJ,IAAK,SACDvD,GAAOuD,EAGf,OAAOgE,GACH,IAAK,SACDpH,GAAQkB,EAAQ,EAChB,MACJ,IAAK,QACDlB,GAAQkB,EACR,MACJ,IAAK,QACGvjB,IAAM4R,EAAO,EACbyQ,GAAQkB,EACDvjB,EAAI,IACXqiB,GAAQkB,EAAQ,GAI5BqG,EAAW,CACPvH,OACAH,MACAqB,MAAOA,EAAQw/B,EAAax/B,MAC5BkC,OAAQA,EAASs9B,EAAat9B,OAC9B7W,MAAOszC,EAAY59B,cAE3B,CACA2U,EAAMrlB,KAAK,CACPiyB,QACAnnB,OACAgkC,aACAjwC,QAAS,CACLyT,WACAtX,QACA2a,cACAD,cACAG,UAAWq5B,EACXp5B,eACAF,YAAa,CACT7oB,EACA0S,GAEJuW,aAGZ,CACA,OAAOqP,CACX,CACA0pB,0BACI,MAAM,SAAE9W,EAAS,MAAEpvB,GAAWzO,KAAKyE,QAEnC,IADkBqD,GAAU9H,KAAKgrC,eAE7B,MAAoB,QAAbnN,EAAqB,OAAS,QAEzC,IAAIjzB,EAAQ,SAQZ,MAPoB,UAAhB6D,EAAM7D,MACNA,EAAQ,OACe,QAAhB6D,EAAM7D,MACbA,EAAQ,QACe,UAAhB6D,EAAM7D,QACbA,EAAQ,SAELA,CACX,CACAgqC,wBAAwB5B,GACpB,MAAM,SAAEnV,EAAWpvB,OAAO,WAAE2H,EAAW,OAAER,EAAO,QAAE3B,IAAgBjU,KAAKyE,QAEjE8vC,EAAiBvB,EAAK/+B,EACtBm8B,EAFapwC,KAAKkwC,iBAEEE,OAAO76B,MACjC,IAAIkG,EACA9oB,EAoDJ,MAnDiB,SAAbkrC,EACIjoB,GACAjjB,EAAIqN,KAAKmU,MAAQF,EACE,SAAfmC,EACAqF,EAAY,OACU,WAAfrF,GACPqF,EAAY,SACZ9oB,GAAKy9C,EAAS,IAEd30B,EAAY,QACZ9oB,GAAKy9C,KAGTz9C,EAAIqN,KAAKmU,MAAQogC,EACE,SAAfn+B,EACAqF,EAAY,QACU,WAAfrF,GACPqF,EAAY,SACZ9oB,GAAKy9C,EAAS,IAEd30B,EAAY,OACZ9oB,EAAIqN,KAAKqU,OAGG,UAAbwpB,EACHjoB,GACAjjB,EAAIqN,KAAKqU,KAAOJ,EACG,SAAfmC,EACAqF,EAAY,QACU,WAAfrF,GACPqF,EAAY,SACZ9oB,GAAKy9C,EAAS,IAEd30B,EAAY,OACZ9oB,GAAKy9C,KAGTz9C,EAAIqN,KAAKqU,KAAOkgC,EACG,SAAfn+B,EACAqF,EAAY,OACU,WAAfrF,GACPqF,EAAY,SACZ9oB,GAAKy9C,EAAS,IAEd30B,EAAY,QACZ9oB,EAAIqN,KAAKmU,QAIjBsH,EAAY,QAET,CACHA,YACA9oB,IAER,CACHqiD,oBACO,GAAIh1C,KAAKyE,QAAQgK,MAAMmH,OACnB,OAEJ,MAAMlH,EAAQ1O,KAAK0O,MACbmvB,EAAW79B,KAAKyE,QAAQo5B,SAC9B,MAAiB,SAAbA,GAAoC,UAAbA,EAChB,CACH3pB,IAAK,EACLG,KAAMrU,KAAKqU,KACXD,OAAQ1F,EAAM+I,OACdtD,MAAOnU,KAAKmU,OAGH,QAAb0pB,GAAmC,WAAbA,EACf,CACH3pB,IAAKlU,KAAKkU,IACVG,KAAM,EACND,OAAQpU,KAAKoU,OACbD,MAAOzF,EAAM6G,YALrB,CAQJ,CACH0/B,iBACO,MAAM,IAAEjkC,EAAMvM,SAAS,gBAAEwL,GAAmB,KAAEoE,EAAK,IAAEH,EAAI,MAAEqB,EAAM,OAAEkC,GAAYzX,KAC3EiQ,IACAe,EAAIsG,OACJtG,EAAI+J,UAAY9K,EAChBe,EAAImK,SAAS9G,EAAMH,EAAKqB,EAAOkC,GAC/BzG,EAAI0G,UAEZ,CACAw9B,qBAAqB7yC,GACjB,MAAMuS,EAAO5U,KAAKyE,QAAQmQ,KAC1B,IAAK5U,KAAKgwC,eAAiBp7B,EAAKN,QAC5B,OAAO,EAEX,MACMtQ,EADQhE,KAAKyO,MACC0mC,WAAW/zC,GAAIA,EAAEiB,QAAUA,IAC/C,OAAI2B,GAAS,EACI4Q,EAAKwL,WAAWpgB,KAAKqX,WAAWrT,IACjC6Q,UAET,CACX,CACHugC,SAASjd,GACF,MAAMvjB,EAAO5U,KAAKyE,QAAQmQ,KACpB5D,EAAMhR,KAAKgR,IACXia,EAAQjrB,KAAKkrC,iBAAmBlrC,KAAKkrC,eAAiBlrC,KAAK+yC,sBAAsB5a,IACvF,IAAInmC,EAAG4R,EACP,MAAMyxC,EAAW,CAAC32C,EAAIC,EAAIiS,KACjBA,EAAM2E,OAAU3E,EAAMhQ,QAG3BoQ,EAAIsG,OACJtG,EAAI6D,UAAYjE,EAAM2E,MACtBvE,EAAI8J,YAAclK,EAAMhQ,MACxBoQ,EAAIskC,YAAY1kC,EAAM6Y,YAAc,IACpCzY,EAAIukC,eAAiB3kC,EAAM8Y,iBAC3B1Y,EAAIuH,YACJvH,EAAI2H,OAAOja,EAAG/L,EAAG+L,EAAG2G,GACpB2L,EAAI4H,OAAOja,EAAGhM,EAAGgM,EAAG0G,GACpB2L,EAAIiI,SACJjI,EAAI0G,UAAS,EAEjB,GAAI9C,EAAKN,QACL,IAAItiB,EAAI,EAAG4R,EAAOqnB,EAAM9sB,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC1C,MAAMqU,EAAO4kB,EAAMj5B,GACf4iB,EAAKE,iBACLugC,EAAS,CACL1iD,EAAG0T,EAAKstC,GACRtuC,EAAGgB,EAAKutC,IACT,CACCjhD,EAAG0T,EAAKwtC,GACRxuC,EAAGgB,EAAKytC,IACTztC,GAEHuO,EAAKG,WACLsgC,EAAS,CACL1iD,EAAG0T,EAAKktC,IACRluC,EAAGgB,EAAKmtC,KACT,CACC7gD,EAAG0T,EAAKotC,IACRpuC,EAAGgB,EAAKqtC,KACT,CACC9yC,MAAOyF,EAAK8O,UACZI,MAAOlP,EAAK4O,UACZwU,WAAYpjB,EAAKguC,eACjB3qB,iBAAkBrjB,EAAKiuC,sBAGnC,CAER,CACHkB,aACO,MAAM,MAAE9mC,EAAM,IAAEsC,EAAMvM,SAAS,OAAE2Q,EAAO,KAAER,IAAa5U,KACjDizC,EAAa79B,EAAOgL,WAAWpgB,KAAKqX,cACpC67B,EAAY99B,EAAOd,QAAU2+B,EAAW19B,MAAQ,EACtD,IAAK29B,EACD,OAEJ,MAAMuC,EAAgB7gC,EAAKwL,WAAWpgB,KAAKqX,WAAW,IAAIxC,UACpDw+B,EAAcrzC,KAAK4rC,aACzB,IAAI+H,EAAIE,EAAID,EAAIE,EACZ9zC,KAAK4iC,gBACL+Q,EAAK58B,GAAYrI,EAAO1O,KAAKqU,KAAM6+B,GAAaA,EAAY,EAC5DW,EAAK98B,GAAYrI,EAAO1O,KAAKmU,MAAOshC,GAAiBA,EAAgB,EACrE7B,EAAKE,EAAKT,IAEVO,EAAK78B,GAAYrI,EAAO1O,KAAKkU,IAAKg/B,GAAaA,EAAY,EAC3DY,EAAK/8B,GAAYrI,EAAO1O,KAAKoU,OAAQqhC,GAAiBA,EAAgB,EACtE9B,EAAKE,EAAKR,GAEdriC,EAAIsG,OACJtG,EAAI6D,UAAYo+B,EAAW19B,MAC3BvE,EAAI8J,YAAcm4B,EAAWryC,MAC7BoQ,EAAIuH,YACJvH,EAAI2H,OAAOg7B,EAAIC,GACf5iC,EAAI4H,OAAOi7B,EAAIC,GACf9iC,EAAIiI,SACJjI,EAAI0G,SACR,CACHg+B,WAAWvd,GAEJ,IADoBn4B,KAAKyE,QAAQgK,MAChB6F,QACb,OAEJ,MAAMtD,EAAMhR,KAAKgR,IACXqI,EAAOrZ,KAAKg1C,oBACd37B,GACAE,GAASvI,EAAKqI,GAElB,MAAM4R,EAAQjrB,KAAKqsC,cAAclU,GACjC,IAAK,MAAM9xB,KAAQ4kB,EAAM,CACrB,MAAM0qB,EAAoBtvC,EAAK5B,QACzBmtC,EAAWvrC,EAAKqK,KAGtB0K,GAAWpK,EAFG3K,EAAKwxB,MAEI,EADbxxB,EAAKquC,WACc9C,EAAU+D,EAC3C,CACIt8B,GACAG,GAAWxI,EAEnB,CACH4kC,YACO,MAAM,IAAE5kC,EAAMvM,SAAS,SAAEo5B,EAAS,MAAEroB,EAAM,QAAEhS,IAAgBxD,KAC5D,IAAKwV,EAAMlB,QACP,OAEJ,MAAM5D,EAAOwM,GAAO1H,EAAM9E,MACpBuD,EAAUgJ,GAAUzH,EAAMvB,SAC1BrJ,EAAQ4K,EAAM5K,MACpB,IAAI2J,EAAS7D,EAAKG,WAAa,EACd,WAAbgtB,GAAsC,WAAbA,GAAyBn7B,EAASm7B,IAC3DtpB,GAAUN,EAAQG,OACd7hB,EAAQijB,EAAMC,QACdlB,GAAU7D,EAAKG,YAAc2E,EAAMC,KAAKtX,OAAS,KAGrDoW,GAAUN,EAAQC,IAEtB,MAAM,OAAE2hC,EAAO,OAAEC,EAAO,SAAEh6B,EAAS,SAAE5D,GAnlC7C,SAAmBpG,EAAOyC,EAAQspB,EAAUjzB,GACxC,MAAM,IAAEsJ,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,MAAEzF,GAAWoD,GAC3C,UAAEqmB,EAAU,OAAEpmB,GAAYrD,EAChC,IACIoN,EAAU+5B,EAAQC,EADlB59B,EAAW,EAEf,MAAMT,EAASrD,EAASF,EAClBqB,EAAQpB,EAAQE,EACtB,GAAIvC,EAAM8wB,eAAgB,CAEtB,GADAiT,EAASlrC,GAAeC,EAAOyJ,EAAMF,GACjCzR,EAASm7B,GAAW,CACpB,MAAMkW,EAAiBh2C,OAAOsB,KAAKw+B,GAAU,GACvCx7B,EAAQw7B,EAASkW,GACvB+B,EAAS/jC,EAAOgiC,GAAgBjY,iBAAiBz5B,GAASoV,EAASlD,CACvE,MACIuhC,EADoB,WAAbjY,GACG1F,EAAU/jB,OAAS+jB,EAAUjkB,KAAO,EAAIuD,EAASlD,EAElDg1B,GAAez3B,EAAO+rB,EAAUtpB,GAE7CuH,EAAW3H,EAAQE,CACvB,KAAO,CACH,GAAI3R,EAASm7B,GAAW,CACpB,MAAMkW,EAAiBh2C,OAAOsB,KAAKw+B,GAAU,GACvCx7B,EAAQw7B,EAASkW,GACvB8B,EAAS9jC,EAAOgiC,GAAgBjY,iBAAiBz5B,GAASkT,EAAQhB,CACtE,MACIshC,EADoB,WAAbhY,GACG1F,EAAU9jB,KAAO8jB,EAAUhkB,OAAS,EAAIoB,EAAQhB,EAEjDg1B,GAAez3B,EAAO+rB,EAAUtpB,GAE7CuhC,EAASnrC,GAAeC,EAAOwJ,EAAQF,GACvCgE,EAAwB,SAAb2lB,GAAuBh3B,GAAUA,EAChD,CACA,MAAO,CACHgvC,SACAC,SACAh6B,WACA5D,WAER,CA6iC2D69B,CAAU/1C,KAAMuU,EAAQspB,EAAUjzB,GACrFwQ,GAAWpK,EAAKwE,EAAMC,KAAM,EAAG,EAAG/E,EAAM,CACpC9P,MAAO4U,EAAM5U,MACbkb,WACA5D,WACAuD,UAAW6uB,GAAW1/B,EAAOizB,EAAUr6B,GACvCkY,aAAc,SACdF,YAAa,CACTq6B,EACAC,IAGZ,CACA5qB,KAAKiN,GACIn4B,KAAKgwC,eAGVhwC,KAAKi1C,iBACLj1C,KAAKo1C,SAASjd,GACdn4B,KAAKw1C,aACLx1C,KAAK41C,YACL51C,KAAK01C,WAAWvd,GACpB,CACHiK,UACO,MAAM/nB,EAAOra,KAAKyE,QACZuxC,EAAK37B,EAAK5L,OAAS4L,EAAK5L,MAAM4zB,GAAK,EACnC4T,EAAKjzC,EAAeqX,EAAKzF,MAAQyF,EAAKzF,KAAKytB,GAAI,GAC/C6T,EAAKlzC,EAAeqX,EAAKjF,QAAUiF,EAAKjF,OAAOitB,EAAG,GACxD,OAAKriC,KAAKgwC,cAAgBhwC,KAAKkrB,OAASuf,GAAMnoC,UAAU4oB,KAUjD,CACH,CACImX,EAAG4T,EACH/qB,KAAOiN,IACHn4B,KAAKi1C,iBACLj1C,KAAKo1C,SAASjd,GACdn4B,KAAK41C,WAAW,GAGxB,CACIvT,EAAG6T,EACHhrB,KAAM,KACFlrB,KAAKw1C,YAAY,GAGzB,CACInT,EAAG2T,EACH9qB,KAAOiN,IACHn4B,KAAK01C,WAAWvd,EAAU,IA3B3B,CACH,CACIkK,EAAG2T,EACH9qB,KAAOiN,IACHn4B,KAAKkrB,KAAKiN,EAAU,GA2BxC,CACH3H,wBAAwBvxB,GACjB,MAAMgtC,EAAQjsC,KAAK0O,MAAMqvB,+BACnBoY,EAASn2C,KAAKgxB,KAAO,SACrBhL,EAAS,GACf,IAAIh0B,EAAG4R,EACP,IAAI5R,EAAI,EAAG4R,EAAOqoC,EAAM9tC,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC1C,MAAM89B,EAAOmc,EAAMj6C,GACf89B,EAAKqmB,KAAYn2C,KAAKmC,IAAQlD,GAAQ6wB,EAAK7wB,OAASA,GACpD+mB,EAAOpgB,KAAKkqB,EAEpB,CACA,OAAO9J,CACX,CACHisB,wBAAwBjuC,GAEjB,OAAOkZ,GADMld,KAAKyE,QAAQgK,MAAM2R,WAAWpgB,KAAKqX,WAAWrT,IACxC0M,KACvB,CACH0lC,aACO,MAAMC,EAAWr2C,KAAKiyC,wBAAwB,GAAGphC,WACjD,OAAQ7Q,KAAK4iC,eAAiB5iC,KAAKuV,MAAQvV,KAAKyX,QAAU4+B,CAC9D,EAGJ,MAAMC,GACFt3C,YAAYC,EAAM2Q,EAAOuC,GACrBnS,KAAKf,KAAOA,EACZe,KAAK4P,MAAQA,EACb5P,KAAKmS,SAAWA,EAChBnS,KAAKirB,MAAQltB,OAAOoG,OAAO,KAC/B,CACAoyC,UAAUt3C,GACN,OAAOlB,OAAOuE,UAAUk0C,cAAch0C,KAAKxC,KAAKf,KAAKqD,UAAWrD,EAAKqD,UACzE,CACHm0C,SAASpwC,GACF,MAAMvI,EAAQC,OAAOwhB,eAAelZ,GACpC,IAAIqwC,GAiEZ,SAA2B54C,GACvB,MAAO,OAAQA,GAAS,aAAcA,CAC1C,EAlEY64C,CAAkB74C,KAClB44C,EAAc12C,KAAKy2C,SAAS34C,IAEhC,MAAMmtB,EAAQjrB,KAAKirB,MACb9oB,EAAKkE,EAAKlE,GACVyN,EAAQ5P,KAAK4P,MAAQ,IAAMzN,EACjC,IAAKA,EACD,MAAM,IAAIqe,MAAM,2BAA6Bna,GAEjD,OAAIlE,KAAM8oB,IAGVA,EAAM9oB,GAAMkE,EAyBpB,SAA0BA,EAAMuJ,EAAO8mC,GACnC,MAAME,EAAehyC,EAAM7G,OAAOoG,OAAO,MAAO,CAC5CuyC,EAAc1jC,GAASjF,IAAI2oC,GAAe,CAAC,EAC3C1jC,GAASjF,IAAI6B,GACbvJ,EAAK2M,WAETA,GAAS9E,IAAI0B,EAAOgnC,GAChBvwC,EAAKwwC,eAOb,SAAuBjnC,EAAOknC,GAC1B/4C,OAAOsB,KAAKy3C,GAAQ1sC,SAAS4d,IACzB,MAAM+uB,EAAgB/uB,EAASviB,MAAM,KAC/BuxC,EAAaD,EAAczrB,MAC3B2rB,EAAc,CAChBrnC,GACF2rB,OAAOwb,GAAet2B,KAAK,KACvBjb,EAAQsxC,EAAO9uB,GAAUviB,MAAM,KAC/B8M,EAAa/M,EAAM8lB,MACnBhZ,EAAc9M,EAAMib,KAAK,KAC/BzN,GAASZ,MAAM6kC,EAAaD,EAAY1kC,EAAaC,EAAW,GAExE,CAlBQ2kC,CAActnC,EAAOvJ,EAAKwwC,eAE1BxwC,EAAKoJ,aACLuD,GAASd,SAAStC,EAAOvJ,EAAKoJ,YAEtC,CArCQ0nC,CAAiB9wC,EAAMuJ,EAAO8mC,GAC1B12C,KAAKmS,UACLa,GAASb,SAAS9L,EAAKlE,GAAIkE,EAAKmJ,YALzBI,CAQf,CACH7B,IAAI5L,GACG,OAAOnC,KAAKirB,MAAM9oB,EACtB,CACHi1C,WAAW/wC,GACJ,MAAM4kB,EAAQjrB,KAAKirB,MACb9oB,EAAKkE,EAAKlE,GACVyN,EAAQ5P,KAAK4P,MACfzN,KAAM8oB,UACCA,EAAM9oB,GAEbyN,GAASzN,KAAM6Q,GAASpD,YACjBoD,GAASpD,GAAOzN,GACnBnC,KAAKmS,iBACE3C,GAAUrN,GAG7B,EAiCJ,MAAMk1C,GACFr4C,cACIgB,KAAKs3C,YAAc,IAAIhB,GAActkB,GAAmB,YAAY,GACpEhyB,KAAKwQ,SAAW,IAAI8lC,GAAcxN,GAAS,YAC3C9oC,KAAK4R,QAAU,IAAI0kC,GAAcv4C,OAAQ,WACzCiC,KAAK+R,OAAS,IAAIukC,GAAc7L,GAAO,UACvCzqC,KAAKu3C,iBAAmB,CACpBv3C,KAAKs3C,YACLt3C,KAAK+R,OACL/R,KAAKwQ,SAEb,CACHkQ,OAAOvd,GACAnD,KAAKw3C,MAAM,WAAYr0C,EAC3B,CACAgpB,UAAUhpB,GACNnD,KAAKw3C,MAAM,aAAcr0C,EAC7B,CACHs0C,kBAAkBt0C,GACXnD,KAAKw3C,MAAM,WAAYr0C,EAAMnD,KAAKs3C,YACtC,CACHlkB,eAAejwB,GACRnD,KAAKw3C,MAAM,WAAYr0C,EAAMnD,KAAKwQ,SACtC,CACHknC,cAAcv0C,GACPnD,KAAKw3C,MAAM,WAAYr0C,EAAMnD,KAAK4R,QACtC,CACH+lC,aAAax0C,GACNnD,KAAKw3C,MAAM,WAAYr0C,EAAMnD,KAAK+R,OACtC,CACH6lC,cAAcz1C,GACP,OAAOnC,KAAK63C,KAAK11C,EAAInC,KAAKs3C,YAAa,aAC3C,CACHQ,WAAW31C,GACJ,OAAOnC,KAAK63C,KAAK11C,EAAInC,KAAKwQ,SAAU,UACxC,CACHunC,UAAU51C,GACH,OAAOnC,KAAK63C,KAAK11C,EAAInC,KAAK4R,QAAS,SACvC,CACHomC,SAAS71C,GACF,OAAOnC,KAAK63C,KAAK11C,EAAInC,KAAK+R,OAAQ,QACtC,CACHkmC,qBAAqB90C,GACdnD,KAAKw3C,MAAM,aAAcr0C,EAAMnD,KAAKs3C,YACxC,CACHY,kBAAkB/0C,GACXnD,KAAKw3C,MAAM,aAAcr0C,EAAMnD,KAAKwQ,SACxC,CACH2nC,iBAAiBh1C,GACVnD,KAAKw3C,MAAM,aAAcr0C,EAAMnD,KAAK4R,QACxC,CACHwmC,gBAAgBj1C,GACTnD,KAAKw3C,MAAM,aAAcr0C,EAAMnD,KAAK+R,OACxC,CACHylC,MAAM1pB,EAAQ3qB,EAAMk1C,GACb,IACOl1C,GACLiH,SAASkuC,IACP,MAAMC,EAAMF,GAAiBr4C,KAAKw4C,oBAAoBF,GAClDD,GAAiBE,EAAIhC,UAAU+B,IAAQC,IAAQv4C,KAAK4R,SAAW0mC,EAAIn2C,GACnEnC,KAAKy4C,MAAM3qB,EAAQyqB,EAAKD,GAExBh1C,EAAKg1C,GAAMjyC,IACP,MAAMqyC,EAAUL,GAAiBr4C,KAAKw4C,oBAAoBnyC,GAC1DrG,KAAKy4C,MAAM3qB,EAAQ4qB,EAASryC,EAAK,GAEzC,GAER,CACHoyC,MAAM3qB,EAAQ6qB,EAAUC,GACjB,MAAMC,EAAc9yC,GAAY+nB,GAChC7qB,EAAS21C,EAAU,SAAWC,GAAc,GAAID,GAChDD,EAAS7qB,GAAQ8qB,GACjB31C,EAAS21C,EAAU,QAAUC,GAAc,GAAID,EACnD,CACHJ,oBAAoBv5C,GACb,IAAI,IAAIjN,EAAI,EAAGA,EAAIgO,KAAKu3C,iBAAiBp5C,OAAQnM,IAAI,CACjD,MAAMumD,EAAMv4C,KAAKu3C,iBAAiBvlD,GAClC,GAAIumD,EAAIhC,UAAUt3C,GACd,OAAOs5C,CAEf,CACA,OAAOv4C,KAAK4R,OAChB,CACHimC,KAAK11C,EAAIk2C,EAAep5C,GACjB,MAAMoH,EAAOgyC,EAActqC,IAAI5L,GAC/B,QAAa7B,IAAT+F,EACA,MAAM,IAAIma,MAAM,IAAMre,EAAK,yBAA2BlD,EAAO,KAEjE,OAAOoH,CACX,EAEJ,IAAIsyC,GAA2B,IAAItB,GAEnC,MAAMyB,GACF95C,cACIgB,KAAK+4C,MAAQ,EACjB,CACHC,OAAOtqC,EAAOuqC,EAAM91C,EAAM4d,GACN,eAATk4B,IACAj5C,KAAK+4C,MAAQ/4C,KAAKk5C,mBAAmBxqC,GAAO,GAC5C1O,KAAKoqB,QAAQpqB,KAAK+4C,MAAOrqC,EAAO,YAEpC,MAAMe,EAAcsR,EAAS/gB,KAAK8P,aAAapB,GAAOqS,OAAOA,GAAU/gB,KAAK8P,aAAapB,GACnFsX,EAAShmB,KAAKoqB,QAAQ3a,EAAaf,EAAOuqC,EAAM91C,GAKtD,MAJa,iBAAT81C,IACAj5C,KAAKoqB,QAAQ3a,EAAaf,EAAO,QACjC1O,KAAKoqB,QAAQpqB,KAAK+4C,MAAOrqC,EAAO,cAE7BsX,CACX,CACHoE,QAAQ3a,EAAaf,EAAOuqC,EAAM91C,GAC3BA,EAAOA,GAAQ,CAAC,EAChB,IAAK,MAAMg2C,KAAc1pC,EAAY,CACjC,MAAM2pC,EAASD,EAAWC,OAO1B,IAAyC,IAArCn2C,EANWm2C,EAAOH,GACP,CACXvqC,EACAvL,EACAg2C,EAAW10C,SAEc20C,IAAqBj2C,EAAKk2C,WACnD,OAAO,CAEf,CACA,OAAO,CACX,CACAC,aACSl3C,EAAcpC,KAAKo7B,UACpBp7B,KAAKu5C,UAAYv5C,KAAKo7B,OACtBp7B,KAAKo7B,YAAS96B,EAEtB,CACHwP,aAAapB,GACN,GAAI1O,KAAKo7B,OACL,OAAOp7B,KAAKo7B,OAEhB,MAAM3rB,EAAczP,KAAKo7B,OAASp7B,KAAKk5C,mBAAmBxqC,GAE1D,OADA1O,KAAKw5C,oBAAoB9qC,GAClBe,CACX,CACAypC,mBAAmBxqC,EAAOqgB,GACtB,MAAMf,EAAStf,GAASA,EAAMsf,OACxBvpB,EAAUzB,EAAegrB,EAAOvpB,SAAWupB,EAAOvpB,QAAQmN,QAAS,CAAC,GACpEA,EAWb,SAAoBoc,GACjB,MAAMyrB,EAAW,CAAC,EACZ7nC,EAAU,GACVvS,EAAOtB,OAAOsB,KAAKs5C,GAAS/mC,QAAQqZ,OAC1C,IAAI,IAAIj5B,EAAI,EAAGA,EAAIqN,EAAKlB,OAAQnM,IAC5B4f,EAAQhM,KAAK+yC,GAASZ,UAAU14C,EAAKrN,KAEzC,MAAM8gB,EAAQkb,EAAOpc,SAAW,GAChC,IAAI,IAAI5f,EAAI,EAAGA,EAAI8gB,EAAM3U,OAAQnM,IAAI,CACjC,MAAMonD,EAAStmC,EAAM9gB,IACY,IAA7B4f,EAAQrN,QAAQ60C,KAChBxnC,EAAQhM,KAAKwzC,GACbK,EAASL,EAAOj3C,KAAM,EAE9B,CACA,MAAO,CACHyP,UACA6nC,WAER,CA9BwBC,CAAW1rB,GAC3B,OAAmB,IAAZvpB,GAAsBsqB,EAuCrC,SAA2BrgB,GAAO,QAAEkD,EAAQ,SAAE6nC,GAAah1C,EAASsqB,GAChE,MAAM/I,EAAS,GACT3V,EAAU3B,EAAM2I,aACtB,IAAK,MAAM+hC,KAAUxnC,EAAQ,CACzB,MAAMzP,EAAKi3C,EAAOj3C,GACZkY,EAAOs/B,GAAQl1C,EAAQtC,GAAK4sB,GACrB,OAAT1U,GAGJ2L,EAAOpgB,KAAK,CACRwzC,SACA30C,QAASm1C,GAAWlrC,EAAMsf,OAAQ,CAC9BorB,SACAtmC,MAAO2mC,EAASt3C,IACjBkY,EAAMhK,IAEjB,CACA,OAAO2V,CACX,CAzDgD6zB,CAAkBnrC,EAAOkD,EAASnN,EAASsqB,GAAhD,EACvC,CACHyqB,oBAAoB9qC,GACb,MAAMorC,EAAsB95C,KAAKu5C,WAAa,GACxC9pC,EAAczP,KAAKo7B,OACnBqT,EAAO,CAAC59C,EAAGC,IAAID,EAAEkwB,QAAQpuB,IAAK7B,EAAEipD,MAAM10C,GAAI1S,EAAEymD,OAAOj3C,KAAOkD,EAAE+zC,OAAOj3C,OACzEnC,KAAKoqB,QAAQqkB,EAAKqL,EAAqBrqC,GAAcf,EAAO,QAC5D1O,KAAKoqB,QAAQqkB,EAAKh/B,EAAaqqC,GAAsBprC,EAAO,QAChE,EAsBJ,SAASirC,GAAQl1C,EAASsqB,GACtB,OAAKA,IAAmB,IAAZtqB,GAGI,IAAZA,EACO,CAAC,EAELA,EALI,IAMf,CAoBA,SAASm1C,GAAW5rB,GAAQ,OAAEorB,EAAO,MAAEtmC,GAAUuH,EAAMhK,GACnD,MAAMhR,EAAO2uB,EAAOgsB,gBAAgBZ,GAC9Bt7B,EAASkQ,EAAO2H,gBAAgBtb,EAAMhb,GAI5C,OAHIyT,GAASsmC,EAAOpmC,UAChB8K,EAAOlY,KAAKwzC,EAAOpmC,UAEhBgb,EAAO4H,eAAe9X,EAAQzN,EAAS,CAC1C,IACD,CACC+Q,YAAY,EACZC,WAAW,EACXH,SAAS,GAEjB,CAEA,SAAS+4B,GAAah7C,EAAMwF,GACxB,MAAMy1C,EAAkBlnC,GAAS7C,SAASlR,IAAS,CAAC,EAEpD,QADwBwF,EAAQ0L,UAAY,CAAC,GAAGlR,IAAS,CAAC,GACpCkS,WAAa1M,EAAQ0M,WAAa+oC,EAAgB/oC,WAAa,GACzF,CAaA,SAASgpC,GAAch4C,GACnB,GAAW,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,EAC5B,OAAOA,CAEf,CASA,SAASi4C,GAAcj4C,KAAOk4C,GAC1B,GAAIF,GAAch4C,GACd,OAAOA,EAEX,IAAK,MAAMkY,KAAQggC,EAAa,CAC5B,MAAMrpB,EAAO3W,EAAK2W,OAZL,SADK6M,EAayBxjB,EAAKwjB,WAZb,WAAbA,EACf,IAEM,SAAbA,GAAoC,UAAbA,EAChB,SADX,IASiE17B,EAAGhE,OAAS,GAAKg8C,GAAch4C,EAAG,GAAGrC,eAClG,GAAIkxB,EACA,OAAOA,CAEf,CAjBJ,IAA0B6M,EAkBtB,MAAM,IAAIrd,MAAM,6BAA6Bre,uDACjD,CACA,SAASm4C,GAAmBn4C,EAAI6uB,EAAMuC,GAClC,GAAIA,EAAQvC,EAAO,YAAc7uB,EAC7B,MAAO,CACH6uB,OAGZ,CAgEA,SAASupB,GAAYvsB,GACjB,MAAMvpB,EAAUupB,EAAOvpB,UAAYupB,EAAOvpB,QAAU,CAAC,GACrDA,EAAQmN,QAAU5O,EAAeyB,EAAQmN,QAAS,CAAC,GACnDnN,EAAQsN,OAzDZ,SAA0Bic,EAAQvpB,GAC9B,MAAM+1C,EAAgBhrC,GAAUwe,EAAO/uB,OAAS,CAC5C8S,OAAQ,CAAC,GAEP0oC,EAAeh2C,EAAQsN,QAAU,CAAC,EAClC2oC,EAAiBT,GAAajsB,EAAO/uB,KAAMwF,GAC3CsN,EAAShU,OAAOoG,OAAO,MA8C7B,OA7CApG,OAAOsB,KAAKo7C,GAAcrwC,SAASjI,IAC/B,MAAMw4C,EAAYF,EAAat4C,GAC/B,IAAKO,EAASi4C,GACV,OAAOv9B,QAAQw9B,MAAM,0CAA0Cz4C,KAEnE,GAAIw4C,EAAU56B,OACV,OAAO3C,QAAQC,KAAK,kDAAkDlb,KAE1E,MAAM6uB,EAAOopB,GAAcj4C,EAAIw4C,EAxBvC,SAAkCx4C,EAAI6rB,GAClC,GAAIA,EAAOvX,MAAQuX,EAAOvX,KAAKtG,SAAU,CACrC,MAAM0qC,EAAU7sB,EAAOvX,KAAKtG,SAAS4Q,QAAQ/vB,GAAIA,EAAE2iC,UAAYxxB,GAAMnR,EAAE6iC,UAAY1xB,IACnF,GAAI04C,EAAQ18C,OACR,OAAOm8C,GAAmBn4C,EAAI,IAAK04C,EAAQ,KAAOP,GAAmBn4C,EAAI,IAAK04C,EAAQ,GAE9F,CACA,MAAO,CAAC,CACZ,CAgBkDC,CAAyB34C,EAAI6rB,GAAShb,GAASjB,OAAO4oC,EAAU17C,OACpG87C,EA5Dd,SAAmC/pB,EAAM7f,GACrC,OAAO6f,IAAS7f,EAAY,UAAY,SAC5C,CA0D0B6pC,CAA0BhqB,EAAM0pB,GAC5CO,EAAsBT,EAAczoC,QAAU,CAAC,EACrDA,EAAO5P,GAAM6C,EAAQjH,OAAOoG,OAAO,MAAO,CACtC,CACI6sB,QAEJ2pB,EACAM,EAAoBjqB,GACpBiqB,EAAoBF,IACtB,IAEN/sB,EAAOvX,KAAKtG,SAAS/F,SAASmpB,IAC1B,MAAMt0B,EAAOs0B,EAAQt0B,MAAQ+uB,EAAO/uB,KAC9BkS,EAAYoiB,EAAQpiB,WAAa8oC,GAAah7C,EAAMwF,GAEpDw2C,GADkBzrC,GAAUvQ,IAAS,CAAC,GACA8S,QAAU,CAAC,EACvDhU,OAAOsB,KAAK47C,GAAqB7wC,SAAS8wC,IACtC,MAAMlqB,EAtFlB,SAAmC7uB,EAAIgP,GACnC,IAAI6f,EAAO7uB,EAMX,MALW,YAAPA,EACA6uB,EAAO7f,EACO,YAAPhP,IACP6uB,EAAqB,MAAd7f,EAAoB,IAAM,KAE9B6f,CACX,CA8EyBmqB,CAA0BD,EAAW/pC,GAC5ChP,EAAKoxB,EAAQvC,EAAO,WAAaA,EACvCjf,EAAO5P,GAAM4P,EAAO5P,IAAOpE,OAAOoG,OAAO,MACzCa,EAAQ+M,EAAO5P,GAAK,CAChB,CACI6uB,QAEJypB,EAAat4C,GACb84C,EAAoBC,IACtB,GACJ,IAENn9C,OAAOsB,KAAK0S,GAAQ3H,SAAS9F,IACzB,MAAMwN,EAAQC,EAAOzN,GACrBU,EAAQ8M,EAAO,CACXkB,GAASjB,OAAOD,EAAM7S,MACtB+T,GAASlB,OACX,IAECC,CACX,CAIqBqpC,CAAiBptB,EAAQvpB,EAC9C,CACA,SAAS42C,GAAS5kC,GAId,OAHAA,EAAOA,GAAQ,CAAC,GACXtG,SAAWsG,EAAKtG,UAAY,GACjCsG,EAAK2f,OAAS3f,EAAK2f,QAAU,GACtB3f,CACX,CAOA,MAAM6kC,GAAW,IAAI/tC,IACfguC,GAAa,IAAIp7B,IACvB,SAASq7B,GAAW7tC,EAAU8tC,GAC1B,IAAIp8C,EAAOi8C,GAASvtC,IAAIJ,GAMxB,OALKtO,IACDA,EAAOo8C,IACPH,GAASptC,IAAIP,EAAUtO,GACvBk8C,GAAW76B,IAAIrhB,IAEZA,CACX,CACA,MAAMq8C,GAAa,CAACxtC,EAAK9N,EAAKkE,KAC1B,MAAM+V,EAAO/U,GAAiBlF,EAAKkE,QACtBhE,IAAT+Z,GACAnM,EAAIwS,IAAIrG,EACZ,EAEJ,MAAMshC,GACF38C,YAAYgvB,GACRhuB,KAAK47C,QAzBb,SAAoB5tB,GAIhB,OAHAA,EAASA,GAAU,CAAC,GACbvX,KAAO4kC,GAASrtB,EAAOvX,MAC9B8jC,GAAYvsB,GACLA,CACX,CAoBuB6tB,CAAW7tB,GAC1BhuB,KAAK87C,YAAc,IAAIvuC,IACvBvN,KAAK+7C,eAAiB,IAAIxuC,GAC9B,CACI+C,eACA,OAAOtQ,KAAK47C,QAAQtrC,QACxB,CACIrR,WACA,OAAOe,KAAK47C,QAAQ38C,IACxB,CACIA,SAAKA,GACLe,KAAK47C,QAAQ38C,KAAOA,CACxB,CACIwX,WACA,OAAOzW,KAAK47C,QAAQnlC,IACxB,CACIA,SAAKA,GACLzW,KAAK47C,QAAQnlC,KAAO4kC,GAAS5kC,EACjC,CACIhS,cACA,OAAOzE,KAAK47C,QAAQn3C,OACxB,CACIA,YAAQA,GACRzE,KAAK47C,QAAQn3C,QAAUA,CAC3B,CACImN,cACA,OAAO5R,KAAK47C,QAAQhqC,OACxB,CACA0b,SACI,MAAMU,EAAShuB,KAAK47C,QACpB57C,KAAKg8C,aACLzB,GAAYvsB,EAChB,CACAguB,aACIh8C,KAAK87C,YAAYG,QACjBj8C,KAAK+7C,eAAeE,OACxB,CACHvmB,iBAAiBwmB,GACV,OAAOV,GAAWU,GAAa,IAAI,CAC3B,CACI,YAAYA,IACZ,MAGhB,CACHhjB,0BAA0BgjB,EAAajjB,GAChC,OAAOuiB,GAAW,GAAGU,gBAA0BjjB,KAAc,IAAI,CACzD,CACI,YAAYijB,iBAA2BjjB,IACvC,eAAeA,KAEnB,CACI,YAAYijB,IACZ,MAGhB,CACHrjB,wBAAwBqjB,EAAavjB,GAC9B,OAAO6iB,GAAW,GAAGU,KAAevjB,KAAe,IAAI,CAC/C,CACI,YAAYujB,cAAwBvjB,IACpC,YAAYujB,IACZ,YAAYvjB,IACZ,MAGhB,CACHqhB,gBAAgBZ,GACT,MAAMj3C,EAAKi3C,EAAOj3C,GAElB,OAAOq5C,GAAW,GADLx7C,KAAKf,eACkBkD,KAAM,IAAI,CACtC,CACI,WAAWA,OACRi3C,EAAO+C,wBAA0B,MAGpD,CACHC,cAAcC,EAAWC,GAClB,MAAMR,EAAc97C,KAAK87C,YACzB,IAAI19B,EAAQ09B,EAAY/tC,IAAIsuC,GAK5B,OAJKj+B,IAASk+B,IACVl+B,EAAQ,IAAI7Q,IACZuuC,EAAY5tC,IAAImuC,EAAWj+B,IAExBA,CACX,CACHuX,gBAAgB0mB,EAAWE,EAAUD,GAC9B,MAAM,QAAE73C,EAAQ,KAAExF,GAAUe,KACtBoe,EAAQpe,KAAKo8C,cAAcC,EAAWC,GACtCxqB,EAAS1T,EAAMrQ,IAAIwuC,GACzB,GAAIzqB,EACA,OAAOA,EAEX,MAAMhU,EAAS,IAAIqC,IACnBo8B,EAASnyC,SAAS/K,IACVg9C,IACAv+B,EAAO4C,IAAI27B,GACXh9C,EAAK+K,SAAS9F,GAAMo3C,GAAW59B,EAAQu+B,EAAW/3C,MAEtDjF,EAAK+K,SAAS9F,GAAMo3C,GAAW59B,EAAQrZ,EAASH,KAChDjF,EAAK+K,SAAS9F,GAAMo3C,GAAW59B,EAAQtO,GAAUvQ,IAAS,CAAC,EAAGqF,KAC9DjF,EAAK+K,SAAS9F,GAAMo3C,GAAW59B,EAAQ9K,GAAU1O,KACjDjF,EAAK+K,SAAS9F,GAAMo3C,GAAW59B,EAAQrO,GAAanL,IAAK,IAE7D,MAAMwF,EAAQxX,MAAMmL,KAAKqgB,GAOzB,OANqB,IAAjBhU,EAAM3L,QACN2L,EAAMlE,KAAK7H,OAAOoG,OAAO,OAEzBo3C,GAAWj1C,IAAIi2C,IACfn+B,EAAMlQ,IAAIquC,EAAUzyC,GAEjBA,CACX,CACH0yC,oBACO,MAAM,QAAE/3C,EAAQ,KAAExF,GAAUe,KAC5B,MAAO,CACHyE,EACA+K,GAAUvQ,IAAS,CAAC,EACpB+T,GAAS7C,SAASlR,IAAS,CAAC,EAC5B,CACIA,QAEJ+T,GACAvD,GAER,CACHqpB,oBAAoBhb,EAAQzgB,EAAOgT,EAAS0N,EAAW,CAChD,KAEA,MAAMiI,EAAS,CACX0I,SAAS,IAEP,SAAEnpB,EAAS,YAAEk3C,GAAiBC,GAAY18C,KAAK+7C,eAAgBj+B,EAAQC,GAC7E,IAAItZ,EAAUc,GAsCtB,SAAqBwZ,EAAO1hB,GACxB,MAAM,aAAEijB,EAAa,YAAEO,GAAiB/Q,GAAaiP,GACrD,IAAK,MAAMhC,KAAQ1f,EAAM,CACrB,MAAM+jB,EAAad,EAAavD,GAC1BsE,EAAYR,EAAY9D,GACxB1a,GAASgf,GAAaD,IAAerC,EAAMhC,GACjD,GAAIqE,IAAelb,GAAW7D,IAAUs6C,GAAYt6C,KAAWgf,GAAa9uB,EAAQ8P,GAChF,OAAO,CAEf,CACA,OAAO,CACX,EAhDYu6C,CAAYr3C,EAAUlI,KACtB2oB,EAAO0I,SAAU,EAGjBjqB,EAAUmb,GAAera,EAFzB8K,EAAUnK,GAAWmK,GAAWA,IAAYA,EACxBrQ,KAAK41B,eAAe9X,EAAQzN,EAASosC,KAG7D,IAAK,MAAM1/B,KAAQ1f,EACf2oB,EAAOjJ,GAAQtY,EAAQsY,GAE3B,OAAOiJ,CACX,CACH4P,eAAe9X,EAAQzN,EAAS0N,EAAW,CACpC,IACD+B,GACC,MAAM,SAAEva,GAAcm3C,GAAY18C,KAAK+7C,eAAgBj+B,EAAQC,GAC/D,OAAOrb,EAAS2N,GAAWuP,GAAera,EAAU8K,OAAS/P,EAAWwf,GAAsBva,CAClG,EAEJ,SAASm3C,GAAYG,EAAe/+B,EAAQC,GACxC,IAAIK,EAAQy+B,EAAc9uC,IAAI+P,GACzBM,IACDA,EAAQ,IAAI7Q,IACZsvC,EAAc3uC,IAAI4P,EAAQM,IAE9B,MAAMzQ,EAAWoQ,EAAS0C,OAC1B,IAAIqR,EAAS1T,EAAMrQ,IAAIJ,GASvB,OARKmkB,IAEDA,EAAS,CACLvsB,SAFasY,GAAgBC,EAAQC,GAGrC0+B,YAAa1+B,EAASgD,QAAQ9f,IAAKA,EAAEnB,cAAcwP,SAAS,YAEhE8O,EAAMlQ,IAAIP,EAAUmkB,IAEjBA,CACX,CACA,MAAM6qB,GAAet6C,GAAQK,EAASL,IAAUtE,OAAOuwB,oBAAoBjsB,GAAO03C,MAAMz1C,GAAM4B,GAAW7D,EAAMiC,MAgBzGw4C,GAAkB,CACpB,MACA,SACA,OACA,QACA,aAEJ,SAASC,GAAqBlf,EAAU7M,GACpC,MAAoB,QAAb6M,GAAmC,WAAbA,IAAgE,IAAvCif,GAAgBv4C,QAAQs5B,IAA6B,MAAT7M,CACtG,CACA,SAASgsB,GAAcC,EAAIC,GACvB,OAAO,SAASrsD,EAAGC,GACf,OAAOD,EAAEosD,KAAQnsD,EAAEmsD,GAAMpsD,EAAEqsD,GAAMpsD,EAAEosD,GAAMrsD,EAAEosD,GAAMnsD,EAAEmsD,EACvD,CACJ,CACA,SAASE,GAAqB9sC,GAC1B,MAAM3B,EAAQ2B,EAAQ3B,MAChB0f,EAAmB1f,EAAMjK,QAAQuL,UACvCtB,EAAMghC,cAAc,eACpBzsC,EAASmrB,GAAoBA,EAAiBgvB,WAAY,CACtD/sC,GACD3B,EACP,CACA,SAAS2uC,GAAoBhtC,GACzB,MAAM3B,EAAQ2B,EAAQ3B,MAChB0f,EAAmB1f,EAAMjK,QAAQuL,UACvC/M,EAASmrB,GAAoBA,EAAiBkvB,WAAY,CACtDjtC,GACD3B,EACP,CACC,SAAS6uC,GAAUl3C,GAShB,OARIye,MAAqC,iBAATze,EAC5BA,EAAO0e,SAASy4B,eAAen3C,GACxBA,GAAQA,EAAKlI,SACpBkI,EAAOA,EAAK,IAEZA,GAAQA,EAAK+Q,SACb/Q,EAAOA,EAAK+Q,QAET/Q,CACX,CACA,MAAMo3C,GAAY,CAAC,EACbC,GAAYp5C,IACd,MAAM8S,EAASmmC,GAAUj5C,GACzB,OAAOvG,OAAOuQ,OAAOmvC,IAAW18B,QAAQhwB,GAAIA,EAAEqmB,SAAWA,IAAQkU,KAAK,EAE1E,SAASqyB,GAAgBv9C,EAAKqI,EAAO8xB,GACjC,MAAMl7B,EAAOtB,OAAOsB,KAAKe,GACzB,IAAK,MAAMkE,KAAOjF,EAAK,CACnB,MAAMu+C,GAAUt5C,EAChB,GAAIs5C,GAAUn1C,EAAO,CACjB,MAAMpG,EAAQjC,EAAIkE,UACXlE,EAAIkE,IACPi2B,EAAO,GAAKqjB,EAASn1C,KACrBrI,EAAIw9C,EAASrjB,GAAQl4B,EAE7B,CACJ,CACJ,CAUA,SAASw7C,GAAe/rC,EAAOqmB,EAAW2lB,GACtC,OAAOhsC,EAAMrN,QAAQiQ,KAAO5C,EAAMgsC,GAAS3lB,EAAU2lB,EACzD,CAaA,MAAMC,GACF9rB,gBAAkBjf,GAClBif,iBAAmBwrB,GACnBxrB,iBAAmBziB,GACnByiB,gBAAkB0mB,GAClB1mB,eA1FU,QA2FVA,gBAAkByrB,GAClBzrB,mBAAmBhH,GACf0tB,GAASj4B,OAAOuK,GAChB+yB,IACJ,CACA/rB,qBAAqBhH,GACjB0tB,GAASxsB,UAAUlB,GACnB+yB,IACJ,CACAh/C,YAAYqH,EAAM43C,GACd,MAAMjwB,EAAShuB,KAAKguB,OAAS,IAAI2tB,GAAOsC,GAClCC,EAAgBX,GAAUl3C,GAC1B83C,EAAgBT,GAASQ,GAC/B,GAAIC,EACA,MAAM,IAAI39B,MAAM,4CAA+C29B,EAAch8C,GAA7D,kDAA6Hg8C,EAAc/mC,OAAOjV,GAAK,oBAE3K,MAAMsC,EAAUupB,EAAO4H,eAAe5H,EAAOwuB,oBAAqBx8C,KAAKqX,cACvErX,KAAKsQ,SAAW,IAAK0d,EAAO1d,UAlnEpC,SAAyB8G,GACrB,OAAK0N,MAAgD,oBAApBs5B,iBAAmChnC,aAAkBgnC,gBAC3E5Z,GAEJ8C,EACX,CA6mEgD+W,CAAgBH,IACxDl+C,KAAKsQ,SAASi0B,aAAavW,GAC3B,MAAM3d,EAAUrQ,KAAKsQ,SAAS4zB,eAAega,EAAez5C,EAAQ0/B,aAC9D/sB,EAAS/G,GAAWA,EAAQ+G,OAC5BK,EAASL,GAAUA,EAAOK,OAC1BlC,EAAQ6B,GAAUA,EAAO7B,MAC/BvV,KAAKmC,GAAKD,IACVlC,KAAKgR,IAAMX,EACXrQ,KAAKoX,OAASA,EACdpX,KAAKuV,MAAQA,EACbvV,KAAKyX,OAASA,EACdzX,KAAKs+C,SAAW75C,EAChBzE,KAAKu+C,aAAev+C,KAAKmkC,YACzBnkC,KAAKoiC,QAAU,GACfpiC,KAAKw+C,UAAY,GACjBx+C,KAAK6wB,aAAUvwB,EACfN,KAAKwhC,MAAQ,GACbxhC,KAAKiX,6BAA0B3W,EAC/BN,KAAKm4B,eAAY73B,EACjBN,KAAKmrB,QAAU,GACfnrB,KAAKy+C,gBAAan+C,EAClBN,KAAK0+C,WAAa,CAAC,EAClB1+C,KAAK2+C,0BAAuBr+C,EAC7BN,KAAK4+C,gBAAkB,GACvB5+C,KAAK+R,OAAS,CAAC,EACf/R,KAAK6+C,SAAW,IAAI/F,GACpB94C,KAAKgoC,SAAW,CAAC,EACjBhoC,KAAK8+C,eAAiB,CAAC,EACvB9+C,KAAK++C,UAAW,EAChB/+C,KAAKs5B,yBAAsBh5B,EAC3BN,KAAK6yB,cAAWvyB,EAChBN,KAAKg/C,UDl8JT,SAAkB97C,EAAImQ,GACtB,IAAI4rC,EACJ,OAAO,YAAY97C,GAOf,OANIkQ,GACA6rC,aAAaD,GACbA,EAAUE,WAAWj8C,EAAImQ,EAAOlQ,IAEhCD,EAAGG,MAAMrD,KAAMmD,GAEZkQ,CACX,CACJ,CCu7JyB+rC,EAAU/tC,GAAOrR,KAAKstB,OAAOjc,IAAO5M,EAAQ46C,aAAe,GAC5Er/C,KAAK26B,aAAe,GACpB8iB,GAAUz9C,KAAKmC,IAAMnC,KAChBqQ,GAAY+G,GAIjBgV,GAAST,OAAO3rB,KAAM,WAAYm9C,IAClC/wB,GAAST,OAAO3rB,KAAM,WAAYq9C,IAClCr9C,KAAKs/C,cACDt/C,KAAK++C,UACL/+C,KAAKstB,UAPLlQ,QAAQw9B,MAAM,oEAStB,CACIzW,kBACA,MAAQ1/B,SAAS,YAAE0/B,EAAY,oBAAE3yB,GAAuB,MAAE+D,EAAM,OAAEkC,EAAO,aAAE8mC,GAAkBv+C,KAC7F,OAAKoC,EAAc+hC,GAGf3yB,GAAuB+sC,EAChBA,EAEJ9mC,EAASlC,EAAQkC,EAAS,KALtB0sB,CAMf,CACI1tB,WACA,OAAOzW,KAAKguB,OAAOvX,IACvB,CACIA,SAAKA,GACLzW,KAAKguB,OAAOvX,KAAOA,CACvB,CACIhS,cACA,OAAOzE,KAAKs+C,QAChB,CACI75C,YAAQA,GACRzE,KAAKguB,OAAOvpB,QAAUA,CAC1B,CACIk0C,eACA,OAAOA,EACX,CACH2G,cASO,OARAt/C,KAAK0vC,cAAc,cACf1vC,KAAKyE,QAAQoN,WACb7R,KAAK2T,SAELwT,GAAYnnB,KAAMA,KAAKyE,QAAQ2L,kBAEnCpQ,KAAKu/C,aACLv/C,KAAK0vC,cAAc,aACZ1vC,IACX,CACAi8C,QAEI,OADA9kC,GAAYnX,KAAKoX,OAAQpX,KAAKgR,KACvBhR,IACX,CACAisB,OAEI,OADAG,GAASH,KAAKjsB,MACPA,IACX,CACH2T,OAAO4B,EAAOkC,GACF2U,GAASpB,QAAQhrB,MAGlBA,KAAKw/C,kBAAoB,CACrBjqC,QACAkC,UAJJzX,KAAKy/C,QAAQlqC,EAAOkC,EAO5B,CACAgoC,QAAQlqC,EAAOkC,GACX,MAAMhT,EAAUzE,KAAKyE,QACf2S,EAASpX,KAAKoX,OACd+sB,EAAc1/B,EAAQ+M,qBAAuBxR,KAAKmkC,YAClDub,EAAU1/C,KAAKsQ,SAAS+zB,eAAejtB,EAAQ7B,EAAOkC,EAAQ0sB,GAC9Dwb,EAAWl7C,EAAQ2L,kBAAoBpQ,KAAKsQ,SAASC,sBACrDc,EAAOrR,KAAKuV,MAAQ,SAAW,SACrCvV,KAAKuV,MAAQmqC,EAAQnqC,MACrBvV,KAAKyX,OAASioC,EAAQjoC,OACtBzX,KAAKu+C,aAAev+C,KAAKmkC,YACpBhd,GAAYnnB,KAAM2/C,GAAU,KAGjC3/C,KAAK0vC,cAAc,SAAU,CACzBtpC,KAAMs5C,IAEVz8C,EAASwB,EAAQm7C,SAAU,CACvB5/C,KACA0/C,GACD1/C,MACCA,KAAK++C,UACD/+C,KAAKg/C,UAAU3tC,IACfrR,KAAK6/C,SAGjB,CACAC,sBAGIx8C,EAFgBtD,KAAKyE,QACSsN,QAAU,CAAC,GACrB,CAACguC,EAAa5J,KAC9B4J,EAAY59C,GAAKg0C,CAAM,GAE/B,CACH6J,sBACO,MAAMv7C,EAAUzE,KAAKyE,QACfw7C,EAAYx7C,EAAQsN,OACpBA,EAAS/R,KAAK+R,OACdmuC,EAAUniD,OAAOsB,KAAK0S,GAAQ8Z,QAAO,CAACzrB,EAAK+B,KAC7C/B,EAAI+B,IAAM,EACH/B,IACR,CAAC,GACJ,IAAI6qB,EAAQ,GACRg1B,IACAh1B,EAAQA,EAAMsQ,OAAOx9B,OAAOsB,KAAK4gD,GAAWztD,KAAK2P,IAC7C,MAAMk4C,EAAe4F,EAAU99C,GACzB6uB,EAAOopB,GAAcj4C,EAAIk4C,GACzB8F,EAAoB,MAATnvB,EACX4R,EAAwB,MAAT5R,EACrB,MAAO,CACHvsB,QAAS41C,EACT+F,UAAWD,EAAW,YAAcvd,EAAe,SAAW,OAC9Dyd,MAAOF,EAAW,eAAiBvd,EAAe,WAAa,SAClE,MAGTt/B,EAAK2nB,GAAQ5kB,IACT,MAAMg0C,EAAeh0C,EAAK5B,QACpBtC,EAAKk4C,EAAal4C,GAClB6uB,EAAOopB,GAAcj4C,EAAIk4C,GACzBiG,EAAYt9C,EAAeq3C,EAAap7C,KAAMoH,EAAKg6C,YAC3B//C,IAA1B+5C,EAAaxc,UAA0Bkf,GAAqB1C,EAAaxc,SAAU7M,KAAU+rB,GAAqB12C,EAAK+5C,aACvH/F,EAAaxc,SAAWx3B,EAAK+5C,WAEjCF,EAAQ/9C,IAAM,EACd,IAAI2P,EAAQ,KACR3P,KAAM4P,GAAUA,EAAO5P,GAAIlD,OAASqhD,EACpCxuC,EAAQC,EAAO5P,IAGf2P,EAAQ,IADW6mC,GAASX,SAASsI,GAC7B,CAAe,CACnBn+C,KACAlD,KAAMqhD,EACNtvC,IAAKhR,KAAKgR,IACVtC,MAAO1O,OAEX+R,EAAOD,EAAM3P,IAAM2P,GAEvBA,EAAMg6B,KAAKuO,EAAc51C,EAAQ,IAErCnB,EAAK48C,GAAS,CAACK,EAAYp+C,KAClBo+C,UACMxuC,EAAO5P,EAClB,IAEJmB,EAAKyO,GAASD,IACVowB,GAAQ/T,UAAUnuB,KAAM8R,EAAOA,EAAMrN,SACrCy9B,GAAQC,OAAOniC,KAAM8R,EAAM,GAEnC,CACH0uC,kBACO,MAAMlxB,EAAWtvB,KAAKw+C,UAChBpkB,EAAUp6B,KAAKyW,KAAKtG,SAAShS,OAC7Bg8B,EAAU7K,EAASnxB,OAEzB,GADAmxB,EAASmM,MAAK,CAAC5qC,EAAGC,IAAID,EAAEmT,MAAQlT,EAAEkT,QAC9Bm2B,EAAUC,EAAS,CACnB,IAAI,IAAIpoC,EAAIooC,EAASpoC,EAAImoC,IAAWnoC,EAChCgO,KAAKygD,oBAAoBzuD,GAE7Bs9B,EAASnlB,OAAOiwB,EAASD,EAAUC,EACvC,CACAp6B,KAAK4+C,gBAAkBtvB,EAAS7sB,MAAM,GAAGg5B,KAAKuhB,GAAc,QAAS,SACzE,CACH0D,8BACO,MAAQlC,UAAWlvB,EAAW7Y,MAAM,SAAEtG,IAAiBnQ,KACnDsvB,EAASnxB,OAASgS,EAAShS,eACpB6B,KAAK6wB,QAEhBvB,EAASllB,SAAQ,CAAC0lB,EAAM9rB,KACqC,IAArDmM,EAAS4Q,QAAQpuB,GAAIA,IAAMm9B,EAAK6wB,WAAUxiD,QAC1C6B,KAAKygD,oBAAoBz8C,EAC7B,GAER,CACA48C,2BACI,MAAMC,EAAiB,GACjB1wC,EAAWnQ,KAAKyW,KAAKtG,SAC3B,IAAIne,EAAG4R,EAEP,IADA5D,KAAK0gD,8BACD1uD,EAAI,EAAG4R,EAAOuM,EAAShS,OAAQnM,EAAI4R,EAAM5R,IAAI,CAC7C,MAAMuhC,EAAUpjB,EAASne,GACzB,IAAI89B,EAAO9vB,KAAKw0B,eAAexiC,GAC/B,MAAMiN,EAAOs0B,EAAQt0B,MAAQe,KAAKguB,OAAO/uB,KAWzC,GAVI6wB,EAAK7wB,MAAQ6wB,EAAK7wB,OAASA,IAC3Be,KAAKygD,oBAAoBzuD,GACzB89B,EAAO9vB,KAAKw0B,eAAexiC,IAE/B89B,EAAK7wB,KAAOA,EACZ6wB,EAAK3e,UAAYoiB,EAAQpiB,WAAa8oC,GAAah7C,EAAMe,KAAKyE,SAC9DqrB,EAAKgxB,MAAQvtB,EAAQutB,OAAS,EAC9BhxB,EAAK9rB,MAAQhS,EACb89B,EAAK+H,MAAQ,GAAKtE,EAAQsE,MAC1B/H,EAAKhc,QAAU9T,KAAK+gD,iBAAiB/uD,GACjC89B,EAAKY,WACLZ,EAAKY,WAAW4C,YAAYthC,GAC5B89B,EAAKY,WAAWwC,iBACb,CACH,MAAM8tB,EAAkBrI,GAASf,cAAc34C,IACzC,mBAAE8zB,EAAmB,gBAAEC,GAAqBhgB,GAAS7C,SAASlR,GACpElB,OAAOC,OAAOgjD,EAAiB,CAC3BhuB,gBAAiB2lB,GAASb,WAAW9kB,GACrCD,mBAAoBA,GAAsB4lB,GAASb,WAAW/kB,KAElEjD,EAAKY,WAAa,IAAIswB,EAAgBhhD,KAAMhO,GAC5C6uD,EAAej7C,KAAKkqB,EAAKY,WAC7B,CACJ,CAEA,OADA1wB,KAAKwgD,kBACEK,CACX,CACHI,iBACO39C,EAAKtD,KAAKyW,KAAKtG,UAAU,CAACojB,EAASxvB,KAC/B/D,KAAKw0B,eAAezwB,GAAc2sB,WAAWiE,OAAO,GACrD30B,KACP,CACH20B,QACO30B,KAAKihD,iBACLjhD,KAAK0vC,cAAc,QACvB,CACApiB,OAAOjc,GACH,MAAM2c,EAAShuB,KAAKguB,OACpBA,EAAOV,SACP,MAAM7oB,EAAUzE,KAAKs+C,SAAWtwB,EAAO4H,eAAe5H,EAAOwuB,oBAAqBx8C,KAAKqX,cACjF6pC,EAAgBlhD,KAAKs5B,qBAAuB70B,EAAQuL,UAK1D,GAJAhQ,KAAKmhD,gBACLnhD,KAAKohD,sBACLphD,KAAKqhD,uBACLrhD,KAAK6+C,SAASvF,cAIP,IAHHt5C,KAAK0vC,cAAc,eAAgB,CACnCr+B,OACAgoC,YAAY,IAEZ,OAEJ,MAAMwH,EAAiB7gD,KAAK4gD,2BAC5B5gD,KAAK0vC,cAAc,wBACnB,IAAIlN,EAAa,EACjB,IAAI,IAAIxwC,EAAI,EAAG4R,EAAO5D,KAAKyW,KAAKtG,SAAShS,OAAQnM,EAAI4R,EAAM5R,IAAI,CAC3D,MAAM,WAAE0+B,GAAgB1wB,KAAKw0B,eAAexiC,GACtC2iC,GAASusB,IAAyD,IAAxCL,EAAet8C,QAAQmsB,GACvDA,EAAW0E,sBAAsBT,GACjC6N,EAAazyC,KAAKC,KAAK0gC,EAAWiH,iBAAkB6K,EACxD,CACAA,EAAaxiC,KAAKshD,YAAc78C,EAAQk8B,OAAO3sB,YAAcwuB,EAAa,EAC1ExiC,KAAKuhD,cAAc/e,GACd0e,GACD59C,EAAKu9C,GAAiBnwB,IAClBA,EAAWiE,OAAO,IAG1B30B,KAAKwhD,gBAAgBnwC,GACrBrR,KAAK0vC,cAAc,cAAe,CAC9Br+B,SAEJrR,KAAKoiC,QAAQ3G,KAAKuhB,GAAc,IAAK,SACrC,MAAM,QAAE7xB,EAAQ,WAAEszB,GAAgBz+C,KAC9By+C,EACAz+C,KAAKyhD,cAAchD,GAAY,GACxBtzB,EAAQhtB,QACf6B,KAAK0hD,mBAAmBv2B,EAASA,GAAS,GAE9CnrB,KAAK6/C,QACT,CACHsB,gBACO79C,EAAKtD,KAAK+R,QAASD,IACfowB,GAAQI,UAAUtiC,KAAM8R,EAAM,IAElC9R,KAAK8/C,sBACL9/C,KAAKggD,qBACT,CACHoB,sBACO,MAAM38C,EAAUzE,KAAKyE,QACfk9C,EAAiB,IAAIxhC,IAAIpiB,OAAOsB,KAAKW,KAAK0+C,aAC1CkD,EAAY,IAAIzhC,IAAI1b,EAAQgM,QAC7BtK,GAAUw7C,EAAgBC,MAAgB5hD,KAAK2+C,uBAAyBl6C,EAAQoN,aACjF7R,KAAK6hD,eACL7hD,KAAKu/C,aAEb,CACH8B,uBACO,MAAM,eAAEvC,GAAoB9+C,KACtB8hD,EAAU9hD,KAAK+hD,0BAA4B,GACjD,IAAK,MAAM,OAAEj0B,EAAO,MAAErlB,EAAM,MAAEqgB,KAAYg5B,EAEtCnE,GAAgBmB,EAAgBr2C,EADR,oBAAXqlB,GAAgChF,EAAQA,EAG7D,CACHi5B,yBACO,MAAMpnB,EAAe36B,KAAK26B,aAC1B,IAAKA,IAAiBA,EAAax8B,OAC/B,OAEJ6B,KAAK26B,aAAe,GACpB,MAAMqnB,EAAehiD,KAAKyW,KAAKtG,SAAShS,OAClC8jD,EAAW5P,GAAM,IAAIlyB,IAAIwa,EAAa5Z,QAAQhwB,GAAIA,EAAE,KAAOshD,IAAK7/C,KAAI,CAACzB,EAAGiB,IAAIA,EAAI,IAAMjB,EAAEoZ,OAAO,GAAGsW,KAAK,QACvGyhC,EAAYD,EAAQ,GAC1B,IAAI,IAAIjwD,EAAI,EAAGA,EAAIgwD,EAAchwD,IAC7B,IAAKmU,GAAU+7C,EAAWD,EAAQjwD,IAC9B,OAGR,OAAOM,MAAMmL,KAAKykD,GAAW1vD,KAAKzB,GAAIA,EAAE0U,MAAM,OAAMjT,KAAK3B,IAAI,CACrDi9B,OAAQj9B,EAAE,GACV4X,OAAQ5X,EAAE,GACVi4B,OAAQj4B,EAAE,MAEtB,CACH0wD,cAAc/e,GACP,IAEO,IAFHxiC,KAAK0vC,cAAc,eAAgB,CACnC2J,YAAY,IAEZ,OAEJnX,GAAQ5U,OAAOttB,KAAMA,KAAKuV,MAAOvV,KAAKyX,OAAQ+qB,GAC9C,MAAMnpB,EAAOrZ,KAAKm4B,UACZgqB,EAAS9oC,EAAK9D,OAAS,GAAK8D,EAAK5B,QAAU,EACjDzX,KAAKoiC,QAAU,GACf9+B,EAAKtD,KAAKwhC,OAAQ9a,IACVy7B,GAA2B,cAAjBz7B,EAAImX,WAGdnX,EAAIyH,WACJzH,EAAIyH,YAERnuB,KAAKoiC,QAAQx8B,QAAQ8gB,EAAI0b,WAAU,GACpCpiC,MACHA,KAAKoiC,QAAQh4B,SAAQ,CAAC/D,EAAMrC,KACxBqC,EAAK+7C,KAAOp+C,CAAK,IAErBhE,KAAK0vC,cAAc,cACvB,CACH8R,gBAAgBnwC,GACT,IAGO,IAHHrR,KAAK0vC,cAAc,uBAAwB,CAC3Cr+B,OACAgoC,YAAY,IAFhB,CAMA,IAAI,IAAIrnD,EAAI,EAAG4R,EAAO5D,KAAKyW,KAAKtG,SAAShS,OAAQnM,EAAI4R,IAAQ5R,EACzDgO,KAAKw0B,eAAexiC,GAAG0+B,WAAWvC,YAEtC,IAAI,IAAIn8B,EAAI,EAAG4R,EAAO5D,KAAKyW,KAAKtG,SAAShS,OAAQnM,EAAI4R,IAAQ5R,EACzDgO,KAAKqiD,eAAerwD,EAAGkU,GAAWmL,GAAQA,EAAK,CAC3CtN,aAAc/R,IACbqf,GAETrR,KAAK0vC,cAAc,sBAAuB,CACtCr+B,QAVJ,CAYJ,CACHgxC,eAAer+C,EAAOqN,GACf,MAAMye,EAAO9vB,KAAKw0B,eAAexwB,GAC3Bb,EAAO,CACT2sB,OACA9rB,QACAqN,OACAgoC,YAAY,IAEwC,IAApDr5C,KAAK0vC,cAAc,sBAAuBvsC,KAG9C2sB,EAAKY,WAAW9F,QAAQvZ,GACxBlO,EAAKk2C,YAAa,EAClBr5C,KAAK0vC,cAAc,qBAAsBvsC,GAC7C,CACA08C,UAGW,IAFH7/C,KAAK0vC,cAAc,eAAgB,CACnC2J,YAAY,MAIZjtB,GAAS9lB,IAAItG,MACTA,KAAK++C,WAAa3yB,GAASpB,QAAQhrB,OACnCosB,GAAS3jB,MAAMzI,OAGnBA,KAAKkrB,OACLiyB,GAAqB,CACjBzuC,MAAO1O,QAGnB,CACAkrB,OACI,IAAIl5B,EACJ,GAAIgO,KAAKw/C,kBAAmB,CACxB,MAAM,MAAEjqC,EAAM,OAAEkC,GAAYzX,KAAKw/C,kBACjCx/C,KAAKy/C,QAAQlqC,EAAOkC,GACpBzX,KAAKw/C,kBAAoB,IAC7B,CAEA,GADAx/C,KAAKi8C,QACDj8C,KAAKuV,OAAS,GAAKvV,KAAKyX,QAAU,EAClC,OAEJ,IAEO,IAFHzX,KAAK0vC,cAAc,aAAc,CACjC2J,YAAY,IAEZ,OAEJ,MAAMiJ,EAAStiD,KAAKoiC,QACpB,IAAIpwC,EAAI,EAAGA,EAAIswD,EAAOnkD,QAAUmkD,EAAOtwD,GAAGqwC,GAAK,IAAKrwC,EAChDswD,EAAOtwD,GAAGk5B,KAAKlrB,KAAKm4B,WAGxB,IADAn4B,KAAKuiD,gBACCvwD,EAAIswD,EAAOnkD,SAAUnM,EACvBswD,EAAOtwD,GAAGk5B,KAAKlrB,KAAKm4B,WAExBn4B,KAAK0vC,cAAc,YACvB,CACHngB,uBAAuBF,GAChB,MAAMC,EAAWtvB,KAAK4+C,gBAChB54B,EAAS,GACf,IAAIh0B,EAAG4R,EACP,IAAI5R,EAAI,EAAG4R,EAAO0rB,EAASnxB,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC7C,MAAM89B,EAAOR,EAASt9B,GACjBq9B,IAAiBS,EAAKhc,SACvBkS,EAAOpgB,KAAKkqB,EAEpB,CACA,OAAO9J,CACX,CACH+X,+BACO,OAAO/9B,KAAKuvB,wBAAuB,EACvC,CACHgzB,gBACO,IAEO,IAFHviD,KAAK0vC,cAAc,qBAAsB,CACzC2J,YAAY,IAEZ,OAEJ,MAAM/pB,EAAWtvB,KAAK+9B,+BACtB,IAAI,IAAI/rC,EAAIs9B,EAASnxB,OAAS,EAAGnM,GAAK,IAAKA,EACvCgO,KAAKwiD,aAAalzB,EAASt9B,IAE/BgO,KAAK0vC,cAAc,oBACvB,CACH8S,aAAa1yB,GACN,MAAM9e,EAAMhR,KAAKgR,IACX0D,EAAOob,EAAKiI,MACZ0qB,GAAW/tC,EAAKsjB,SAChB3e,EAhgBd,SAAwByW,EAAMqI,GAC1B,MAAM,OAAE/D,EAAO,OAAEE,GAAYxE,EAC7B,OAAIsE,GAAUE,EACH,CACHjgB,KAAMwpC,GAAezpB,EAAQ+D,EAAW,QACxChkB,MAAO0pC,GAAezpB,EAAQ+D,EAAW,SACzCjkB,IAAK2pC,GAAevpB,EAAQ6D,EAAW,OACvC/jB,OAAQypC,GAAevpB,EAAQ6D,EAAW,WAG3CA,CACX,CAqfqBuqB,CAAe5yB,EAAM9vB,KAAKm4B,WACjCh1B,EAAO,CACT2sB,OACA9rB,MAAO8rB,EAAK9rB,MACZq1C,YAAY,IAEsC,IAAlDr5C,KAAK0vC,cAAc,oBAAqBvsC,KAGxCs/C,GACAlpC,GAASvI,EAAK,CACVqD,MAAoB,IAAdK,EAAKL,KAAiB,EAAIgF,EAAKhF,KAAOK,EAAKL,KACjDF,OAAsB,IAAfO,EAAKP,MAAkBnU,KAAKuV,MAAQ8D,EAAKlF,MAAQO,EAAKP,MAC7DD,KAAkB,IAAbQ,EAAKR,IAAgB,EAAImF,EAAKnF,IAAMQ,EAAKR,IAC9CE,QAAwB,IAAhBM,EAAKN,OAAmBpU,KAAKyX,OAAS4B,EAAKjF,OAASM,EAAKN,SAGzE0b,EAAKY,WAAWxF,OACZu3B,GACAjpC,GAAWxI,GAEf7N,EAAKk2C,YAAa,EAClBr5C,KAAK0vC,cAAc,mBAAoBvsC,GAC3C,CACH+6B,cAAc9kB,GACP,OAAOD,GAAeC,EAAOpZ,KAAKm4B,UAAWn4B,KAAKshD,YACtD,CACAqB,0BAA0B1xD,EAAGogB,EAAM5M,EAASw5B,GACxC,MAAMnQ,EAASgS,GAAYC,MAAM1uB,GACjC,MAAsB,mBAAXyc,EACAA,EAAO9tB,KAAM/O,EAAGwT,EAASw5B,GAE7B,EACX,CACAzJ,eAAezwB,GACX,MAAMwvB,EAAUvzB,KAAKyW,KAAKtG,SAASpM,GAC7BurB,EAAWtvB,KAAKw+C,UACtB,IAAI1uB,EAAOR,EAASvO,QAAQpuB,GAAIA,GAAKA,EAAEguD,WAAaptB,IAASjI,MAkB7D,OAjBKwE,IACDA,EAAO,CACH7wB,KAAM,KACNwX,KAAM,GACN8c,QAAS,KACT7C,WAAY,KACZuG,OAAQ,KACRtD,QAAS,KACTE,QAAS,KACTitB,MAAOvtB,GAAWA,EAAQutB,OAAS,EACnC98C,MAAOD,EACP48C,SAAUptB,EACV5B,QAAS,GACToE,SAAS,GAEbzG,EAAS1pB,KAAKkqB,IAEXA,CACX,CACAzY,aACI,OAAOrX,KAAK6yB,WAAa7yB,KAAK6yB,SAAWlV,GAAc,KAAM,CACzDjP,MAAO1O,KACPf,KAAM,UAEd,CACA2jD,yBACI,OAAO5iD,KAAK+9B,+BAA+B5/B,MAC/C,CACA4iD,iBAAiBh9C,GACb,MAAMwvB,EAAUvzB,KAAKyW,KAAKtG,SAASpM,GACnC,IAAKwvB,EACD,OAAO,EAEX,MAAMzD,EAAO9vB,KAAKw0B,eAAezwB,GACjC,MAA8B,kBAAhB+rB,EAAKmH,QAAwBnH,EAAKmH,QAAU1D,EAAQ0D,MACtE,CACA4rB,qBAAqB9+C,EAAc+P,GAClB9T,KAAKw0B,eAAezwB,GAC5BkzB,QAAUnjB,CACnB,CACAgvC,qBAAqB9+C,GACjBhE,KAAK8+C,eAAe96C,IAAUhE,KAAK8+C,eAAe96C,EACtD,CACA++C,kBAAkB/+C,GACd,OAAQhE,KAAK8+C,eAAe96C,EAChC,CACHg/C,kBAAkBj/C,EAAcu0B,EAAWxkB,GACpC,MAAMzC,EAAOyC,EAAU,OAAS,OAC1Bgc,EAAO9vB,KAAKw0B,eAAezwB,GAC3BsmB,EAAQyF,EAAKY,WAAWsI,wBAAmB14B,EAAW+Q,GACxDpL,GAAQqyB,IACRxI,EAAKrZ,KAAK6hB,GAAWrB,QAAUnjB,EAC/B9T,KAAKstB,WAELttB,KAAK6iD,qBAAqB9+C,EAAc+P,GACxCuW,EAAMiD,OAAOwC,EAAM,CACfhc,YAEJ9T,KAAKstB,QAAQtc,GAAMA,EAAIjN,eAAiBA,EAAesN,OAAO/Q,IAEtE,CACAyT,KAAKhQ,EAAcu0B,GACft4B,KAAKgjD,kBAAkBj/C,EAAcu0B,GAAW,EACpD,CACA1kB,KAAK7P,EAAcu0B,GACft4B,KAAKgjD,kBAAkBj/C,EAAcu0B,GAAW,EACpD,CACHmoB,oBAAoB18C,GACb,MAAM+rB,EAAO9vB,KAAKw+C,UAAUz6C,GACxB+rB,GAAQA,EAAKY,YACbZ,EAAKY,WAAWkE,kBAEb50B,KAAKw+C,UAAUz6C,EAC1B,CACAk/C,QACI,IAAIjxD,EAAG4R,EAGP,IAFA5D,KAAKisB,OACLG,GAASD,OAAOnsB,MACZhO,EAAI,EAAG4R,EAAO5D,KAAKyW,KAAKtG,SAAShS,OAAQnM,EAAI4R,IAAQ5R,EACrDgO,KAAKygD,oBAAoBzuD,EAEjC,CACAkxD,UACIljD,KAAK0vC,cAAc,iBACnB,MAAM,OAAEt4B,EAAO,IAAEpG,GAAShR,KAC1BA,KAAKijD,QACLjjD,KAAKguB,OAAOguB,aACR5kC,IACApX,KAAK6hD,eACL1qC,GAAYC,EAAQpG,GACpBhR,KAAKsQ,SAAS8zB,eAAepzB,GAC7BhR,KAAKoX,OAAS,KACdpX,KAAKgR,IAAM,aAERysC,GAAUz9C,KAAKmC,IACtBnC,KAAK0vC,cAAc,eACvB,CACAyT,iBAAiBhgD,GACb,OAAOnD,KAAKoX,OAAOgsC,aAAajgD,EACpC,CACHo8C,aACOv/C,KAAKqjD,iBACDrjD,KAAKyE,QAAQoN,WACb7R,KAAKsjD,uBAELtjD,KAAK++C,UAAW,CAExB,CACHsE,iBACO,MAAMn5C,EAAYlK,KAAK0+C,WACjBpuC,EAAWtQ,KAAKsQ,SAChBizC,EAAO,CAACtkD,EAAM8K,KAChBuG,EAASuX,iBAAiB7nB,KAAMf,EAAM8K,GACtCG,EAAUjL,GAAQ8K,CAAQ,EAExBA,EAAW,CAAC9Y,EAAG0B,EAAG0S,KACpBpU,EAAE21B,QAAUj0B,EACZ1B,EAAE41B,QAAUxhB,EACZrF,KAAKyhD,cAAcxwD,EAAE,EAEzBqS,EAAKtD,KAAKyE,QAAQgM,QAASxR,GAAOskD,EAAKtkD,EAAM8K,IACjD,CACHu5C,uBACYtjD,KAAK2+C,uBACN3+C,KAAK2+C,qBAAuB,CAAC,GAEjC,MAAMz0C,EAAYlK,KAAK2+C,qBACjBruC,EAAWtQ,KAAKsQ,SAChBizC,EAAO,CAACtkD,EAAM8K,KAChBuG,EAASuX,iBAAiB7nB,KAAMf,EAAM8K,GACtCG,EAAUjL,GAAQ8K,CAAQ,EAExBy5C,EAAU,CAACvkD,EAAM8K,KACfG,EAAUjL,KACVqR,EAASwX,oBAAoB9nB,KAAMf,EAAM8K,UAClCG,EAAUjL,GACrB,EAEE8K,EAAW,CAACwL,EAAOkC,KACjBzX,KAAKoX,QACLpX,KAAK2T,OAAO4B,EAAOkC,EACvB,EAEJ,IAAIgsC,EACJ,MAAM1E,EAAW,KACbyE,EAAQ,SAAUzE,GAClB/+C,KAAK++C,UAAW,EAChB/+C,KAAK2T,SACL4vC,EAAK,SAAUx5C,GACfw5C,EAAK,SAAUE,EAAS,EAE5BA,EAAW,KACPzjD,KAAK++C,UAAW,EAChByE,EAAQ,SAAUz5C,GAClB/J,KAAKijD,QACLjjD,KAAKy/C,QAAQ,EAAG,GAChB8D,EAAK,SAAUxE,EAAS,EAExBzuC,EAASg0B,WAAWtkC,KAAKoX,QACzB2nC,IAEA0E,GAER,CACH5B,eACOv+C,EAAKtD,KAAK0+C,YAAY,CAAC30C,EAAU9K,KAC7Be,KAAKsQ,SAASwX,oBAAoB9nB,KAAMf,EAAM8K,EAAS,IAE3D/J,KAAK0+C,WAAa,CAAC,EACnBp7C,EAAKtD,KAAK2+C,sBAAsB,CAAC50C,EAAU9K,KACvCe,KAAKsQ,SAASwX,oBAAoB9nB,KAAMf,EAAM8K,EAAS,IAE3D/J,KAAK2+C,0BAAuBr+C,CAChC,CACAojD,iBAAiBz4B,EAAO5Z,EAAM88B,GAC1B,MAAMnvB,EAASmvB,EAAU,MAAQ,SACjC,IAAIre,EAAMzpB,EAAMrU,EAAG4R,EAKnB,IAJa,YAATyN,IACAye,EAAO9vB,KAAKw0B,eAAevJ,EAAM,GAAGlnB,cACpC+rB,EAAKY,WAAW,IAAM1R,EAAS,wBAE/BhtB,EAAI,EAAG4R,EAAOqnB,EAAM9sB,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC1CqU,EAAO4kB,EAAMj5B,GACb,MAAM0+B,EAAarqB,GAAQrG,KAAKw0B,eAAenuB,EAAKtC,cAAc2sB,WAC9DA,GACAA,EAAW1R,EAAS,cAAc3Y,EAAKof,QAASpf,EAAKtC,aAAcsC,EAAKrC,MAEhF,CACJ,CACH2/C,oBACO,OAAO3jD,KAAKmrB,SAAW,EAC3B,CACHy4B,kBAAkBC,GACX,MAAMC,EAAa9jD,KAAKmrB,SAAW,GAC7BzX,EAASmwC,EAAerxD,KAAI,EAAGuR,eAAeC,YAChD,MAAM8rB,EAAO9vB,KAAKw0B,eAAezwB,GACjC,IAAK+rB,EACD,MAAM,IAAItP,MAAM,6BAA+Bzc,GAEnD,MAAO,CACHA,eACA0hB,QAASqK,EAAKrZ,KAAKzS,GACnBA,QACH,KAEYP,EAAeiQ,EAAQowC,KAEpC9jD,KAAKmrB,QAAUzX,EACf1T,KAAKy+C,WAAa,KAClBz+C,KAAK0hD,mBAAmBhuC,EAAQowC,GAExC,CACHpU,cAAcuJ,EAAM91C,EAAM4d,GACnB,OAAO/gB,KAAK6+C,SAAS7F,OAAOh5C,KAAMi5C,EAAM91C,EAAM4d,EAClD,CACHsS,gBAAgB0wB,GACT,OAA6E,IAAtE/jD,KAAK6+C,SAASzjB,OAAOra,QAAQ9f,GAAIA,EAAEm4C,OAAOj3C,KAAO4hD,IAAU5lD,MACtE,CACHujD,mBAAmBhuC,EAAQowC,EAAYE,GAChC,MAAMC,EAAejkD,KAAKyE,QAAQqM,MAC5B29B,EAAO,CAAC59C,EAAGC,IAAID,EAAEkwB,QAAQpuB,IAAK7B,EAAEipD,MAAM10C,GAAI1S,EAAEoR,eAAiBsB,EAAEtB,cAAgBpR,EAAEqR,QAAUqB,EAAErB,UAC7FkgD,EAAczV,EAAKqV,EAAYpwC,GAC/BywC,EAAYH,EAAStwC,EAAS+6B,EAAK/6B,EAAQowC,GAC7CI,EAAY/lD,QACZ6B,KAAK0jD,iBAAiBQ,EAAaD,EAAa5yC,MAAM,GAEtD8yC,EAAUhmD,QAAU8lD,EAAa5yC,MACjCrR,KAAK0jD,iBAAiBS,EAAWF,EAAa5yC,MAAM,EAE5D,CACHowC,cAAcxwD,EAAG+yD,GACV,MAAM7gD,EAAO,CACTkjB,MAAOp1B,EACP+yD,SACA3K,YAAY,EACZ+K,YAAapkD,KAAKk+B,cAAcjtC,IAE9BozD,EAAejL,IAAUA,EAAO30C,QAAQgM,QAAUzQ,KAAKyE,QAAQgM,QAAQnB,SAASre,EAAEk2C,OAAOloC,MAC/F,IAA6D,IAAzDe,KAAK0vC,cAAc,cAAevsC,EAAMkhD,GACxC,OAEJ,MAAM1iB,EAAU3hC,KAAKskD,aAAarzD,EAAG+yD,EAAQ7gD,EAAKihD,aAMlD,OALAjhD,EAAKk2C,YAAa,EAClBr5C,KAAK0vC,cAAc,aAAcvsC,EAAMkhD,IACnC1iB,GAAWx+B,EAAKw+B,UAChB3hC,KAAK6/C,SAEF7/C,IACX,CACHskD,aAAarzD,EAAG+yD,EAAQI,GACjB,MAAQj5B,QAAS24B,EAAa,GAAG,QAAEr/C,GAAazE,KAC1Ci+B,EAAmB+lB,EACnBtwC,EAAS1T,KAAKukD,mBAAmBtzD,EAAG6yD,EAAYM,EAAanmB,GAC7DumB,ED19LV,SAAuBvzD,GACvB,MAAkB,YAAXA,EAAEgO,MAAiC,UAAXhO,EAAEgO,MAA+B,gBAAXhO,EAAEgO,IAC3D,CCw9LwBwlD,CAAcxzD,GACxByzD,EAhzBb,SAA4BzzD,EAAGyzD,EAAWN,EAAaI,GACpD,OAAKJ,GAA0B,aAAXnzD,EAAEgO,KAGlBulD,EACOE,EAEJzzD,EALI,IAMf,CAwyB0B0zD,CAAmB1zD,EAAG+O,KAAKy+C,WAAY2F,EAAaI,GAClEJ,IACApkD,KAAKy+C,WAAa,KAClBx7C,EAASwB,EAAQgN,QAAS,CACtBxgB,EACAyiB,EACA1T,MACDA,MACCwkD,GACAvhD,EAASwB,EAAQiN,QAAS,CACtBzgB,EACAyiB,EACA1T,MACDA,OAGX,MAAM2hC,GAAWl+B,EAAeiQ,EAAQowC,GAMxC,OALIniB,GAAWqiB,KACXhkD,KAAKmrB,QAAUzX,EACf1T,KAAK0hD,mBAAmBhuC,EAAQowC,EAAYE,IAEhDhkD,KAAKy+C,WAAaiG,EACX/iB,CACX,CACH4iB,mBAAmBtzD,EAAG6yD,EAAYM,EAAanmB,GACxC,GAAe,aAAXhtC,EAAEgO,KACF,MAAO,GAEX,IAAKmlD,EACD,OAAON,EAEX,MAAMG,EAAejkD,KAAKyE,QAAQqM,MAClC,OAAO9Q,KAAK2iD,0BAA0B1xD,EAAGgzD,EAAa5yC,KAAM4yC,EAAchmB,EAC9E,EAEJ,SAAS+f,KACL,OAAO16C,EAAKy6C,GAAMN,WAAY/uC,GAAQA,EAAMmwC,SAASvF,cACzD,CAiTA,SAASsL,GAAS5zC,EAAKvM,EAASmM,EAAQnM,GACpCuM,EAAI6zC,QAAU7hD,EAAe4N,EAAM4Y,eAAgB/kB,EAAQ+kB,gBAC3DxY,EAAIskC,YAAYtyC,EAAe4N,EAAM6Y,WAAYhlB,EAAQglB,aACzDzY,EAAIukC,eAAiBvyC,EAAe4N,EAAM8Y,iBAAkBjlB,EAAQilB,kBACpE1Y,EAAI8zC,SAAW9hD,EAAe4N,EAAM+Y,gBAAiBllB,EAAQklB,iBAC7D3Y,EAAI6D,UAAY7R,EAAe4N,EAAMoI,YAAavU,EAAQuU,aAC1DhI,EAAI8J,YAAc9X,EAAe4N,EAAMV,YAAazL,EAAQyL,YAChE,CACA,SAAS0I,GAAO5H,EAAK0I,EAAUxV,GAC3B8M,EAAI4H,OAAO1U,EAAOvR,EAAGuR,EAAOmB,EAChC,CAUA,SAAS0/C,GAAS5iC,EAAQ6G,EAAS0X,EAAS,CAAC,GACzC,MAAM5X,EAAQ3G,EAAOhkB,QACbsK,MAAOu8C,EAAc,EAAIt8C,IAAKu8C,EAAYn8B,EAAQ,GAAO4X,GACzDj4B,MAAOy8C,EAAex8C,IAAKy8C,GAAgBn8B,EAC7CvgB,EAAQ1Y,KAAKC,IAAIg1D,EAAaE,GAC9Bx8C,EAAM3Y,KAAKE,IAAIg1D,EAAWE,GAC1BC,EAAUJ,EAAcE,GAAgBD,EAAYC,GAAgBF,EAAcG,GAAcF,EAAYE,EAClH,MAAO,CACHr8B,QACArgB,QACA+K,KAAMwV,EAAQxV,KACd5P,KAAM8E,EAAMD,IAAU28C,EAAUt8B,EAAQpgB,EAAMD,EAAQC,EAAMD,EAEpE,CACC,SAAS48C,GAAYr0C,EAAKoJ,EAAM4O,EAAS0X,GACtC,MAAM,OAAEve,EAAO,QAAE1d,GAAa2V,GACxB,MAAE0O,EAAM,MAAErgB,EAAM,KAAE+K,EAAK,KAAE5P,GAAUmhD,GAAS5iC,EAAQ6G,EAAS0X,GAC7D4kB,EA1BT,SAAuB7gD,GACpB,OAAIA,EAAQ8gD,QACD9rC,GAEPhV,EAAQggB,SAA8C,aAAnChgB,EAAQ6e,uBACpBzJ,GAEJjB,EACX,CAkBuB4sC,CAAc/gD,GACjC,IACIzS,EAAGonB,EAAOoL,GADV,KAAE+V,GAAM,EAAK,QAAE/2B,GAAak9B,GAAU,CAAC,EAE3C,IAAI1uC,EAAI,EAAGA,GAAK4R,IAAQ5R,EACpBonB,EAAQ+I,GAAQ1Z,GAASjF,EAAUI,EAAO5R,EAAIA,IAAM82B,GAChD1P,EAAMgJ,OAECmY,GACPvpB,EAAI2H,OAAOS,EAAMzmB,EAAGymB,EAAM/T,GAC1Bk1B,GAAO,GAEP+qB,EAAWt0C,EAAKwT,EAAMpL,EAAO5V,EAASiB,EAAQ8gD,SAElD/gC,EAAOpL,GAMX,OAJI5F,IACA4F,EAAQ+I,GAAQ1Z,GAASjF,EAAUI,EAAO,IAAMklB,GAChDw8B,EAAWt0C,EAAKwT,EAAMpL,EAAO5V,EAASiB,EAAQ8gD,YAEzC/xC,CACb,CACC,SAASiyC,GAAgBz0C,EAAKoJ,EAAM4O,EAAS0X,GAC1C,MAAMve,EAAS/H,EAAK+H,QACd,MAAE2G,EAAM,MAAErgB,EAAM,KAAE7E,GAAUmhD,GAAS5iC,EAAQ6G,EAAS0X,IACtD,KAAEnG,GAAM,EAAK,QAAE/2B,GAAak9B,GAAU,CAAC,EAC7C,IAEI1uC,EAAGonB,EAAOssC,EAAOC,EAAMC,EAAMC,EAF7BC,EAAO,EACPC,EAAS,EAEb,MAAMC,EAAchiD,IAASyE,GAASjF,EAAUI,EAAOI,EAAQA,IAAU8kB,EACnEm9B,EAAQ,KACNN,IAASC,IACT50C,EAAI4H,OAAOktC,EAAMF,GACjB50C,EAAI4H,OAAOktC,EAAMH,GACjB30C,EAAI4H,OAAOktC,EAAMD,GACrB,EAMJ,IAJItrB,IACAnhB,EAAQ+I,EAAO6jC,EAAW,IAC1Bh1C,EAAI2H,OAAOS,EAAMzmB,EAAGymB,EAAM/T,IAE1BrT,EAAI,EAAGA,GAAK4R,IAAQ5R,EAAE,CAEtB,GADAonB,EAAQ+I,EAAO6jC,EAAWh0D,IACtBonB,EAAMgJ,KACN,SAEJ,MAAMzvB,EAAIymB,EAAMzmB,EACV0S,EAAI+T,EAAM/T,EACV6gD,EAAa,EAAJvzD,EACXuzD,IAAWR,GACPrgD,EAAIsgD,EACJA,EAAOtgD,EACAA,EAAIugD,IACXA,EAAOvgD,GAEXygD,GAAQC,EAASD,EAAOnzD,KAAOozD,IAE/BE,IACAj1C,EAAI4H,OAAOjmB,EAAG0S,GACdqgD,EAAQQ,EACRH,EAAS,EACTJ,EAAOC,EAAOvgD,GAElBwgD,EAAQxgD,CACZ,CACA4gD,GACJ,CACC,SAASE,GAAkB/rC,GACxB,MAAMC,EAAOD,EAAK3V,QACZglB,EAAapP,EAAKoP,YAAcpP,EAAKoP,WAAWtrB,OAEtD,OADqBic,EAAKgsC,YAAehsC,EAAK4S,OAAU3S,EAAKoK,SAA2C,aAAhCpK,EAAKiJ,wBAA0CjJ,EAAKkrC,SAAY97B,EACjG47B,GAAlBI,EACzB,CAoCA,MAAMY,GAA8B,mBAAXC,OA8IzB,SAASC,GAAUt+B,EAAIhC,EAAK+K,EAAMiN,GAC9B,MAAMx5B,EAAUwjB,EAAGxjB,SACX,CAACusB,GAAO3uB,GAAW4lB,EAAGiX,SAAS,CACnClO,GACDiN,GACH,OAAOluC,KAAKqX,IAAI6e,EAAM5jB,GAASoC,EAAQ0T,OAAS1T,EAAQ+hD,SAC5D,CAiFA,SAASC,GAAaC,EAAKzoB,GACvB,MAAM,EAAEtrC,EAAE,EAAE0S,EAAE,KAAE6vB,EAAK,MAAE3f,EAAM,OAAEkC,GAAaivC,EAAIxnB,SAAS,CACrD,IACA,IACA,OACA,QACA,UACDjB,GACH,IAAI5pB,EAAMF,EAAOD,EAAKE,EAAQuyC,EAc9B,OAbID,EAAI5pB,YACJ6pB,EAAOlvC,EAAS,EAChBpD,EAAOtkB,KAAKE,IAAI0C,EAAGuiC,GACnB/gB,EAAQpkB,KAAKC,IAAI2C,EAAGuiC,GACpBhhB,EAAM7O,EAAIshD,EACVvyC,EAAS/O,EAAIshD,IAEbA,EAAOpxC,EAAQ,EACflB,EAAO1hB,EAAIg0D,EACXxyC,EAAQxhB,EAAIg0D,EACZzyC,EAAMnkB,KAAKE,IAAIoV,EAAG6vB,GAClB9gB,EAASrkB,KAAKC,IAAIqV,EAAG6vB,IAElB,CACH7gB,OACAH,MACAC,QACAC,SAER,CACA,SAASwyC,GAAYxkC,EAAM/f,EAAOpS,EAAKD,GACnC,OAAOoyB,EAAO,EAAIpZ,GAAY3G,EAAOpS,EAAKD,EAC9C,CA4BA,SAAS62D,GAAcH,GACnB,MAAMjyC,EAASgyC,GAAaC,GACtBnxC,EAAQd,EAAON,MAAQM,EAAOJ,KAC9BoD,EAAShD,EAAOL,OAASK,EAAOP,IAChCkB,EA/BV,SAA0BsxC,EAAKI,EAAMC,GACjC,MAAM1kD,EAAQqkD,EAAIjiD,QAAQuU,YACpBoJ,EAAOskC,EAAI7pB,cACXz3B,EAAI4X,GAAO3a,GACjB,MAAO,CACHjB,EAAGwlD,GAAYxkC,EAAKlO,IAAK9O,EAAE8O,IAAK,EAAG6yC,GACnC70D,EAAG00D,GAAYxkC,EAAKjO,MAAO/O,EAAE+O,MAAO,EAAG2yC,GACvCh2D,EAAG81D,GAAYxkC,EAAKhO,OAAQhP,EAAEgP,OAAQ,EAAG2yC,GACzCl3D,EAAG+2D,GAAYxkC,EAAK/N,KAAMjP,EAAEiP,KAAM,EAAGyyC,GAE7C,CAqBmBE,CAAiBN,EAAKnxC,EAAQ,EAAGkC,EAAS,GACnDU,EArBV,SAA2BuuC,EAAKI,EAAMC,GAClC,MAAM,mBAAE/pB,GAAwB0pB,EAAIxnB,SAAS,CACzC,uBAEE78B,EAAQqkD,EAAIjiD,QAAQwiD,aACpB7hD,ED7+KN,SAAuB/C,GACvB,OAAOsa,GAAkBta,EAAO,CAC5B,UACA,WACA,aACA,eAER,CCs+Kc6kD,CAAc7kD,GAClB8kD,EAAOp3D,KAAKE,IAAI62D,EAAMC,GACtB3kC,EAAOskC,EAAI7pB,cACXuqB,EAAepqB,GAAsBt6B,EAASL,GACpD,MAAO,CACH4Z,QAAS2qC,IAAaQ,GAAgBhlC,EAAKlO,KAAOkO,EAAK/N,KAAMjP,EAAE6W,QAAS,EAAGkrC,GAC3E/qC,SAAUwqC,IAAaQ,GAAgBhlC,EAAKlO,KAAOkO,EAAKjO,MAAO/O,EAAEgX,SAAU,EAAG+qC,GAC9EjrC,WAAY0qC,IAAaQ,GAAgBhlC,EAAKhO,QAAUgO,EAAK/N,KAAMjP,EAAE8W,WAAY,EAAGirC,GACpFhrC,YAAayqC,IAAaQ,GAAgBhlC,EAAKhO,QAAUgO,EAAKjO,MAAO/O,EAAE+W,YAAa,EAAGgrC,GAE/F,CAMmBE,CAAkBX,EAAKnxC,EAAQ,EAAGkC,EAAS,GAC1D,MAAO,CACH6vC,MAAO,CACH30D,EAAG8hB,EAAOJ,KACVhP,EAAGoP,EAAOP,IACVpiB,EAAGyjB,EACHzlB,EAAG2nB,EACHU,UAEJovC,MAAO,CACH50D,EAAG8hB,EAAOJ,KAAOe,EAAOvlB,EACxBwV,EAAGoP,EAAOP,IAAMkB,EAAOhU,EACvBtP,EAAGyjB,EAAQH,EAAOvlB,EAAIulB,EAAOljB,EAC7BpC,EAAG2nB,EAASrC,EAAOhU,EAAIgU,EAAOtkB,EAC9BqnB,OAAQ,CACJ8D,QAASlsB,KAAKC,IAAI,EAAGmoB,EAAO8D,QAAUlsB,KAAKC,IAAIolB,EAAOhU,EAAGgU,EAAOvlB,IAChEusB,SAAUrsB,KAAKC,IAAI,EAAGmoB,EAAOiE,SAAWrsB,KAAKC,IAAIolB,EAAOhU,EAAGgU,EAAOljB,IAClEgqB,WAAYnsB,KAAKC,IAAI,EAAGmoB,EAAO+D,WAAansB,KAAKC,IAAIolB,EAAOtkB,EAAGskB,EAAOvlB,IACtEssB,YAAapsB,KAAKC,IAAI,EAAGmoB,EAAOgE,YAAcpsB,KAAKC,IAAIolB,EAAOtkB,EAAGskB,EAAOljB,MAIxF,CACA,SAASisC,GAAQuoB,EAAK/zD,EAAG0S,EAAG44B,GACxB,MAAMupB,EAAc,OAAN70D,EACR80D,EAAc,OAANpiD,EAERoP,EAASiyC,KADEc,GAASC,IACShB,GAAaC,EAAKzoB,GACrD,OAAOxpB,IAAW+yC,GAASv+C,GAAWtW,EAAG8hB,EAAOJ,KAAMI,EAAON,UAAYszC,GAASx+C,GAAW5D,EAAGoP,EAAOP,IAAKO,EAAOL,QACvH,CAIC,SAASszC,GAAkB12C,EAAK8H,GAC7B9H,EAAI8H,KAAKA,EAAKnmB,EAAGmmB,EAAKzT,EAAGyT,EAAKhnB,EAAGgnB,EAAKhpB,EAC1C,CACA,SAAS63D,GAAY7uC,EAAM8uC,EAAQC,EAAU,CAAC,GAC1C,MAAMl1D,EAAImmB,EAAKnmB,IAAMk1D,EAAQl1D,GAAKi1D,EAAS,EACrCviD,EAAIyT,EAAKzT,IAAMwiD,EAAQxiD,GAAKuiD,EAAS,EACrC91D,GAAKgnB,EAAKnmB,EAAImmB,EAAKhnB,IAAM+1D,EAAQl1D,EAAIk1D,EAAQ/1D,EAAI81D,EAAS,GAAKj1D,EAC/D7C,GAAKgpB,EAAKzT,EAAIyT,EAAKhpB,IAAM+3D,EAAQxiD,EAAIwiD,EAAQ/3D,EAAI83D,EAAS,GAAKviD,EACrE,MAAO,CACH1S,EAAGmmB,EAAKnmB,EAAIA,EACZ0S,EAAGyT,EAAKzT,EAAIA,EACZvT,EAAGgnB,EAAKhnB,EAAIA,EACZhC,EAAGgpB,EAAKhpB,EAAIA,EACZqoB,OAAQW,EAAKX,OAErB,CAunFA,SAAS2vC,GAAkBzlD,GACvB,MAAM+zB,EAASp2B,KAAKq2B,YACpB,OAAIh0B,GAAS,GAAKA,EAAQ+zB,EAAOj4B,OACtBi4B,EAAO/zB,GAEXA,CACX,CAjiCY,IAAI0lD,QAouChB,SAASC,GAAkB3lD,EAAO4lD,GAAY,WAAEnrB,EAAW,YAAEpnB,IACzD,MAAM0C,EAAMtQ,GAAU4N,GAChB/X,GAASm/B,EAAa/sC,KAAKgb,IAAIqN,GAAOroB,KAAKic,IAAIoM,KAAS,KACxDja,EAAS,IAAO8pD,GAAc,GAAK5lD,GAAOlE,OAChD,OAAOpO,KAAKE,IAAIg4D,EAAatqD,EAAOQ,EACxC,CACA,MAAM+pD,WAAwBzd,GAC1BzrC,YAAY2tB,GACR+d,MAAM/d,GACL3sB,KAAKyI,WAAQnI,EACbN,KAAK0I,SAAMpI,EACXN,KAAKmoD,iBAAc7nD,EACnBN,KAAKooD,eAAY9nD,EAClBN,KAAKqoD,YAAc,CACvB,CACAxyB,MAAM0C,EAAKv0B,GACP,OAAI5B,EAAcm2B,KAGE,iBAARA,GAAoBA,aAAe31B,UAAYC,UAAU01B,GAF1D,MAKHA,CACZ,CACA+vB,yBACI,MAAM,YAAE9zC,GAAiBxU,KAAKyE,SACxB,WAAE6yB,EAAW,WAAEC,GAAgBv3B,KAAKw3B,gBAC1C,IAAI,IAAEvnC,EAAI,IAAED,GAASgQ,KACrB,MAAMuoD,EAAU54D,GAAIM,EAAMqnC,EAAarnC,EAAMN,EACvC64D,EAAU74D,GAAIK,EAAMunC,EAAavnC,EAAML,EAC7C,GAAI6kB,EAAa,CACb,MAAMi0C,EAAUxhD,GAAKhX,GACfy4D,EAAUzhD,GAAKjX,GACjBy4D,EAAU,GAAKC,EAAU,EACzBF,EAAO,GACAC,EAAU,GAAKC,EAAU,GAChCH,EAAO,EAEf,CACA,GAAIt4D,IAAQD,EAAK,CACb,IAAIukB,EAAiB,IAARvkB,EAAY,EAAID,KAAKqX,IAAU,IAANpX,GACtCw4D,EAAOx4D,EAAMukB,GACRC,GACD+zC,EAAOt4D,EAAMskB,EAErB,CACAvU,KAAK/P,IAAMA,EACX+P,KAAKhQ,IAAMA,CACf,CACA24D,eACI,MAAMnc,EAAWxsC,KAAKyE,QAAQgK,MAC9B,IACIm6C,GADA,cAAElf,EAAc,SAAEmf,GAAcrc,EAepC,OAbIqc,GACAD,EAAW74D,KAAKu5C,KAAKtpC,KAAKhQ,IAAM64D,GAAY94D,KAAK0X,MAAMzH,KAAK/P,IAAM44D,GAAY,EAC1ED,EAAW,MACXxrC,QAAQC,KAAK,UAAUrd,KAAKmC,sBAAsB0mD,mCAA0CD,8BAC5FA,EAAW,OAGfA,EAAW5oD,KAAK8oD,mBAChBpf,EAAgBA,GAAiB,IAEjCA,IACAkf,EAAW74D,KAAKE,IAAIy5C,EAAekf,IAEhCA,CACX,CACHE,mBACO,OAAOlmD,OAAO+D,iBAClB,CACA0mC,aACI,MAAMhzB,EAAOra,KAAKyE,QACZ+nC,EAAWnyB,EAAK5L,MACtB,IAAIm6C,EAAW5oD,KAAK2oD,eACpBC,EAAW74D,KAAKC,IAAI,EAAG44D,GACvB,MAcMn6C,EA9Ld,SAAyBs6C,EAAmBC,GACxC,MAAMv6C,EAAQ,IAER,OAAEgG,EAAO,KAAEw/B,EAAK,IAAEhkD,EAAI,IAAED,EAAI,UAAEi5D,EAAU,MAAEngC,EAAM,SAAE8/B,EAAS,UAAEM,EAAU,cAAEC,GAAmBJ,EAC5FK,EAAOnV,GAAQ,EACfoV,EAAYT,EAAW,GACrB34D,IAAKq5D,EAAOt5D,IAAKu5D,GAAUP,EAC7B1xB,GAAcl1B,EAAcnS,GAC5BsnC,GAAcn1B,EAAcpS,GAC5Bw5D,GAAgBpnD,EAAc0mB,GAC9Bm/B,GAAcsB,EAAOD,IAASJ,EAAY,GAChD,IACI38B,EAAQk9B,EAASC,EAASC,EAD1BxgB,EAAU9hC,IAASkiD,EAAOD,GAAQD,EAAYD,GAAQA,EAE1D,GAAIjgB,EAXgB,QAWU7R,IAAeC,EACzC,MAAO,CACH,CACIl1B,MAAOinD,GAEX,CACIjnD,MAAOknD,IAInBI,EAAY55D,KAAKu5C,KAAKigB,EAAOpgB,GAAWp5C,KAAK0X,MAAM6hD,EAAOngB,GACtDwgB,EAAYN,IACZlgB,EAAU9hC,GAAQsiD,EAAYxgB,EAAUkgB,EAAYD,GAAQA,GAE3DhnD,EAAc6mD,KACf18B,EAASx8B,KAAKyN,IAAI,GAAIyrD,GACtB9f,EAAUp5C,KAAKu5C,KAAKH,EAAU5c,GAAUA,GAE7B,UAAX9X,GACAg1C,EAAU15D,KAAK0X,MAAM6hD,EAAOngB,GAAWA,EACvCugB,EAAU35D,KAAKu5C,KAAKigB,EAAOpgB,GAAWA,IAEtCsgB,EAAUH,EACVI,EAAUH,GAEVjyB,GAAcC,GAAc0c,GDp+SpC,SAAqBthD,EAAGwU,GACpB,MAAMyiD,EAAU75D,KAAKL,MAAMiD,GAC3B,OAAOi3D,EAAUziD,GAAWxU,GAAKi3D,EAAUziD,GAAWxU,CAC1D,CCi+S4Ck3D,EAAa75D,EAAMC,GAAOgkD,EAAM9K,EAAU,MAC9EwgB,EAAY55D,KAAKL,MAAMK,KAAKE,KAAKD,EAAMC,GAAOk5C,EAASyf,IACvDzf,GAAWn5C,EAAMC,GAAO05D,EACxBF,EAAUx5D,EACVy5D,EAAU15D,GACHw5D,GACPC,EAAUnyB,EAAarnC,EAAMw5D,EAC7BC,EAAUnyB,EAAavnC,EAAM05D,EAC7BC,EAAY7gC,EAAQ,EACpBqgB,GAAWugB,EAAUD,GAAWE,IAEhCA,GAAaD,EAAUD,GAAWtgB,EAE9BwgB,EADAziD,GAAayiD,EAAW55D,KAAKL,MAAMi6D,GAAYxgB,EAAU,KAC7Cp5C,KAAKL,MAAMi6D,GAEX55D,KAAKu5C,KAAKqgB,IAG9B,MAAMG,EAAgB/5D,KAAKC,IAAIgY,GAAemhC,GAAUnhC,GAAeyhD,IACvEl9B,EAASx8B,KAAKyN,IAAI,GAAI4E,EAAc6mD,GAAaa,EAAgBb,GACjEQ,EAAU15D,KAAKL,MAAM+5D,EAAUl9B,GAAUA,EACzCm9B,EAAU35D,KAAKL,MAAMg6D,EAAUn9B,GAAUA,EACzC,IAAIhtB,EAAI,EAgBR,IAfI+3B,IACI6xB,GAAiBM,IAAYx5D,GAC7Bwe,EAAM7I,KAAK,CACPvD,MAAOpS,IAEPw5D,EAAUx5D,GACVsP,IAEA2H,GAAanX,KAAKL,OAAO+5D,EAAUlqD,EAAI4pC,GAAW5c,GAAUA,EAAQt8B,EAAK+3D,GAAkB/3D,EAAKg4D,EAAYc,KAC5GxpD,KAEGkqD,EAAUx5D,GACjBsP,KAGFA,EAAIoqD,IAAapqD,EAAE,CACrB,MAAMiP,EAAYze,KAAKL,OAAO+5D,EAAUlqD,EAAI4pC,GAAW5c,GAAUA,EACjE,GAAIgL,GAAc/oB,EAAYxe,EAC1B,MAEJye,EAAM7I,KAAK,CACPvD,MAAOmM,GAEf,CAcA,OAbI+oB,GAAc4xB,GAAiBO,IAAY15D,EACvCye,EAAMtQ,QAAU+I,GAAauH,EAAMA,EAAMtQ,OAAS,GAAGkE,MAAOrS,EAAKg4D,GAAkBh4D,EAAKi4D,EAAYc,IACpGt6C,EAAMA,EAAMtQ,OAAS,GAAGkE,MAAQrS,EAEhCye,EAAM7I,KAAK,CACPvD,MAAOrS,IAGPunC,GAAcmyB,IAAY15D,GAClCye,EAAM7I,KAAK,CACPvD,MAAOqnD,IAGRj7C,CACX,CA2FsBs7C,CAdkB,CAC5BnB,WACAn0C,OAAQ4F,EAAK5F,OACbxkB,IAAKoqB,EAAKpqB,IACVD,IAAKqqB,EAAKrqB,IACVi5D,UAAWzc,EAASyc,UACpBhV,KAAMzH,EAASqc,SACf//B,MAAO0jB,EAAS1jB,MAChBogC,UAAWlpD,KAAKo2C,aAChBtZ,WAAY98B,KAAK4iC,eACjBltB,YAAa82B,EAAS92B,aAAe,EACrCyzC,eAA0C,IAA3B3c,EAAS2c,eAEVnpD,KAAKirC,QAAUjrC,MAajC,MAXoB,UAAhBqa,EAAK5F,QDvnTb,SAA4B3K,EAAO5F,EAAQ8jB,GAC3C,IAAIh2B,EAAG4R,EAAMvB,EACb,IAAIrQ,EAAI,EAAG4R,EAAOkG,EAAM3L,OAAQnM,EAAI4R,EAAM5R,IACtCqQ,EAAQyH,EAAM9X,GAAGg2B,GACZpgB,MAAMvF,KACP6B,EAAOjU,IAAMF,KAAKE,IAAIiU,EAAOjU,IAAKoS,GAClC6B,EAAOlU,IAAMD,KAAKC,IAAIkU,EAAOlU,IAAKqS,GAG9C,CC+mTY2nD,CAAmBv7C,EAAOzO,KAAM,SAEhCqa,EAAK7W,SACLiL,EAAMjL,UACNxD,KAAKyI,MAAQzI,KAAKhQ,IAClBgQ,KAAK0I,IAAM1I,KAAK/P,MAEhB+P,KAAKyI,MAAQzI,KAAK/P,IAClB+P,KAAK0I,IAAM1I,KAAKhQ,KAEbye,CACX,CACH0f,YACO,MAAM1f,EAAQzO,KAAKyO,MACnB,IAAIhG,EAAQzI,KAAK/P,IACbyY,EAAM1I,KAAKhQ,IAEf,GADA06C,MAAMvc,YACFnuB,KAAKyE,QAAQ8P,QAAU9F,EAAMtQ,OAAQ,CACrC,MAAMoW,GAAU7L,EAAMD,GAAS1Y,KAAKC,IAAIye,EAAMtQ,OAAS,EAAG,GAAK,EAC/DsK,GAAS8L,EACT7L,GAAO6L,CACX,CACAvU,KAAKmoD,YAAc1/C,EACnBzI,KAAKooD,UAAY1/C,EACjB1I,KAAKqoD,YAAc3/C,EAAMD,CAC7B,CACAqvB,iBAAiBz1B,GACb,OAAOmL,GAAanL,EAAOrC,KAAK0O,MAAMjK,QAAQiJ,OAAQ1N,KAAKyE,QAAQgK,MAAML,OAC7E,EAGJ,MAAM67C,WAAoB/B,GACtBj2B,UAAY,SACfA,gBAAkB,CACXxjB,MAAO,CACHxL,SAAUsM,GAAMlB,WAAWE,UAGnCu+B,sBACI,MAAM,IAAE78C,EAAI,IAAED,GAASgQ,KAAK82B,WAAU,GACtC92B,KAAK/P,IAAM0S,EAAe1S,GAAOA,EAAM,EACvC+P,KAAKhQ,IAAM2S,EAAe3S,GAAOA,EAAM,EACvCgQ,KAAKsoD,wBACT,CACHQ,mBACO,MAAMhsB,EAAa98B,KAAK4iC,eAClBzkC,EAAS2+B,EAAa98B,KAAKuV,MAAQvV,KAAKyX,OACxC/B,EAAc5N,GAAU9H,KAAKyE,QAAQgK,MAAMiH,aAC3C/X,GAASm/B,EAAa/sC,KAAKgb,IAAI2K,GAAe3lB,KAAKic,IAAI0J,KAAiB,KACxEk8B,EAAW5xC,KAAKiyC,wBAAwB,GAC9C,OAAOliD,KAAKu5C,KAAKnrC,EAASpO,KAAKE,IAAI,GAAI2hD,EAAS/gC,WAAalT,GACjE,CACAm+B,iBAAiBz5B,GACb,OAAiB,OAAVA,EAAiBw0B,IAAM72B,KAAKuyC,oBAAoBlwC,EAAQrC,KAAKmoD,aAAenoD,KAAKqoD,YAC5F,CACA/V,iBAAiBt7B,GACb,OAAOhX,KAAKmoD,YAAcnoD,KAAKyyC,mBAAmBz7B,GAAShX,KAAKqoD,WACpE,EAoEkB94C,GAAMlB,WAAWc,YAsXjBI,GAAMlB,WAAWE,QC17UvCwvC,GAAM/qC,SAASpS,MAAQ,UAChB,MAAM,GAAS,CACpByE,EAAG,CACDiP,SAAS,EACT7F,MAAO,CACLs9B,aAAc,GAGhBme,UAAW,CACTtpD,MAAO,UACPupD,cAAe,aAIRC,GAAa,UACbC,GAAa,UACbC,GAAqB,UCdnB,SAASC,GAAgBv5C,EAAKw5C,GAC3C,IAAIC,GAAyB,EAC7B,MAAMC,EAAY7/B,KAAKC,MACjB6/B,EAAiB,CACrB9yB,MAAO,gBACPphB,KAAM,CAAC,CACL9jB,EAAG,EACH0S,EAAG,IAEL6K,YAAak6C,GACbpxC,YAAa,IACb4xC,YAAa,GAETC,EAAkB,CACtBhzB,MAAO,iBACPphB,KAAM,CAAC,CACL9jB,EAAG,EACH0S,EAAG,IAEL6K,YAAam6C,GACbrxC,YAAa,IACb4xC,YAAa,GAET/yB,EAAQ,CAAC,MACTnpB,EAAQ,IAAIqvC,GAAM/sC,EAAK,CAC3B/R,KAAM,OACNwX,KAAM,CACJ2f,OAAQyB,EACR1nB,SAAU,CAACw6C,EAAgBE,IAE7BpmD,QAAS,CACPuL,UAAW,CACTsD,SAAU,IAEZvB,OAAM,MAGV/R,KAAKstB,OAASw9B,IACZ,MACMC,EAAUh7D,KAAK0X,OAAOojB,KAAKC,MAAQ4/B,GAAa,KAChDM,EAAM,GAAGD,KACGN,EAAwB,GAAK5yB,EAAM4yB,IAA0BO,EAE7EnzB,EAAMjyB,KAAK,KAEXiyB,EAAMjyB,KAAKolD,GACXP,EAAwB5yB,EAAM15B,OAAS,GAErC05B,EAAM15B,OAVI,KAWZ05B,EAAMpG,QACNg5B,KAEF,MAAMQ,EAAST,EAAS/sC,KAAKwtC,OAC7BN,EAAel0C,KAAK7Q,KAAK,CACvBjT,EAAGo4D,EACH1lD,EAAG4lD,EAAOC,WAEZL,EAAgBp0C,KAAK7Q,KAAK,CACxBjT,EAAGo4D,EACH1lD,EAAG4lD,EAAOE,aAERR,EAAel0C,KAAKtY,OAvBV,KAwBZwsD,EAAel0C,KAAKgb,QACpBo5B,EAAgBp0C,KAAKgb,SAEnBq5B,GACFp8C,EAAM4e,QACR,EAEFttB,KAAK2T,OAAS,KACZjF,EAAMiF,QAAQ,CAElB,CAzEAoqC,GAAMtH,SF+/DN,cAA6BzkB,GACzBC,UAAY,OACfA,gBAAkB,CACXc,mBAAoB,OACpBC,gBAAiB,QACjBhhB,UAAU,EACVqR,UAAU,GAEjB4O,iBAAmB,CACZlgB,OAAQ,CACJq5C,QAAS,CACLnsD,KAAM,YAEVosD,QAAS,CACLpsD,KAAM,YAIlBg0B,aACIjzB,KAAK2yB,qBAAsB,EAC3B3yB,KAAK4yB,oBAAqB,EAC1B8X,MAAMzX,YACV,CACA3F,OAAOjc,GACH,MAAMye,EAAO9vB,KAAK4wB,aACV2C,QAASnZ,EAAO3D,KAAM0L,EAAS,GAAG,SAAEw+B,GAAc7wB,EACpDw7B,EAAqBtrD,KAAK0O,MAAM4qB,oBACtC,IAAI,MAAE7wB,EAAM,MAAEqgB,GDj7ClB,SAA0CgH,EAAM3N,EAAQmpC,GACxD,MAAMC,EAAappC,EAAOhkB,OAC1B,IAAIsK,EAAQ,EACRqgB,EAAQyiC,EACZ,GAAIz7B,EAAKiG,QAAS,CACd,MAAM,OAAEjF,EAAO,QAAEa,GAAa7B,EACxBkB,EAAOF,EAAOE,MACd,IAAE/gC,EAAI,IAAED,EAAI,WAAEsnC,EAAW,WAAEC,GAAgBzG,EAAO0G,gBACpDF,IACA7uB,EAAQO,GAAYjZ,KAAKE,IACzBuZ,GAAamoB,EAASX,EAAM/gC,GAAKsZ,GACjC+hD,EAAqBC,EAAa/hD,GAAa2Y,EAAQ6O,EAAMF,EAAOgL,iBAAiB7rC,IAAMsZ,IAAK,EAAGgiD,EAAa,IAGhHziC,EADAyO,EACQvuB,GAAYjZ,KAAKC,IACzBwZ,GAAamoB,EAASb,EAAOE,KAAMhhC,GAAK,GAAMsZ,GAAK,EACnDgiD,EAAqB,EAAI9hD,GAAa2Y,EAAQ6O,EAAMF,EAAOgL,iBAAiB9rC,IAAM,GAAMsZ,GAAK,GAAIb,EAAO8iD,GAAc9iD,EAE9G8iD,EAAa9iD,CAE7B,CACA,MAAO,CACHA,QACAqgB,QAER,CCw5CiC0iC,CAAiC17B,EAAM3N,EAAQmpC,GACxEtrD,KAAKyyB,WAAahqB,EAClBzI,KAAK0yB,WAAa5J,EDp5CtB,SAA6BgH,GAC7B,MAAM,OAAEsE,EAAO,OAAEE,EAAO,aAAEm3B,GAAkB37B,EACtC47B,EAAY,CACdC,KAAMv3B,EAAOnkC,IACb27D,KAAMx3B,EAAOpkC,IACb67D,KAAMv3B,EAAOrkC,IACb67D,KAAMx3B,EAAOtkC,KAEjB,IAAKy7D,EAED,OADA37B,EAAK27B,aAAeC,GACb,EAEX,MAAM/pB,EAAU8pB,EAAaE,OAASv3B,EAAOnkC,KAAOw7D,EAAaG,OAASx3B,EAAOpkC,KAAOy7D,EAAaI,OAASv3B,EAAOrkC,KAAOw7D,EAAaK,OAASx3B,EAAOtkC,IAEzJ,OADA+N,OAAOC,OAAOytD,EAAcC,GACrB/pB,CACX,CCs4CYoqB,CAAoBj8B,KACpBrnB,EAAQ,EACRqgB,EAAQ3G,EAAOhkB,QAEnBic,EAAK6T,OAASjuB,KAAK0O,MACnB0L,EAAK4xC,cAAgBhsD,KAAKgE,MAC1BoW,EAAKgsC,aAAezF,EAASyF,WAC7BhsC,EAAK+H,OAASA,EACd,MAAM1d,EAAUzE,KAAKo4B,6BAA6B/mB,GAC7CrR,KAAKyE,QAAQuN,WACdvN,EAAQuU,YAAc,GAE1BvU,EAAQukB,QAAUhpB,KAAKyE,QAAQukB,QAC/BhpB,KAAK25B,cAAcvf,OAAM9Z,EAAW,CAChC2rD,UAAWX,EACX7mD,WACD4M,GACHrR,KAAKw6B,eAAerY,EAAQ1Z,EAAOqgB,EAAOzX,EAC9C,CACAmpB,eAAerY,EAAQ1Z,EAAOqgB,EAAOzX,GACjC,MAAMsjB,EAAiB,UAATtjB,GACR,OAAEyf,EAAO,OAAER,EAAO,SAAE6C,EAAS,SAAEwtB,GAAc3gD,KAAK4wB,aAClD,cAAEyI,EAAc,eAAED,GAAoBp5B,KAAKu5B,kBAAkB9wB,EAAO4I,GACpE0f,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,MACf,SAAE3N,EAAS,QAAE2F,GAAahpB,KAAKyE,QAC/BynD,EAAevkD,GAAS0b,GAAYA,EAAWzgB,OAAO+D,kBACtDwlD,EAAensD,KAAK0O,MAAM4qB,qBAAuB3E,GAAkB,SAATtjB,EAC1D3I,EAAMD,EAAQqgB,EACdsjC,EAAcjqC,EAAOhkB,OAC3B,IAAIkuD,EAAa5jD,EAAQ,GAAKzI,KAAKy2B,UAAUhuB,EAAQ,GACrD,IAAI,IAAIzW,EAAI,EAAGA,EAAIo6D,IAAep6D,EAAE,CAChC,MAAMonB,EAAQ+I,EAAOnwB,GACfyhB,EAAa04C,EAAe/yC,EAAQ,CAAC,EAC3C,GAAIpnB,EAAIyW,GAASzW,GAAK0W,EAAK,CACvB+K,EAAW2O,MAAO,EAClB,QACJ,CACA,MAAMuO,EAAS3wB,KAAKy2B,UAAUzkC,GACxBs6D,EAAWlqD,EAAcuuB,EAAOM,IAChC7M,EAAS3Q,EAAWsd,GAASD,EAAOgL,iBAAiBnL,EAAOI,GAAQ/+B,GACpEqyB,EAAS5Q,EAAWwd,GAAS0D,GAAS23B,EAAWh8B,EAAOoiB,eAAiBpiB,EAAOwL,iBAAiB3I,EAAWnzB,KAAKwvB,WAAWc,EAAQK,EAAQwC,GAAYxC,EAAOM,GAAQj/B,GAC7KyhB,EAAW2O,KAAOxa,MAAMwc,IAAWxc,MAAMyc,IAAWioC,EACpD74C,EAAWwY,KAAOj6B,EAAI,GAAKjC,KAAKqX,IAAIupB,EAAOI,GAASs7B,EAAWt7B,IAAUm7B,EACrEljC,IACAvV,EAAWkd,OAASA,EACpBld,EAAW8kB,IAAMooB,EAASlqC,KAAKzkB,IAE/BonC,IACA3lB,EAAWhP,QAAU40B,GAAiBr5B,KAAKq4B,0BAA0BrmC,EAAGonB,EAAM1F,OAAS,SAAWrC,IAEjG86C,GACDnsD,KAAK25B,cAAcvgB,EAAOpnB,EAAGyhB,EAAYpC,GAE7Cg7C,EAAa17B,CACjB,CACJ,CACHgH,iBACO,MAAM7H,EAAO9vB,KAAK4wB,YACZ2C,EAAUzD,EAAKyD,QACfne,EAASme,EAAQ9uB,SAAW8uB,EAAQ9uB,QAAQuU,aAAe,EAC3DvC,EAAOqZ,EAAKrZ,MAAQ,GAC1B,IAAKA,EAAKtY,OACN,OAAOiX,EAEX,MAAMmN,EAAa9L,EAAK,GAAGrQ,KAAKpG,KAAKq4B,0BAA0B,IACzDk0B,EAAY91C,EAAKA,EAAKtY,OAAS,GAAGiI,KAAKpG,KAAKq4B,0BAA0B5hB,EAAKtY,OAAS,IAC1F,OAAOpO,KAAKC,IAAIolB,EAAQmN,EAAYgqC,GAAa,CACrD,CACArhC,OACI,MAAM4E,EAAO9vB,KAAK4wB,YAClBd,EAAKyD,QAAQi5B,oBAAoBxsD,KAAK0O,MAAMypB,UAAWrI,EAAKgB,OAAOE,MACnE0Z,MAAMxf,MACV,GAunJJ,cAA0B4d,GACtB7W,UAAY,OACfA,gBAAkB,CACXzI,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjB3Q,YAAa,EACb0L,iBAAiB,EACjBpB,uBAAwB,UACxBvK,MAAM,EACNsK,UAAU,EACVkiC,SAAS,EACT9gC,QAAS,GAEhBwN,qBAAuB,CAChBhiB,gBAAiB,kBACjBC,YAAa,eAEjB+hB,mBAAqB,CACjBhf,aAAa,EACbE,WAAad,GAAgB,eAATA,GAAkC,SAATA,GAEjDrT,YAAY2tB,GACR+d,QACA1qC,KAAKisD,UAAW,EAChBjsD,KAAKyE,aAAUnE,EACfN,KAAKiuB,YAAS3tB,EACdN,KAAKgtB,WAAQ1sB,EACbN,KAAKysD,eAAYnsD,EACjBN,KAAK0sD,WAAQpsD,EACbN,KAAK2sD,aAAUrsD,EACfN,KAAK4sD,eAAYtsD,EACjBN,KAAKomD,YAAa,EAClBpmD,KAAK6sD,gBAAiB,EACtB7sD,KAAKgsD,mBAAgB1rD,EACjBqsB,GACA5uB,OAAOC,OAAOgC,KAAM2sB,EAE5B,CACA6/B,oBAAoBr0B,EAAWhnB,GAC3B,MAAM1M,EAAUzE,KAAKyE,QACrB,IAAKA,EAAQggB,SAA8C,aAAnChgB,EAAQ6e,0BAA2C7e,EAAQ8gD,UAAYvlD,KAAK6sD,eAAgB,CAChH,MAAMr5C,EAAO/O,EAAQ4e,SAAWrjB,KAAKgtB,MAAQhtB,KAAKysD,UAClDtpC,GAA2BnjB,KAAK2sD,QAASloD,EAAS0zB,EAAW3kB,EAAMrC,GACnEnR,KAAK6sD,gBAAiB,CAC1B,CACJ,CACI1qC,WAAOA,GACPniB,KAAK2sD,QAAUxqC,SACRniB,KAAK4sD,iBACL5sD,KAAK0sD,MACZ1sD,KAAK6sD,gBAAiB,CAC1B,CACI1qC,aACA,OAAOniB,KAAK2sD,OAChB,CACIG,eACA,OAAO9sD,KAAK4sD,YAAc5sD,KAAK4sD,UDntItC,SAA0BxyC,EAAM2yC,GAC7B,MAAM5qC,EAAS/H,EAAK+H,OACdkB,EAAWjJ,EAAK3V,QAAQ4e,SACxByF,EAAQ3G,EAAOhkB,OACrB,IAAK2qB,EACD,MAAO,GAEX,MAAMtV,IAAS4G,EAAK4S,OACd,MAAEvkB,EAAM,IAAEC,GAnEnB,SAAyByZ,EAAQ2G,EAAOtV,EAAM6P,GAC3C,IAAI5a,EAAQ,EACRC,EAAMogB,EAAQ,EAClB,GAAItV,IAAS6P,EACT,KAAM5a,EAAQqgB,IAAU3G,EAAO1Z,GAAO2Z,MAClC3Z,IAGR,KAAMA,EAAQqgB,GAAS3G,EAAO1Z,GAAO2Z,MACjC3Z,IAMJ,IAJAA,GAASqgB,EACLtV,IACA9K,GAAOD,GAELC,EAAMD,GAAS0Z,EAAOzZ,EAAMogB,GAAO1G,MACrC1Z,IAGJ,OADAA,GAAOogB,EACA,CACHrgB,QACAC,MAER,CA4C6BskD,CAAgB7qC,EAAQ2G,EAAOtV,EAAM6P,GAC9D,OAaH,SAAuBjJ,EAAM0yC,EAAU3qC,EAAQ4qC,GAC5C,OAAKA,GAAmBA,EAAe3sC,YAAe+B,EAKzD,SAAyB/H,EAAM0yC,EAAU3qC,EAAQ4qC,GAC9C,MAAME,EAAe7yC,EAAK6T,OAAO5W,aAC3B61C,EAAY3jC,GAAUnP,EAAK3V,UACzBunD,cAAejoD,EAAeU,SAAS,SAAE4e,IAAiBjJ,EAC5D0O,EAAQ3G,EAAOhkB,OACf6nB,EAAS,GACf,IAAI6D,EAAYqjC,EACZzkD,EAAQqkD,EAAS,GAAGrkD,MACpBzW,EAAIyW,EACR,SAAS0kD,EAAS17D,EAAGR,EAAGpB,EAAGu9D,GACvB,MAAMC,EAAMhqC,GAAY,EAAI,EAC5B,GAAI5xB,IAAMR,EAAV,CAIA,IADAQ,GAAKq3B,EACC3G,EAAO1wB,EAAIq3B,GAAO1G,MACpB3wB,GAAK47D,EAET,KAAMlrC,EAAOlxB,EAAI63B,GAAO1G,MACpBnxB,GAAKo8D,EAEL57D,EAAIq3B,GAAU73B,EAAI63B,IAClB9C,EAAOpgB,KAAK,CACR6C,MAAOhX,EAAIq3B,EACXpgB,IAAKzX,EAAI63B,EACTtV,KAAM3jB,EACN+gB,MAAOw8C,IAEXvjC,EAAYujC,EACZ3kD,EAAQxX,EAAI63B,EAhBhB,CAkBJ,CACA,IAAK,MAAME,KAAW8jC,EAAS,CAC3BrkD,EAAQ4a,EAAW5a,EAAQugB,EAAQvgB,MACnC,IACImI,EADA4T,EAAOrC,EAAO1Z,EAAQqgB,GAE1B,IAAI92B,EAAIyW,EAAQ,EAAGzW,GAAKg3B,EAAQtgB,IAAK1W,IAAI,CACrC,MAAMkxB,EAAKf,EAAOnwB,EAAI82B,GACtBlY,EAAQ2Y,GAAUwjC,EAAe3sC,WAAWzC,GAAcsvC,EAAc,CACpEhuD,KAAM,UACNquD,GAAI9oC,EACJ9lB,GAAIwkB,EACJqqC,aAAcv7D,EAAI,GAAK82B,EACvB0kC,YAAax7D,EAAI82B,EACjB/kB,mBAEA6lB,GAAahZ,EAAOiZ,IACpBsjC,EAAS1kD,EAAOzW,EAAI,EAAGg3B,EAAQxV,KAAMqW,GAEzCrF,EAAOtB,EACP2G,EAAYjZ,CAChB,CACInI,EAAQzW,EAAI,GACZm7D,EAAS1kD,EAAOzW,EAAI,EAAGg3B,EAAQxV,KAAMqW,EAE7C,CACA,OAAO7D,CACX,CA3DWynC,CAAgBrzC,EAAM0yC,EAAU3qC,EAAQ4qC,GAFpCD,CAGf,CAjBeY,CAActzC,GADR,IAAbiJ,EAC2B,CACvB,CACI5a,QACAC,MACA8K,SAjDf,SAAuB2O,EAAQ1Z,EAAOzY,EAAKwjB,GACxC,MAAMsV,EAAQ3G,EAAOhkB,OACf6nB,EAAS,GACf,IAEItd,EAFAe,EAAOhB,EACP+b,EAAOrC,EAAO1Z,GAElB,IAAIC,EAAMD,EAAQ,EAAGC,GAAO1Y,IAAO0Y,EAAI,CACnC,MAAMqjB,EAAM5J,EAAOzZ,EAAMogB,GACrBiD,EAAI3J,MAAQ2J,EAAIE,KACXzH,EAAKpC,OACN5O,GAAO,EACPwS,EAAOpgB,KAAK,CACR6C,MAAOA,EAAQqgB,EACfpgB,KAAMA,EAAM,GAAKogB,EACjBtV,SAEJ/K,EAAQgB,EAAOsiB,EAAIE,KAAOvjB,EAAM,OAGpCe,EAAOf,EACH8b,EAAKpC,OACL3Z,EAAQC,IAGhB8b,EAAOuH,CACX,CAQA,OAPa,OAATtiB,GACAuc,EAAOpgB,KAAK,CACR6C,MAAOA,EAAQqgB,EACfpgB,IAAKe,EAAOqf,EACZtV,SAGDwS,CACX,CAqB+B2nC,CAAcxrC,EAAQ1Z,EAFrCC,EAAMD,EAAQC,EAAMogB,EAAQpgB,IACjB0R,EAAKqyC,WAAuB,IAAVhkD,GAAeC,IAAQogB,EAAQ,GAHjE3G,EAAQ4qC,EAKnB,CC8rImDa,CAAiB5tD,KAAMA,KAAKyE,QAAQukB,SACnF,CACHslB,QACO,MAAMwe,EAAW9sD,KAAK8sD,SAChB3qC,EAASniB,KAAKmiB,OACpB,OAAO2qC,EAAS3uD,QAAUgkB,EAAO2qC,EAAS,GAAGrkD,MACjD,CACHgB,OACO,MAAMqjD,EAAW9sD,KAAK8sD,SAChB3qC,EAASniB,KAAKmiB,OACd2G,EAAQgkC,EAAS3uD,OACvB,OAAO2qB,GAAS3G,EAAO2qC,EAAShkC,EAAQ,GAAGpgB,IAC/C,CACHvH,YAAYiY,EAAO4O,GACZ,MAAMvjB,EAAUzE,KAAKyE,QACfpC,EAAQ+W,EAAM4O,GACd7F,EAASniB,KAAKmiB,OACd2qC,ED1yIb,SAAwB1yC,EAAM3F,GAC3B,MAAMuR,EAAS,GACT8mC,EAAW1yC,EAAK0yC,SACtB,IAAI,IAAI96D,EAAI,EAAGA,EAAI86D,EAAS3uD,OAAQnM,IAAI,CACpC,MAAM67D,EAAM9kC,GAAc+jC,EAAS96D,GAAIooB,EAAK+H,OAAQ1N,GAChDo5C,EAAI1vD,QACJ6nB,EAAOpgB,QAAQioD,EAEvB,CACA,OAAO7nC,CACX,CCgyIyB8nC,CAAe9tD,KAAM,CAClCgoB,WACAvf,MAAOpG,EACPqG,IAAKrG,IAET,IAAKyqD,EAAS3uD,OACV,OAEJ,MAAM6nB,EAAS,GACT+nC,EA/Hb,SAAiCtpD,GAC9B,OAAIA,EAAQ8gD,QACDl9B,GAEP5jB,EAAQggB,SAA8C,aAAnChgB,EAAQ6e,uBACpBgF,GAEJF,EACX,CAuH6B4lC,CAAwBvpD,GAC7C,IAAIzS,EAAG4R,EACP,IAAI5R,EAAI,EAAG4R,EAAOkpD,EAAS3uD,OAAQnM,EAAI4R,IAAQ5R,EAAE,CAC7C,MAAM,MAAEyW,EAAM,IAAEC,GAASokD,EAAS96D,GAC5B0M,EAAKyjB,EAAO1Z,GACZ9J,EAAKwjB,EAAOzZ,GAClB,GAAIhK,IAAOC,EAAI,CACXqnB,EAAOpgB,KAAKlH,GACZ,QACJ,CACA,MACMuvD,EAAeF,EAAarvD,EAAIC,EAD5B5O,KAAKqX,KAAK/E,EAAQ3D,EAAGspB,KAAcrpB,EAAGqpB,GAAYtpB,EAAGspB,KAClBvjB,EAAQ8gD,SACrD0I,EAAajmC,GAAY5O,EAAM4O,GAC/BhC,EAAOpgB,KAAKqoD,EAChB,CACA,OAAyB,IAAlBjoC,EAAO7nB,OAAe6nB,EAAO,GAAKA,CAC7C,CACHq/B,YAAYr0C,EAAKgY,EAAS0X,GAEnB,OADsBylB,GAAkBnmD,KACjCkuD,CAAcl9C,EAAKhR,KAAMgpB,EAAS0X,EAC7C,CACHytB,KAAKn9C,EAAKvI,EAAOqgB,GACV,MAAMgkC,EAAW9sD,KAAK8sD,SAChBoB,EAAgB/H,GAAkBnmD,MACxC,IAAIwT,EAAOxT,KAAKgtB,MAChBvkB,EAAQA,GAAS,EACjBqgB,EAAQA,GAAS9oB,KAAKmiB,OAAOhkB,OAASsK,EACtC,IAAK,MAAMugB,KAAW8jC,EAClBt5C,GAAQ06C,EAAcl9C,EAAKhR,KAAMgpB,EAAS,CACtCvgB,QACAC,IAAKD,EAAQqgB,EAAQ,IAG7B,QAAStV,CACb,CACH0X,KAAKla,EAAKmnB,EAAW1vB,EAAOqgB,GACrB,MAAMrkB,EAAUzE,KAAKyE,SAAW,CAAC,GAClBzE,KAAKmiB,QAAU,IACnBhkB,QAAUsG,EAAQuU,cACzBhI,EAAIsG,OAlIhB,SAActG,EAAKoJ,EAAM3R,EAAOqgB,GACxBu9B,KAAcjsC,EAAK3V,QAAQukB,QA5BnC,SAA6BhY,EAAKoJ,EAAM3R,EAAOqgB,GAC3C,IAAIqlC,EAAO/zC,EAAKsyC,MACXyB,IACDA,EAAO/zC,EAAKsyC,MAAQ,IAAIpG,OACpBlsC,EAAK+zC,KAAKA,EAAM1lD,EAAOqgB,IACvBqlC,EAAKz1C,aAGbksC,GAAS5zC,EAAKoJ,EAAK3V,SACnBuM,EAAIiI,OAAOk1C,EACf,CAmBQC,CAAoBp9C,EAAKoJ,EAAM3R,EAAOqgB,GAlB9C,SAA0B9X,EAAKoJ,EAAM3R,EAAOqgB,GACxC,MAAM,SAAEgkC,EAAS,QAAEroD,GAAa2V,EAC1B8zC,EAAgB/H,GAAkB/rC,GACxC,IAAK,MAAM4O,KAAW8jC,EAClBlI,GAAS5zC,EAAKvM,EAASukB,EAAQpY,OAC/BI,EAAIuH,YACA21C,EAAcl9C,EAAKoJ,EAAM4O,EAAS,CAClCvgB,QACAC,IAAKD,EAAQqgB,EAAQ,KAErB9X,EAAI0H,YAER1H,EAAIiI,QAEZ,CAMQo1C,CAAiBr9C,EAAKoJ,EAAM3R,EAAOqgB,EAE3C,CA6HYoC,CAAKla,EAAKhR,KAAMyI,EAAOqgB,GACvB9X,EAAI0G,WAEJ1X,KAAKisD,WACLjsD,KAAK6sD,gBAAiB,EACtB7sD,KAAK0sD,WAAQpsD,EAErB,GAUJ,cAA2BwoC,GACvB7W,UAAY,QACZtB,OACAvO,KACA6J,KAGEgG,gBAAkB,CAChBjZ,YAAa,EACbwtC,UAAW,EACX8H,iBAAkB,EAClBC,YAAa,EACbt2C,WAAY,SACZE,OAAQ,EACRD,SAAU,GAIZ+Z,qBAAuB,CACrBhiB,gBAAiB,kBACjBC,YAAa,eAEjBlR,YAAY2tB,GACR+d,QACA1qC,KAAKyE,aAAUnE,EACfN,KAAK2wB,YAASrwB,EACdN,KAAKoiB,UAAO9hB,EACZN,KAAKisB,UAAO3rB,EACRqsB,GACA5uB,OAAOC,OAAOgC,KAAM2sB,EAE5B,CACAwR,QAAQqwB,EAAQC,EAAQxwB,GACpB,MAAMx5B,EAAUzE,KAAKyE,SACf,EAAE9R,EAAE,EAAE0S,GAAOrF,KAAKk/B,SAAS,CAC7B,IACA,KACDjB,GACH,OAAOluC,KAAKyN,IAAIgxD,EAAS77D,EAAG,GAAK5C,KAAKyN,IAAIixD,EAASppD,EAAG,GAAKtV,KAAKyN,IAAIiH,EAAQ+hD,UAAY/hD,EAAQ0T,OAAQ,EAC5G,CACAu2C,SAASF,EAAQvwB,GACb,OAAOsoB,GAAUvmD,KAAMwuD,EAAQ,IAAKvwB,EACxC,CACA0wB,SAASF,EAAQxwB,GACb,OAAOsoB,GAAUvmD,KAAMyuD,EAAQ,IAAKxwB,EACxC,CACAY,eAAeZ,GACX,MAAM,EAAEtrC,EAAE,EAAE0S,GAAOrF,KAAKk/B,SAAS,CAC7B,IACA,KACDjB,GACH,MAAO,CACHtrC,IACA0S,IAER,CACAe,KAAK3B,GAED,IAAI0T,GADJ1T,EAAUA,GAAWzE,KAAKyE,SAAW,CAAC,GACjB0T,QAAU,EAG/B,OAFAA,EAASpoB,KAAKC,IAAImoB,EAAQA,GAAU1T,EAAQ8pD,aAAe,GAE3B,GAAxBp2C,GADYA,GAAU1T,EAAQuU,aAAe,GAEzD,CACAkS,KAAKla,EAAKqI,GACN,MAAM5U,EAAUzE,KAAKyE,QACjBzE,KAAKoiB,MAAQ3d,EAAQ0T,OAAS,KAAQgB,GAAenZ,KAAMqZ,EAAMrZ,KAAKoG,KAAK3B,GAAW,KAG1FuM,EAAI8J,YAAcrW,EAAQyL,YAC1Bc,EAAI6D,UAAYpQ,EAAQuU,YACxBhI,EAAI+J,UAAYtW,EAAQwL,gBACxB0H,GAAU3G,EAAKvM,EAASzE,KAAKrN,EAAGqN,KAAKqF,GACzC,CACAs4B,WACI,MAAMl5B,EAAUzE,KAAKyE,SAAW,CAAC,EAEjC,OAAOA,EAAQ0T,OAAS1T,EAAQ+hD,SACpC,GEv7NsDyD,GFwqT1D,cAA4Bxf,GACxBxY,UAAY,WACfA,gBAAkB,CACXxjB,MAAO,CACHxL,SAAU6kD,KAGlB9oD,YAAY2tB,GACR+d,MAAM/d,GACL3sB,KAAKmoD,iBAAc7nD,EACpBN,KAAKqoD,YAAc,EACnBroD,KAAK4uD,aAAe,EACxB,CACA9iB,KAAKuO,GACD,MAAMwU,EAAQ7uD,KAAK4uD,aACnB,GAAIC,EAAM1wD,OAAQ,CACd,MAAMi4B,EAASp2B,KAAKq2B,YACpB,IAAK,MAAM,MAAEryB,EAAM,MAAE6zB,KAAYg3B,EACzBz4B,EAAOpyB,KAAW6zB,GAClBzB,EAAOjsB,OAAOnG,EAAO,GAG7BhE,KAAK4uD,aAAe,EACxB,CACAlkB,MAAMoB,KAAKuO,EACf,CACAxkB,MAAM0C,EAAKv0B,GACP,GAAI5B,EAAcm2B,GACd,OAAO,KAEX,MAAMnC,EAASp2B,KAAKq2B,YAEpB,MAxCW,EAACryB,EAAOhU,IAAgB,OAAVgU,EAAiB,KAAOgF,GAAYjZ,KAAKL,MAAMsU,GAAQ,EAAGhU,GAwC5Eg6C,CADPhmC,EAAQnB,SAASmB,IAAUoyB,EAAOpyB,KAAWu0B,EAAMv0B,EA/C3D,SAAwBoyB,EAAQmC,EAAKv0B,EAAO8qD,GACxC,MAAMxgB,EAAQlY,EAAO7xB,QAAQg0B,GAC7B,OAAe,IAAX+V,EAdY,EAAClY,EAAQmC,EAAKv0B,EAAO8qD,KAClB,iBAARv2B,GACPv0B,EAAQoyB,EAAOxwB,KAAK2yB,GAAO,EAC3Bu2B,EAAYC,QAAQ,CAChB/qD,QACA6zB,MAAOU,KAEJ3wB,MAAM2wB,KACbv0B,EAAQ,MAELA,GAKIgrD,CAAY54B,EAAQmC,EAAKv0B,EAAO8qD,GAGpCxgB,IADMlY,EAAO64B,YAAY12B,GACRv0B,EAAQsqC,CACpC,CAwCmE4gB,CAAe94B,EAAQmC,EAAKv1B,EAAegB,EAAOu0B,GAAMv4B,KAAK4uD,cAC/Fx4B,EAAOj4B,OAAS,EAC7C,CACA2uC,sBACI,MAAM,WAAExV,EAAW,WAAEC,GAAgBv3B,KAAKw3B,gBAC1C,IAAI,IAAEvnC,EAAI,IAAED,GAASgQ,KAAK82B,WAAU,GACR,UAAxB92B,KAAKyE,QAAQgQ,SACR6iB,IACDrnC,EAAM,GAELsnC,IACDvnC,EAAMgQ,KAAKq2B,YAAYl4B,OAAS,IAGxC6B,KAAK/P,IAAMA,EACX+P,KAAKhQ,IAAMA,CACf,CACAq9C,aACI,MAAMp9C,EAAM+P,KAAK/P,IACXD,EAAMgQ,KAAKhQ,IACXukB,EAASvU,KAAKyE,QAAQ8P,OACtB9F,EAAQ,GACd,IAAI2nB,EAASp2B,KAAKq2B,YAClBD,EAAiB,IAARnmC,GAAaD,IAAQomC,EAAOj4B,OAAS,EAAIi4B,EAASA,EAAO3zB,MAAMxS,EAAKD,EAAM,GACnFgQ,KAAKqoD,YAAct4D,KAAKC,IAAIomC,EAAOj4B,QAAUoW,EAAS,EAAI,GAAI,GAC9DvU,KAAKmoD,YAAcnoD,KAAK/P,KAAOskB,EAAS,GAAM,GAC9C,IAAI,IAAIlS,EAAQpS,EAAKoS,GAASrS,EAAKqS,IAC/BoM,EAAM7I,KAAK,CACPvD,UAGR,OAAOoM,CACX,CACAqpB,iBAAiBz1B,GACb,OAAOylD,GAAkBtlD,KAAKxC,KAAMqC,EACxC,CACH8rB,YACOuc,MAAMvc,YACDnuB,KAAK4iC,iBACN5iC,KAAK09B,gBAAkB19B,KAAK09B,eAEpC,CACA5B,iBAAiBz5B,GAIb,MAHqB,iBAAVA,IACPA,EAAQrC,KAAK61B,MAAMxzB,IAEN,OAAVA,EAAiBw0B,IAAM72B,KAAKuyC,oBAAoBlwC,EAAQrC,KAAKmoD,aAAenoD,KAAKqoD,YAC5F,CACAtsB,gBAAgB/3B,GACZ,MAAMyK,EAAQzO,KAAKyO,MACnB,OAAIzK,EAAQ,GAAKA,EAAQyK,EAAMtQ,OAAS,EAC7B,KAEJ6B,KAAK87B,iBAAiBrtB,EAAMzK,GAAO3B,MAC9C,CACAiwC,iBAAiBt7B,GACb,OAAOjnB,KAAKL,MAAMsQ,KAAKmoD,YAAcnoD,KAAKyyC,mBAAmBz7B,GAAShX,KAAKqoD,YAC/E,CACA3V,eACI,OAAO1yC,KAAKoU,MAChB,GAxtFJ,cAAyB00B,GACrB7W,UAAY,MACfA,gBAAkB,CACX4K,cAAe,QACf7jB,YAAa,EACbiuC,aAAc,EACd3pB,cAAe,OACfrlB,gBAAY3X,GAEnB2xB,qBAAuB,CAChBhiB,gBAAiB,kBACjBC,YAAa,eAEjBlR,YAAY2tB,GACR+d,QACA1qC,KAAKyE,aAAUnE,EACfN,KAAK88B,gBAAax8B,EAClBN,KAAKk1B,UAAO50B,EACZN,KAAKuV,WAAQjV,EACbN,KAAKyX,YAASnX,EACdN,KAAKs9B,mBAAgBh9B,EACjBqsB,GACA5uB,OAAOC,OAAOgC,KAAM2sB,EAE5B,CACAzB,KAAKla,GACD,MAAM,cAAEssB,EAAgB74B,SAAS,YAAEyL,EAAY,gBAAED,IAAwBjQ,MACnE,MAAEunD,EAAM,MAAED,GAAWT,GAAc7mD,MACnCmvD,GA/CKh3C,EA+CmBmvC,EAAMnvC,QA9C1B8D,SAAW9D,EAAOiE,UAAYjE,EAAO+D,YAAc/D,EAAOgE,YA8CtBH,GAAqB0rC,GA/C3E,IAAmBvvC,EAgDXnH,EAAIsG,OACAgwC,EAAMx1D,IAAMy1D,EAAMz1D,GAAKw1D,EAAMx3D,IAAMy3D,EAAMz3D,IACzCkhB,EAAIuH,YACJ42C,EAAYn+C,EAAK22C,GAAYL,EAAOhqB,EAAeiqB,IACnDv2C,EAAI0D,OACJy6C,EAAYn+C,EAAK22C,GAAYJ,GAAQjqB,EAAegqB,IACpDt2C,EAAI+J,UAAY7K,EAChBc,EAAI+H,KAAK,YAEb/H,EAAIuH,YACJ42C,EAAYn+C,EAAK22C,GAAYJ,EAAOjqB,IACpCtsB,EAAI+J,UAAY9K,EAChBe,EAAI+H,OACJ/H,EAAI0G,SACR,CACAymB,QAAQqwB,EAAQC,EAAQxwB,GACpB,OAAOE,GAAQn+B,KAAMwuD,EAAQC,EAAQxwB,EACzC,CACAywB,SAASF,EAAQvwB,GACb,OAAOE,GAAQn+B,KAAMwuD,EAAQ,KAAMvwB,EACvC,CACA0wB,SAASF,EAAQxwB,GACb,OAAOE,GAAQn+B,KAAM,KAAMyuD,EAAQxwB,EACvC,CACAY,eAAeZ,GACX,MAAM,EAAEtrC,EAAE,EAAE0S,EAAE,KAAE6vB,EAAK,WAAE4H,GAAiB98B,KAAKk/B,SAAS,CAClD,IACA,IACA,OACA,cACDjB,GACH,MAAO,CACHtrC,EAAGmqC,GAAcnqC,EAAIuiC,GAAQ,EAAIviC,EACjC0S,EAAGy3B,EAAaz3B,GAAKA,EAAI6vB,GAAQ,EAEzC,CACAyI,SAAS3M,GACL,MAAgB,MAATA,EAAehxB,KAAKuV,MAAQ,EAAIvV,KAAKyX,OAAS,CACzD,GAlyLJ,cAA4Bua,GACxBC,UAAY,MACfA,gBAAkB,CACXc,oBAAoB,EACpBC,gBAAiB,MACjBo8B,mBAAoB,GACpBC,cAAe,GACfC,SAAS,EACTz7C,WAAY,CACRzG,QAAS,CACLnO,KAAM,SACNwU,WAAY,CACR,IACA,IACA,OACA,QACA,aAKnBwe,iBAAmB,CACZlgB,OAAQ,CACJq5C,QAAS,CACLnsD,KAAM,WACNsV,QAAQ,EACRK,KAAM,CACFL,QAAQ,IAGhB82C,QAAS,CACLpsD,KAAM,SACNuV,aAAa,KAI5B0hB,mBAAmBpG,EAAMrZ,EAAMhO,EAAOqgB,GAC/B,OAAO0T,GAAsB1M,EAAMrZ,EAAMhO,EAAOqgB,EACpD,CACHkN,eAAelG,EAAMrZ,EAAMhO,EAAOqgB,GAC3B,OAAO0T,GAAsB1M,EAAMrZ,EAAMhO,EAAOqgB,EACpD,CACHmN,gBAAgBnG,EAAMrZ,EAAMhO,EAAOqgB,GAC5B,MAAM,OAAEgI,EAAO,OAAER,GAAYR,GACvB,SAAEyG,EAAU,IAAI,SAAEC,EAAU,KAASx2B,KAAKqyB,SAC1Ck9B,EAA2B,MAAhBz+B,EAAOE,KAAeuF,EAAWC,EAC5Cg5B,EAA2B,MAAhBl/B,EAAOU,KAAeuF,EAAWC,EAC5C7F,EAAS,GACf,IAAI3+B,EAAG4R,EAAMyC,EAAMjG,EACnB,IAAIpO,EAAIyW,EAAO7E,EAAO6E,EAAQqgB,EAAO92B,EAAI4R,IAAQ5R,EAC7CoO,EAAMqW,EAAKzkB,GACXqU,EAAO,CAAC,EACRA,EAAKyqB,EAAOE,MAAQF,EAAO+E,MAAMvwB,GAAiBlF,EAAKmvD,GAAWv9D,GAClE2+B,EAAO/qB,KAAKo2B,GAAW12B,GAAiBlF,EAAKovD,GAAWnpD,EAAMiqB,EAAQt+B,IAE1E,OAAO2+B,CACX,CACHgG,sBAAsBrvB,EAAOwK,EAAO6e,EAAQlB,GACrCib,MAAM/T,sBAAsBrvB,EAAOwK,EAAO6e,EAAQlB,GAClD,MAAMiN,EAAS/L,EAAO2L,QAClBI,GAAU5qB,IAAU9R,KAAK4wB,YAAYN,SACrChpB,EAAMrX,IAAMF,KAAKE,IAAIqX,EAAMrX,IAAKysC,EAAOzsC,KACvCqX,EAAMtX,IAAMD,KAAKC,IAAIsX,EAAMtX,IAAK0sC,EAAO1sC,KAE/C,CACH2nC,iBACO,OAAO,CACX,CACHC,iBAAiB5zB,GACV,MAAM8rB,EAAO9vB,KAAK4wB,aACZ,OAAEE,EAAO,OAAER,GAAYR,EACvBa,EAAS3wB,KAAKy2B,UAAUzyB,GACxB04B,EAAS/L,EAAO2L,QAChBj6B,EAAQo6B,GAAWC,GAAU,IAAMA,EAAOj0B,MAAQ,KAAOi0B,EAAOh0B,IAAM,IAAM,GAAK4nB,EAAOwH,iBAAiBnH,EAAOL,EAAOU,OAC7H,MAAO,CACH6G,MAAO,GAAK/G,EAAOgH,iBAAiBnH,EAAOG,EAAOE,OAClD3uB,QAER,CACA4wB,aACIjzB,KAAK2yB,qBAAsB,EAC3B+X,MAAMzX,aACOjzB,KAAK4wB,YACbnB,MAAQzvB,KAAKwzB,aAAa/D,KACnC,CACAnC,OAAOjc,GACH,MAAMye,EAAO9vB,KAAK4wB,YAClB5wB,KAAKw6B,eAAe1K,EAAKrZ,KAAM,EAAGqZ,EAAKrZ,KAAKtY,OAAQkT,EACxD,CACAmpB,eAAei1B,EAAMhnD,EAAOqgB,EAAOzX,GAC/B,MAAMsjB,EAAiB,UAATtjB,GACR,MAAErN,EAAQ4sB,aAAa,OAAEN,IAAetwB,KACxCk1B,EAAO5E,EAAOoiB,eACd5V,EAAaxM,EAAOsS,eACpB8sB,EAAQ1vD,KAAK2vD,aACb,cAAEt2B,EAAc,eAAED,GAAoBp5B,KAAKu5B,kBAAkB9wB,EAAO4I,GAC1E,IAAI,IAAIrf,EAAIyW,EAAOzW,EAAIyW,EAAQqgB,EAAO92B,IAAI,CACtC,MAAM2+B,EAAS3wB,KAAKy2B,UAAUzkC,GACxB49D,EAAUj7B,GAASvyB,EAAcuuB,EAAOL,EAAOU,OAAS,CAC1DkE,OACA26B,KAAM36B,GACNl1B,KAAK8vD,yBAAyB99D,GAC5B+9D,EAAU/vD,KAAKgwD,yBAAyBh+D,EAAG09D,GAC3CjgC,GAASkB,EAAOE,SAAW,CAAC,GAAGP,EAAOU,MACtCvd,EAAa,CACfqpB,aACA5H,KAAM06B,EAAQ16B,KACd8H,oBAAqBvN,GAASgN,GAAW9L,EAAO2L,UAAYt4B,IAAUyrB,EAAM4B,MAAQrtB,IAAUyrB,EAAM6B,QACpG3+B,EAAGmqC,EAAa8yB,EAAQC,KAAOE,EAAQnxB,OACvCv5B,EAAGy3B,EAAaizB,EAAQnxB,OAASgxB,EAAQC,KACzCp4C,OAAQqlB,EAAaizB,EAAQ3pD,KAAOrW,KAAKqX,IAAIwoD,EAAQxpD,MACrDmP,MAAOunB,EAAa/sC,KAAKqX,IAAIwoD,EAAQxpD,MAAQ2pD,EAAQ3pD,MAErDgzB,IACA3lB,EAAWhP,QAAU40B,GAAiBr5B,KAAKq4B,0BAA0BrmC,EAAGy9D,EAAKz9D,GAAG0hB,OAAS,SAAWrC,IAExG,MAAM5M,EAAUgP,EAAWhP,SAAWgrD,EAAKz9D,GAAGyS,QAC9Ck4B,GAAiBlpB,EAAYhP,EAASgrB,EAAOzrB,GAC7Cq5B,GAAiB5pB,EAAYhP,EAASirD,EAAM/xD,OAC5CqC,KAAK25B,cAAc81B,EAAKz9D,GAAIA,EAAGyhB,EAAYpC,EAC/C,CACJ,CACH4+C,WAAWxmD,EAAM6uB,GACV,MAAM,OAAExH,GAAY9wB,KAAK4wB,YACnBtB,EAAWwB,EAAON,wBAAwBxwB,KAAKoyB,OAAOrR,QAAQ+O,GAAOA,EAAKY,WAAWjsB,QAAQ6qD,UAC7Fv/B,EAAUe,EAAOrsB,QAAQsrB,QACzBE,EAAS,GACTigC,EAAYpgC,IACd,MAAMa,EAASb,EAAKY,WAAW+F,UAAU6B,GACnC72B,EAAMkvB,GAAUA,EAAOb,EAAKQ,OAAOU,MACzC,GAAI5uB,EAAcX,IAAQmG,MAAMnG,GAC5B,OAAO,CACX,EAEJ,IAAK,MAAMquB,KAAQR,EACf,SAAkBhvB,IAAdg4B,IAA2B43B,EAASpgC,QAGxB,IAAZC,IAAqD,IAAhCE,EAAO1rB,QAAQurB,EAAKL,aAA6BnvB,IAAZyvB,QAAwCzvB,IAAfwvB,EAAKL,QACxFQ,EAAOrqB,KAAKkqB,EAAKL,OAEjBK,EAAK9rB,QAAUyF,GACf,MAMR,OAHKwmB,EAAO9xB,QACR8xB,EAAOrqB,UAAKtF,GAET2vB,CACX,CACHkgC,eAAensD,GACR,OAAOhE,KAAKiwD,gBAAW3vD,EAAW0D,GAAO7F,MAC7C,CACHiyD,eAAersD,EAAcsO,EAAMimB,GAC5B,MAAMrI,EAASjwB,KAAKiwD,WAAWlsD,EAAcu0B,GACvCt0B,OAAiB1D,IAAT+R,EAAqB4d,EAAO1rB,QAAQ8N,IAAS,EAC3D,OAAkB,IAAXrO,EAAeisB,EAAO9xB,OAAS,EAAI6F,CAC9C,CACH2rD,YACO,MAAMt1C,EAAOra,KAAKyE,QACZqrB,EAAO9vB,KAAK4wB,YACZE,EAAShB,EAAKgB,OACdu/B,EAAS,GACf,IAAIr+D,EAAG4R,EACP,IAAI5R,EAAI,EAAG4R,EAAOksB,EAAKrZ,KAAKtY,OAAQnM,EAAI4R,IAAQ5R,EAC5Cq+D,EAAOzqD,KAAKkrB,EAAOgL,iBAAiB97B,KAAKy2B,UAAUzkC,GAAG8+B,EAAOE,MAAOh/B,IAExE,MAAMs+D,EAAej2C,EAAKi2C,aAE1B,MAAO,CACHrgE,IAFQqgE,GAAgBn1B,GAAqBrL,GAG7CugC,SACA5nD,MAAOqoB,EAAOmZ,YACdvhC,IAAKooB,EAAOoZ,UACZqmB,WAAYvwD,KAAKmwD,iBACjBr+C,MAAOgf,EACPw+B,QAASj1C,EAAKi1C,QACd3xD,MAAO2yD,EAAe,EAAIj2C,EAAK+0C,mBAAqB/0C,EAAKg1C,cAEjE,CACHS,yBAAyB9rD,GAClB,MAAQ4sB,aAAa,OAAEN,EAAO,SAAE6C,EAAWnvB,MAAOD,GAAkBU,SAAWywB,KAAMs7B,EAAU,aAAEC,IAAqBzwD,KAChH0wD,EAAaF,GAAa,EAC1B7/B,EAAS3wB,KAAKy2B,UAAUzyB,GACxB04B,EAAS/L,EAAO2L,QAChBq0B,EAAWl0B,GAAWC,GAC5B,IAGImzB,EAAMzpD,EAHN/D,EAAQsuB,EAAOL,EAAOU,MACtBvoB,EAAQ,EACRtK,EAASg1B,EAAWnzB,KAAKwvB,WAAWc,EAAQK,EAAQwC,GAAY9wB,EAEhElE,IAAWkE,IACXoG,EAAQtK,EAASkE,EACjBlE,EAASkE,GAETsuD,IACAtuD,EAAQq6B,EAAON,SACfj+B,EAASu+B,EAAOL,OAASK,EAAON,SAClB,IAAV/5B,GAAe4E,GAAK5E,KAAW4E,GAAKy1B,EAAOL,UAC3C5zB,EAAQ,GAEZA,GAASpG,GAEb,MAAM65B,EAAc95B,EAAcouD,IAAeG,EAAuBloD,EAAZ+nD,EAC5D,IAAIt7B,EAAO5E,EAAOwL,iBAAiBI,GAOnC,GALI2zB,EADA7vD,KAAK0O,MAAMq0C,kBAAkB/+C,GACtBssB,EAAOwL,iBAAiBrzB,EAAQtK,GAEhC+2B,EAEX9uB,EAAOypD,EAAO36B,EACVnlC,KAAKqX,IAAIhB,GAAQqqD,EAAc,CAC/BrqD,EApSZ,SAAiBA,EAAMkqB,EAAQogC,GAC3B,OAAa,IAATtqD,EACOa,GAAKb,IAERkqB,EAAOsS,eAAiB,GAAK,IAAMtS,EAAOrgC,KAAOygE,EAAa,GAAK,EAC/E,CA+RmBE,CAAQxqD,EAAMkqB,EAAQogC,GAAcD,EACvCpuD,IAAUquD,IACVx7B,GAAQ9uB,EAAO,GAEnB,MAAMgpC,EAAa9e,EAAOiiB,mBAAmB,GACvClD,EAAW/e,EAAOiiB,mBAAmB,GACrCtiD,EAAMF,KAAKE,IAAIm/C,EAAYC,GAC3Br/C,EAAMD,KAAKC,IAAIo/C,EAAYC,GACjCna,EAAOnlC,KAAKC,IAAID,KAAKE,IAAIilC,EAAMllC,GAAMC,GACrC4/D,EAAO36B,EAAO9uB,EACV+sB,IAAaw9B,IACbhgC,EAAOE,QAAQP,EAAOU,MAAMO,cAAcxtB,GAAgBusB,EAAOgiB,iBAAiBud,GAAQv/B,EAAOgiB,iBAAiBpd,GAE1H,CACA,GAAIA,IAAS5E,EAAOwL,iBAAiB40B,GAAa,CAC9C,MAAMG,EAAW5pD,GAAKb,GAAQkqB,EAAO4kB,qBAAqBwb,GAAc,EACxEx7B,GAAQ27B,EACRzqD,GAAQyqD,CACZ,CACA,MAAO,CACHzqD,OACA8uB,OACA26B,OACAjxB,OAAQixB,EAAOzpD,EAAO,EAE9B,CACH4pD,yBAAyBhsD,EAAO0rD,GACzB,MAAM59C,EAAQ49C,EAAM59C,MACdrN,EAAUzE,KAAKyE,QACfyrD,EAAWzrD,EAAQyrD,SACnBY,EAAkB9tD,EAAeyB,EAAQqsD,gBAAiBC,KAChE,IAAInyB,EAAQx4B,EACZ,GAAIspD,EAAMJ,QAAS,CACf,MAAMiB,EAAaL,EAAWlwD,KAAKmwD,eAAensD,GAAS0rD,EAAMa,WAC3DjpD,EAAiC,SAAzB7C,EAAQ6rD,aAzYjC,SAAmCtsD,EAAO0rD,EAAOjrD,EAAS8rD,GACvD,MAAMF,EAASX,EAAMW,OACf10B,EAAO00B,EAAOrsD,GACpB,IAAIwgB,EAAOxgB,EAAQ,EAAIqsD,EAAOrsD,EAAQ,GAAK,KACvC0e,EAAO1e,EAAQqsD,EAAOlyD,OAAS,EAAIkyD,EAAOrsD,EAAQ,GAAK,KAC3D,MAAMgtD,EAAUvsD,EAAQ2qD,mBACX,OAAT5qC,IACAA,EAAOmX,GAAiB,OAATjZ,EAAgBgtC,EAAMhnD,IAAMgnD,EAAMjnD,MAAQia,EAAOiZ,IAEvD,OAATjZ,IACAA,EAAOiZ,EAAOA,EAAOnX,GAEzB,MAAM/b,EAAQkzB,GAAQA,EAAO5rC,KAAKE,IAAIu0B,EAAM9B,IAAS,EAAIsuC,EAEzD,MAAO,CACHC,MAFSlhE,KAAKqX,IAAIsb,EAAO8B,GAAQ,EAAIwsC,EAEvBT,EACd5yD,MAAO8G,EAAQ4qD,cACf5mD,QAER,CAsX4DyoD,CAA0BltD,EAAO0rD,EAAOjrD,EAAS8rD,GAzZ5G,SAAkCvsD,EAAO0rD,EAAOjrD,EAAS8rD,GACtD,MAAMY,EAAY1sD,EAAQ6rD,aAC1B,IAAIlqD,EAAMzI,EAQV,OAPIyE,EAAc+uD,IACd/qD,EAAOspD,EAAMz/D,IAAMwU,EAAQ2qD,mBAC3BzxD,EAAQ8G,EAAQ4qD,gBAEhBjpD,EAAO+qD,EAAYZ,EACnB5yD,EAAQ,GAEL,CACHszD,MAAO7qD,EAAOmqD,EACd5yD,QACA8K,MAAOinD,EAAMW,OAAOrsD,GAASoC,EAAO,EAE5C,CA0Y2HgrD,CAAyBptD,EAAO0rD,EAAOjrD,EAAS8rD,GACzJc,EAAarxD,KAAKowD,eAAepwD,KAAKgE,MAAOhE,KAAK4wB,YAAYnB,MAAOygC,EAAWlsD,OAAQ1D,GAC9Fs+B,EAASt3B,EAAMmB,MAAQnB,EAAM2pD,MAAQI,EAAa/pD,EAAM2pD,MAAQ,EAChE7qD,EAAOrW,KAAKE,IAAI6gE,EAAiBxpD,EAAM2pD,MAAQ3pD,EAAM3J,MACzD,MACIihC,EAAS9sB,EAAMgqB,iBAAiB97B,KAAKy2B,UAAUzyB,GAAO8N,EAAMkf,MAAOhtB,GACnEoC,EAAOrW,KAAKE,IAAI6gE,EAAiBpB,EAAMz/D,IAAMy/D,EAAM/xD,OAEvD,MAAO,CACHu3B,KAAM0J,EAASx4B,EAAO,EACtBypD,KAAMjxB,EAASx4B,EAAO,EACtBw4B,SACAx4B,OAER,CACA8kB,OACI,MAAM4E,EAAO9vB,KAAK4wB,YACZN,EAASR,EAAKQ,OACdghC,EAAQxhC,EAAKrZ,KACb7S,EAAO0tD,EAAMnzD,OACnB,IAAInM,EAAI,EACR,KAAMA,EAAI4R,IAAQ5R,EACyB,OAAnCgO,KAAKy2B,UAAUzkC,GAAGs+B,EAAOU,OACzBsgC,EAAMt/D,GAAGk5B,KAAKlrB,KAAKkV,KAG/B,IG5lDJ,MAAMq8C,WAAkB,aACtBvyD,YAAYwyD,EAAK/7C,EAAM7U,GACrBA,EAAQA,GAAS,IAAI,QAAY7Q,KAAK0hE,SAAU1hE,KAAK0hE,SAAU1hE,KAAK0hE,UACpE/mB,MAAM8mB,EAAIE,MAAO9wD,EAAM+wD,UACvB3xD,KAAK4xD,IAAMJ,EACXxxD,KAAK6xD,SAASC,UAAY,EAC1B9xD,KAAK+xD,eAAgB,EACrB/xD,KAAKgyD,kBAAmB,EACxBhyD,KAAKiyD,oBAAqB,EAC1BjyD,KAAKkyD,mBAAkB,EACzB,CACAA,oBACE,IAAIC,EAAQt3B,UAAU18B,OAAS,QAAsBmC,IAAjBu6B,UAAU,IAAmBA,UAAU,GACvE76B,KAAK4xD,IAAIF,MAAMU,YAGnBpyD,KAAKqyD,WAAWC,KAAKtyD,KAAK4xD,IAAIS,YAC9BryD,KAAK4xD,IAAIF,MAAMa,UAAUvyD,KAAK69B,UAAU20B,gBAAgBxyD,KAAKqyD,YAAY3xC,IAAI1gB,KAAK4xD,IAAI/zB,UACtF79B,KAAK4xD,IAAIF,MAAMe,QAAQzyD,KAAK8R,OAC5B9R,KAAK8R,MAAM4gD,eAAe,IAC1B1yD,KAAK2yD,eACL,WAAerwD,UAAU4vD,kBAAkB1vD,KAAKxC,KAAMmyD,GACxD,EAEF,YCPA,SAASS,GAAMC,EAAMC,EAAcC,GAG5BA,KACHA,EAAoBhuC,SAASiuC,cAAc,QACzB7wD,GAAK,YACvB4wD,EAAkBniD,MAAMqiD,QAAU,qGAAqG3I,oBACvIvlC,SAASmuC,KAAKC,YAAYJ,IAE5B/yD,KAAK+yD,kBAAoBA,EACzB,MACM/hD,EADShR,KAAKozD,qBAAqB,cACtB/7C,WAAW,MAC9BrX,KAAKwrB,OAAS,GACdxrB,KAAKwrB,OAAO5lB,KAAK,IAAI2kD,GAAgBv5C,EAAK6hD,EAAKQ,SAASC,UAAU9I,WAClE,MAAMh/B,EAASxrB,KAAKwrB,OACd+nC,EAAYV,EAAKU,UACjBC,EAAkB,IAAIC,EAAA,EAAYZ,EAAKa,aAAc,EAAK,EAAK,GAC/DC,EAAc,IAAIF,EAAA,EAAY,YAAa,EAAK,EAAK,GAOrDG,EAAMd,EAAae,UAAU,eAC7BC,EAAQ,CACZC,eAAe,EACfC,aAAa,EACbC,mBAAmB,EACnBl7B,QAAQ,GAEV,IAAIm7B,EACJ,MAAMC,EAAa,KACjBD,EAASrpC,KAAKC,KAAK,EAEfspC,EAAW,MAjBjB,SAA0BC,GACxB,MAAMvJ,EAA+C,QAAnCiI,EAAkBniD,MAAM0D,QAC1CkX,EAAOphB,SAAQrZ,GAAKA,EAAEu8B,OAAOw9B,EAAWuJ,IAC1C,CAiBEC,CAFiBzpC,KAAKC,MAAQopC,EAEJ,EA+B5B,IAAIK,EACAC,EACAC,EACAC,EA9BJd,EAAIlzC,IAAIozC,EAAO,iBAAiBzhD,KAAK,kBAAkBsiD,UAASC,IAC1DA,GACF/B,EAAKgC,kBAAkB,KAAiBC,aAAcX,GACtDtB,EAAKgC,kBAAkB,KAAiBE,WAAYX,GACpDrB,EAAkBniD,MAAM0D,QAAU,SAElCu+C,EAAKmC,qBAAqB,KAAiBF,aAAcX,GACzDtB,EAAKmC,qBAAqB,KAAiBD,WAAYX,GACvDrB,EAAkBniD,MAAM0D,QAAU,QAEpCtU,KAAKi1D,qBACLpC,EAAKqC,cAAc,IAErBtB,EAAIlzC,IAAIozC,EAAO,qBAAqBzhD,KAAK,gBAAgBsiD,UAAStyD,IAC5DA,EACFwwD,EAAKgC,kBAAkB,KAAiBM,aAAcC,GAEtDvC,EAAKmC,qBAAqB,KAAiBG,aAAcC,GAE3DvC,EAAKqC,cAAc,IAErBtB,EAAIlzC,IAAIozC,EAAO,UAAUzhD,KAAK,iBAAiBsiD,UAASC,IACtDrB,EAAU8B,OAAST,EACnB/B,EAAKqC,cAAc,IAQrB,MAAMI,EAAWzC,EAAKyC,SACtB9B,EAAgB+B,IAAM1C,EAAKa,aAC3B,MAAM8B,EAAsB,IAAI,UAC1BjD,EAAY+C,GAAYA,EAASG,wBAA0BH,EAASG,wBAA0B,IAAM5C,EAAK6C,SAAS73B,SAClH83B,EAAuBtvC,IACvBwsC,EAAK+C,4BAA4B/C,EAAKgD,kBAAkBxvC,GAAQmvC,IAClEhC,EAAgBsC,eAAeN,GAAqBO,GAAG,YAAapC,GACpEG,EAAMkC,SAAW,GAAGrC,EAAYtuD,EAAE4wD,QAAQ,KAC1CnC,EAAMoC,UAAY,GAAGvC,EAAYhhE,EAAEsjE,QAAQ,KAC3CnC,EAAMqC,SAAW,GAAGxC,EAAYtxB,EAAE4zB,QAAQ,OAE1CnC,EAAMkC,SAAW,YACjBlC,EAAMoC,UAAY,YAClBpC,EAAMqC,SAAW,aAEnB5B,EAAc6B,gBACd5B,EAAe4B,gBACf3B,EAAe2B,eAAe,EAEhCxC,EAAIlzC,IAAIozC,EAAO,eAAezhD,KAAK,eAAesiD,UAAgBC,IAC5DA,GACFF,EAAcd,EAAIC,UAAU,UAC5Ba,EAAY2B,OACZ7C,EAAgBsC,eAAevD,KAAawD,GAAG,YAAapC,GAC5DG,EAAMkC,SAAW,GAAGrC,EAAYtuD,EAAE4wD,QAAQ,KAC1CnC,EAAMoC,UAAY,GAAGvC,EAAYhhE,EAAEsjE,QAAQ,KAC3CnC,EAAMqC,SAAW,GAAGxC,EAAYtxB,EAAE4zB,QAAQ,KAC1C1B,EAAgBG,EAAYh0C,IAAIozC,EAAO,YACvCU,EAAiBE,EAAYh0C,IAAIozC,EAAO,aACxCW,EAAiBC,EAAYh0C,IAAIozC,EAAO,YACxCjB,EAAKyD,WAAWzuC,iBAAiB,YAAa8tC,KAE9C9C,EAAKyD,WAAWxuC,oBAAoB,YAAa6tC,GACjD/B,EAAI2C,aAAa,UACnB,IAIF,MAAMC,EAAS,IAAI,EAAAC,aAAa5D,EAAK6C,UAC/BgB,EAAc7D,EAAK6C,SAAS73D,QAClC64D,EAAYC,KAAO,IACnBD,EAAYE,yBACZ,MAAMzkE,EAAI0gE,EAAKQ,SAASC,UAClBphE,EAAIC,EAAEq4D,SACZ,IAAIqM,EAAc,KAClB,MAAMC,EAAkBjE,EAAKkE,aAAa,cACtCD,IACFD,EAAcC,EAAgBE,IAAIl4B,UAEpC03B,EAAO1iD,SAAU,EACjB++C,EAAKoE,MAAMv2C,IAAI81C,GAGf,MAAMU,EAAoB,IAAI1F,EAAA,EACxB2F,EAA0B,IAAI,GAAUD,EAAmB,GAAI,IAAI,EAAAn4D,MAAMsrD,KAI/E,SAAS+M,EAAkBh3D,GACrBA,EAAIyxD,UAAYgF,IAClBz2D,EAAIyxD,SAASgF,YAAcA,EAE/B,CAPAM,EAAwBrjD,SAAU,EAClC++C,EAAKoE,MAAMv2C,IAAIw2C,GACfrE,EAAKoE,MAAMv2C,IAAIy2C,GAMf,MAAME,EAAa,IAAI,EAAAt4D,MACjBu4D,EAAoB,IAAI,EAAAC,QAC9B,SAASnC,IACP,GAAItB,EAAMG,mBAAqByC,EAAa,CAC1C,MAAM/4D,EAAQ,IACRyI,EAAO,CACXzT,EAAGR,EAAEojB,MAAQ5X,EACb0H,EAAGlT,EAAEslB,OAAS9Z,GAEhB+4D,EAAYc,OAASpxD,EAAKzT,EAAIyT,EAAKf,EACnC,MAAMoyD,EAAS5E,EAAK6C,SACdgC,EAAQ,IAAIjE,EAAA,EAAYZ,EAAKa,aAAc+D,EAAO55B,UAAUk4B,GAAGxC,EAAUoE,OAAOpC,KAChFoC,EAAS9E,EAAKU,UAAU91C,KAAKqtC,UAAU6M,OAC7CT,EAAkBU,cAAcD,GAChCR,EAAwBrjD,SAAU,EAClCqjD,EAAwBjF,mBAAkB,GAQ1C,MAAM2F,EAAsB,IAAMH,EAAMr1B,EAexC,GAdAq1B,EAAMr1B,EAAIw1B,EACVH,EAAM3B,GAAGlD,EAAKa,cAAcoE,UAAUpB,EAAY74B,UAElD45B,EAAOM,aAAarB,EAAY74B,UAChC64B,EAAY74B,SAASwE,GAAKw1B,EAC1BJ,EAAOO,aAAatB,EAAY74B,UAEhCy5B,EAAkBhF,KAAKO,EAAK6C,SAAS73B,UACrC45B,EAAOM,aAAaT,GACpBA,EAAkBj1B,GAA2B,IAAtBw1B,EACvBJ,EAAOO,aAAaV,GACpBZ,EAAYuB,OAAOX,GACnBd,EAAOlpC,SACPopC,EAAYE,yBACRE,EAAiB,CACnBA,EAAgBoB,SAASpkD,SAAU,EACnC+iD,EAAc,KACd,IAAK,MAAMz2D,KAAOmzD,EAAU4E,YAC1B/3D,EAAIg4D,gBAAgBhB,EAExB,CACA,MAAM34B,EAASq1B,EAAMC,cAAgBhkE,KAAKL,MAAMmY,WAAWkrD,EAAkBniD,MAAM6G,OAAO/X,QAAQ,IAAK,KAAOvN,EAAEslB,OAAS,KAAO,EAAI,EAkBpI,GAjBA++C,EAAO1iD,SAAU,EACjB0iD,EAAOtE,mBAAkB,GACzBhgE,EAAEmmE,cAAchB,GAChBnlE,EAAEomE,YAAYnmE,EAAEojB,MAAQnP,EAAKzT,EAAG8rC,EAAQr4B,EAAKzT,EAAGyT,EAAKf,GACrDnT,EAAEqmE,WAAWpmE,EAAEojB,MAAQnP,EAAKzT,EAAG8rC,EAAQr4B,EAAKzT,EAAGyT,EAAKf,GACpDnT,EAAEsmE,gBAAe,GACjBtmE,EAAEumE,cAAcnO,IAChBp4D,EAAE+pD,QACF/pD,EAAE2tD,OAAOgT,EAAKoE,MAAOP,GACrBxkE,EAAEsmE,gBAAe,GACjBtmE,EAAEumE,cAAcpB,GAChBnlE,EAAEomE,YAAY,EAAG,EAAGnmE,EAAEojB,MAAOpjB,EAAEslB,QAC/B++C,EAAO1iD,SAAU,EACjBqjD,EAAwBrjD,SAAU,EAC9BgjD,IACFA,EAAgBoB,SAASpkD,SAAU,GAEjCgjD,EAAiB,CACnBD,EAAcC,EAAgBE,IAAIl4B,SAClC,IAAK,MAAM1+B,KAAOmzD,EAAU4E,YAC1B/3D,EAAIg4D,gBAAgBhB,EAExB,CACF,CACF,CACF,CACAxE,GAAMtwD,UAAU8wD,qBAAuB,SAA8BsF,GACnE,MAAMC,EAAM5zC,SAASiuC,cAAc,OACnC2F,EAAI/nD,MAAMqiD,QAAU,qBAAqB3I,kBACzCtqD,KAAK+yD,kBAAkBI,YAAYwF,GACnC,MAAMC,EAAc7zC,SAASiuC,cAAc,UAI3C,OAHA4F,EAAYnhD,OAAS,QACrBmhD,EAAYz2D,GAAKu2D,EACjBC,EAAIxF,YAAYyF,GACTA,CACT,EACAhG,GAAMtwD,UAAU2yD,mBAAqB,WACnC,IAAInsC,EAAQ,EACZ,IAAK,MAAM6vC,KAAO34D,KAAK+yD,kBAAkB8F,qBAAqB,OAClC,SAAtBF,EAAI/nD,MAAM0D,SACZwU,IAGJ,MAAM1iB,EAAOrW,KAAK0X,MAAM,IAAMqhB,GAC9B,IAAK,MAAM6vC,KAAO34D,KAAK+yD,kBAAkB8F,qBAAqB,OAClC,SAAtBF,EAAI/nD,MAAM0D,UACZqkD,EAAI/nD,MAAM2E,MAAQ,GAAGnP,MAGzBpG,KAAKwrB,OAAOphB,SAAQrZ,IAClBA,EAAE4iB,SACF5iB,EAAEu8B,QAAQ,GAEd,EACA,4BC7PA,SAASsqB,GAAcgc,EAAKvhD,GAC1B,IAAIqe,EAAa,KACjB,MAAM4mB,EAAcsc,EAAIkF,UAAUC,QAAQC,cAC1C,IAAK,IAAIhnE,EAAI,EAAGA,EAAIslD,EAAYn5C,OAAQnM,GAAK,EAAG,CAC9C,MAAMjB,EAAIumD,EAAYtlD,GACtB,GAAIjB,EAAEi3B,WAAa3V,GAAQthB,EAAEshB,OAASA,EAAM,CAC1Cqe,EAAa3/B,EACb,KACF,CACF,CACA,OAAO2/B,CACT,CACA,SAASuoC,GAAerF,EAAKvhD,GAC3BulC,GAAcgc,EAAKvhD,GAAM6mD,KAAKtoD,MAAM0D,QAAU,MAChD,CACA,SAAS6kD,GAAevF,EAAKvhD,GAC3BulC,GAAcgc,EAAKvhD,GAAM6mD,KAAKtoD,MAAM0D,QAAU,EAChD,CACA,SAAS8kD,GAAwBxF,EAAKviD,GAChC,CAAC,MAAUgoD,UAAW,MAAUC,UAAW,MAAUC,YAAYjqD,SAAS3P,SAAS0R,EAAM,KAC3F8nD,GAAevF,EAAK,YAEpBqF,GAAerF,EAAK,YAElB,MAAUyF,YAAc15D,SAAS0R,EAAM,KACzC8nD,GAAevF,EAAK,qBACpBuF,GAAevF,EAAK,uBAEpBqF,GAAerF,EAAK,qBACpBqF,GAAerF,EAAK,sBAElB,MAAU0F,YAAc35D,SAAS0R,EAAM,KACzC8nD,GAAevF,EAAK,qBACpBuF,GAAevF,EAAK,uBAEpBqF,GAAerF,EAAK,qBACpBqF,GAAerF,EAAK,sBAElB,MAAU2F,aAAe55D,SAAS0R,EAAM,KAC1C8nD,GAAevF,EAAK,iBACpBuF,GAAevF,EAAK,mBAEpBqF,GAAerF,EAAK,iBACpBqF,GAAerF,EAAK,iBAExB,CACA,UACE4F,UAAU3G,EAAM4G,EAAOC,GACrBD,EAAME,QAAUD,EAAM7F,UAAU,GAAG4F,EAAMt3D,MACzC,MAAMmrB,EAAS,KACb8rC,GAAwBK,EAAME,QAASF,EAAM5H,SAASxgD,MACtDwhD,EAAKqC,aAAauE,GAAO,EAAK,EAEhCA,EAAME,QAAQj5C,IAAI+4C,EAAO,WAAWpnD,KAAK,WAAWsiD,SAASrnC,GAC7DmsC,EAAME,QAAQj5C,IAAI+4C,EAAO,gBAAgBpnD,KAAK,iBAAiBsiD,SAASrnC,GACxEmsC,EAAME,QAAQj5C,IAAI+4C,EAAO,oBAAqB,EAAG,IAAIpnD,KAAK,eAAesiD,SAASrnC,GAClFmsC,EAAME,QAAQj5C,IAAI+4C,EAAO,cAAe,EAAG,MAAUpnD,KAAK,mBAAmBsiD,SAASrnC,GACtFmsC,EAAME,QAAQj5C,IAAI+4C,EAAMvB,SAASr6B,SAAU,KAAM,GAAI,IAAIxrB,KAAK,iBAAiBsiD,UAAS,KACtF8E,EAAMvB,SAAShG,oBACfW,EAAKqC,aAAauE,EAAM,IAE1BA,EAAMG,cAAgB,GACtBH,EAAMI,kBAAmB,EACzBJ,EAAMK,oBAAqB,EAC3BL,EAAMM,mBAAoB,EAC1B,MAAMC,EAAUP,EAAME,QAAQ9F,UAAU,WACxC,GAA2BvzD,MAAvBm5D,EAAM5H,SAASxgD,KAAmB,CACpC,MAAM4oD,EAAYl8D,OAAOsB,KAAK,OACxBgS,EAAO4oD,EAAUl5C,QAAOpxB,GAAK,MAAUA,KAAO8pE,EAAM5H,SAASxgD,OAAM,GACzE2oD,EAAQt5C,IAAI,CACVrP,QACC,OAAQ4oD,GAAW5nD,KAAK,gBAAgBsiD,UAAStyD,IAClDo3D,EAAM5H,SAASxgD,KAAO,MAAUhP,GAChCirB,GAAQ,IAEV,MAAM4sC,EAAiBn8D,OAAOsB,KAAKo6D,EAAM5H,SAASsI,WAClDH,EAAQt5C,IAAI,CACV05C,SAAUF,EAAe,IACxB,WAAYA,GAAgB7nD,KAAK,YAAYsiD,UAAStyD,IACvDo3D,EAAM5H,SAASuI,SAAWX,EAAM5H,SAASsI,UAAU93D,GACnDirB,GAAQ,IAEV0sC,EAAQt5C,IAAI+4C,EAAO,oBAAqBA,EAAMY,kBAAmBZ,EAAMa,kBAAoB,GAAGjoD,KAAK,iBAAiBsiD,UAAStyD,IACvHA,GAASo3D,EAAMa,oBACjBb,EAAMa,kBAAoBj4D,EAAQ,EAClCu1C,GAAc6hB,EAAME,QAAS,qBAAqBvD,iBAEpD9oC,GAAQ,IAEV0sC,EAAQt5C,IAAI+4C,EAAO,oBAAqBA,EAAMY,kBAAoB,EAAGZ,EAAMa,mBAAmBjoD,KAAK,iBAAiBsiD,UAAStyD,IACvHA,GAASo3D,EAAMY,oBACjBZ,EAAMY,kBAAoBh4D,EAAQ,EAClCu1C,GAAc6hB,EAAME,QAAS,qBAAqBvD,iBAEpD9oC,GAAQ,IAEV0sC,EAAQt5C,IAAI+4C,EAAO,oBAAqBA,EAAMc,kBAAmBd,EAAMe,mBAAmBnoD,KAAK,iBAAiBsiD,UAAStyD,IACnHA,GAASo3D,EAAMe,oBACjBf,EAAMe,kBAAoBn4D,EAAQ,EAClCu1C,GAAc6hB,EAAME,QAAS,qBAAqBvD,iBAEpD9oC,GAAQ,IAEV0sC,EAAQt5C,IAAI+4C,EAAO,oBAAqBA,EAAMc,kBAAmBd,EAAMe,mBAAmBnoD,KAAK,iBAAiBsiD,UAAStyD,IACnHA,GAASo3D,EAAMc,oBACjBd,EAAMc,kBAAoBl4D,EAAQ,EAClCu1C,GAAc6hB,EAAME,QAAS,qBAAqBvD,iBAEpD9oC,GAAQ,IAEV0sC,EAAQt5C,IAAI+4C,EAAO,gBAAiBA,EAAMgB,cAAehB,EAAMiB,eAAeroD,KAAK,aAAasiD,UAAStyD,IACnGA,GAASo3D,EAAMiB,gBACjBjB,EAAMiB,cAAgBr4D,EAAQ,EAC9Bu1C,GAAc6hB,EAAME,QAAS,iBAAiBvD,iBAEhD9oC,GAAQ,IAEV0sC,EAAQt5C,IAAI+4C,EAAO,gBAAiBA,EAAMgB,cAAehB,EAAMiB,eAAeroD,KAAK,aAAasiD,UAAStyD,IACnGA,GAASo3D,EAAMgB,gBACjBhB,EAAMgB,cAAgBp4D,EAAQ,EAC9Bu1C,GAAc6hB,EAAME,QAAS,iBAAiBvD,iBAEhD9oC,GAAQ,GAEZ,CAC4BhtB,MAAxBm5D,EAAM5H,SAAS8I,OACjBX,EAAQt5C,IAAI+4C,EAAM5H,SAAU,QAAS,OAAYx/C,KAAK,cAAcsiD,SAASrnC,GAE/E0sC,EAAQt5C,IAAI+4C,EAAO,UAAW,EAAG,GAAGpnD,KAAK,iBAAiBsiD,SAASrnC,GACnE0sC,EAAQt5C,IAAI+4C,EAAO,YAAa,EAAG,IAAIpnD,KAAK,cAAcsiD,SAASrnC,GACpChtB,MAA3Bm5D,EAAM5H,SAAS+I,UACjBZ,EAAQt5C,IAAI+4C,EAAM5H,SAAU,WAAY,OAAgBx/C,KAAK,mBAAmBsiD,UAAS,KACvFrnC,GAAQ,IAGZ0sC,EAAQt5C,IAAI+4C,EAAM5H,SAAU,oBAAqB,EAAG,IAAIx/C,KAAK,uBAAuBsiD,SAASrnC,GAC7F0sC,EAAQt5C,IAAI+4C,EAAM5H,SAAU,oBAAqB,EAAG,IAAIx/C,KAAK,uBAAuBsiD,SAASrnC,GAC/DhtB,MAA1Bm5D,EAAM5H,SAASgJ,SACjBb,EAAQt5C,IAAI+4C,EAAM5H,SAAU,WAAWx/C,KAAK,sBAAsBsiD,SAASrnC,GAI7E,MAAMqsC,EAAUF,EAAME,QAAQ9F,UAAU,SACxC8F,EAAQj5C,IAAI+4C,EAAMqB,OAAQ,WAAWzoD,KAAK,0BAA0BsiD,SAASrnC,GAC7EqsC,EAAQj5C,IAAI+4C,EAAO,iBAAiBpnD,KAAK,oBAAoBsiD,SAASrnC,GACtEqsC,EAAQj5C,IAAI+4C,EAAO,oBAAoBpnD,KAAK,uBAAuBsiD,SAASrnC,GAC5EqsC,EAAQj5C,IAAI+4C,EAAO,sBAAsBpnD,KAAK,mCAAmCsiD,SAASrnC,GAC1FqsC,EAAQj5C,IAAI+4C,EAAO,qBAAqBpnD,KAAK,kCAAkCsiD,SAASrnC,GACxF8rC,GAAwBK,EAAME,QAASF,EAAM5H,SAASxgD,MAItDwhD,EAAKgC,kBAAkB,uBAAuB,KAC5C,GAAI4E,EAAMG,cAAcz7D,OAAQ,CAC9Bs7D,EAAMsB,eAAiB,EACvB,MAAMC,EAAWvB,EAAMG,cAAcn0D,MAAM,KAC3C,IAAK,MAAMw1D,KAAOxB,EAAMyB,MAAMC,SAC5BF,EAAInnD,QAAUknD,EAASjhB,MAAK1nC,IAAQ+oD,OARVC,EAQwBhpD,EARjBipD,EAQuBL,EAAIM,MAAMlpD,KAP/DonD,EAAMI,kBAAoBwB,IAAUC,GAAS7B,EAAMM,mBAAqBsB,EAAMnoD,WAAWooD,IAAU7B,EAAMK,oBAAsBwB,EAAMpoD,WAAWmoD,GADnI,IAAUA,EAAOC,CAQsC,IACnEL,EAAIO,YACNP,EAAIO,UAAU1nD,QAAUmnD,EAAInnD,SAE1BmnD,EAAInnD,UACN2lD,EAAMsB,gBAAkBE,EAAIQ,SAASC,WAAW79B,SAAS/U,MAG/D,IAEJ,2CCtKa,SAAS6yC,GAAiB3qD,EAAKuiD,GAC5C,IAAI9I,EAAwB,EAC5B,MAAMC,EAAY7/B,KAAKC,MACjB8wC,EAAwB,CAC5B/jC,MAAO,mBACPphB,KAAM,CAAC,CACL9jB,EAAG,EACH0S,EAAG,IAEL6K,YAAak6C,GACbpxC,YAAa,IACb4xC,YAAa,GAETiR,EAA4B,CAChChkC,MAAO,uBACPphB,KAAM,CAAC,CACL9jB,EAAG,EACH0S,EAAG,IAEL6K,YAAam6C,GACbrxC,YAAa,IACb4xC,YAAa,GAET/yB,EAAQ,CAAC,MACTikC,EAAiB,IAAI/d,GAAM/sC,EAAK,CACpC/R,KAAM,OACNwX,KAAM,CACJ2f,OAAQyB,EACR1nB,SAAU,CAACyrD,EAAuBC,IAEpCp3D,QAAS,CACPuL,UAAW,CACTsD,SAAU,IAEZvB,OAAM,MAGV/R,KAAKstB,OAAS,CAACw9B,EAAWuJ,KAGxB,MAEMrJ,EAAM,GADIj7D,KAAK0X,OAAOojB,KAAKC,MAAQ4/B,GAAa,QAEpCD,EAAwB,GAAK5yB,EAAM4yB,IAA0BO,EAE7EnzB,EAAMjyB,KAAK,KAEXiyB,EAAMjyB,KAAKolD,GACXP,EAAwB5yB,EAAM15B,OAAS,GAErC05B,EAAM15B,OAVI,KAWZ05B,EAAMpG,QACNg5B,KAEFmR,EAAsBnlD,KAAK7Q,KAAK,CAC9BjT,EAAG,EACH0S,EAAGkuD,EAAUwI,6BAEfF,EAA0BplD,KAAK7Q,KAAK,CAClCjT,EAAG,EACH0S,EAAGgvD,IAEDuH,EAAsBnlD,KAAKtY,OAtBjB,KAuBZy9D,EAAsBnlD,KAAKgb,QAC3BoqC,EAA0BplD,KAAKgb,SAE7Bq5B,GACFgR,EAAexuC,QACjB,EAEFttB,KAAK2T,OAAS,KACZmoD,EAAenoD,QAAQ,CAE3B,CCzEe,SAASqoD,GAAoBhrD,EAAKuiD,GAC/C,MAAM0I,EAAkB,GAClBC,EAAgB,GAChBC,EAAkB,GAClBC,EAAiB,IAAIre,GAAM/sC,EAAK,CACpC/R,KAAM,MACNwX,KAAM,CACJ2f,OAAQ6lC,EACR9rD,SAAU,CAAC,CACT0nB,MAAO,yBACPphB,KAAMylD,EACNjsD,gBAAiBm6C,IAChB,CACDvyB,MAAO,0BACPphB,KAAM0lD,EACNlsD,gBAAiBo6C,MAGrB5lD,QAAS,CACPsN,OAAM,MAGV/R,KAAKstB,OAASw9B,IAuBZ,MAAMuR,EAAQ,CAAC,GAtBf,SAASC,EAAa3sD,EAAM0sD,GAC1B,GAAK1sD,GAASA,EAAKmE,UAGfnE,EAAK4sD,OAAS,GAAK5sD,EAAK8pD,QAAUlG,IAChC8I,EAAM1sD,EAAK4sD,OACbF,EAAM1sD,EAAK4sD,OAAO,IAAM,EAExBF,EAAM1sD,EAAK4sD,OAAS,CAAC,EAAG,GAEtB5sD,EAAKkiD,SAAS/9C,UAChBuoD,EAAM1sD,EAAK4sD,OAAO,IAAM,IAGxB5sD,EAAKwrD,UACP,IAAK,MAAMqB,KAAS7sD,EAAKwrD,SACvBmB,EAAaE,EAAOH,EAG1B,CAIAC,CAAa/I,EAAU2E,SAAUmE,GACjCJ,EAAgB99D,OAAS,EACzB+9D,EAAc/9D,OAAS,EACvB,IAAK,MAAMo+D,KAASF,GACd,CAAC,GAAEn3D,eAAe1C,KAAK65D,EAAOE,KAChCN,EAAgBM,GAAS,GAAGA,IAC5BL,EAAcK,GAASF,EAAME,GAAO,GACpCJ,EAAgBI,GAASF,EAAME,GAAO,IAGtCzR,GACFsR,EAAe9uC,QACjB,EAEFttB,KAAK2T,OAAS,KACZyoD,EAAezoD,QAAQ,CAE3B,CChEA,SAAS8oD,GAAyBhD,EAAOn1D,EAAKjC,GAC5Co3D,EAAMiD,oBAAoBp4D,EAAKjC,GAAO,MACvBo3D,EAAMh4C,OAASg4C,EAAMh4C,OAAOy2C,SAAWuB,EAAMvB,UACrDyE,UAASxnC,IACRA,EAAOskC,OAASA,GAAStkC,EAAO08B,SAClC18B,EAAO08B,SAASvtD,GAAOm1D,EAAMn1D,GACpB6wB,EAAOynC,SAAWznC,EAAOynC,QAAQnD,OAASA,GACnDtkC,EAAOynC,QAAQD,UAASv3D,IAClBA,EAAEysD,WACJzsD,EAAEysD,SAASvtD,GAAOm1D,EAAMn1D,GAC1B,GAEJ,GACA,GAEN,CACA,UACEu4D,qBAAqBjJ,EAAKf,EAAM4G,GAC9B7F,EAAIlzC,IAAI+4C,EAAO,aAAapnD,KAAK,aAAasiD,UAAS,IAAM9B,EAAKqC,aAAauE,IACjF,EACAqD,gBAAgBlJ,EAAKf,EAAM4G,EAAOsD,EAAOr0D,GACvC+zD,GAAyBhD,EAAO,OAAQ,GACxC7F,EAAIlzC,IAAI+4C,EAAO,OAAQsD,EAAOr0D,GAAK2J,KAAK,QAAQsiD,UAAS,IAAM9B,EAAKqC,aAAauE,IACnF,EACAuD,qBAAqBpJ,EAAKf,EAAM4G,EAAOsD,EAAOr0D,GAC5C+zD,GAAyBhD,EAAO,YAAa,GAC7C7F,EAAIlzC,IAAI+4C,EAAO,YAAasD,EAAOr0D,GAAK2J,KAAK,cAAcsiD,UAAS,IAAM9B,EAAKqC,aAAauE,IAC9F,EACAwD,sBAAsBnK,EAAcD,EAAM4G,GACxC,MAAM7F,EAAMd,EAAae,UAAU,SAAS4F,EAAMt3D,MAGlD,OAFAyxD,EAAIlzC,IAAI+4C,EAAO,WAAWpnD,KAAK,WAAWsiD,UAAS,IAAM9B,EAAKqC,aAAauE,KAC3E7F,EAAIlzC,IAAI+4C,EAAO,UAAW,EAAG,GAAGpnD,KAAK,WAAWsiD,UAAS,IAAM9B,EAAKqC,aAAauE,KAC1E7F,CACT,GChBF,IAAIsJ,GAUJ,SAASC,GAAatK,EAAMuK,GAC1B,IAAIC,IAAWxiC,UAAU18B,OAAS,QAAsBmC,IAAjBu6B,UAAU,KAAmBA,UAAU,GAC1EqiC,KACFA,GAAarL,SAASyL,aAAe,EACrCJ,GAAarL,SAAS0L,YAAc1K,EAAKU,UAAUgK,YACnD1K,EAAKqC,aAAagI,KAEpB,MAAMM,EAAS3K,EAAKU,UAAUkK,cAAc5K,EAAMuK,GAWlD,OAVAF,GAAeM,EAAOr/D,OAASq/D,EAAO,GAAGroC,YAAS70B,EAC9C48D,KACEG,GAEFjgD,QAAQK,KAAKy/C,IAEfA,GAAarL,SAASyL,aAAe,GACrCJ,GAAarL,SAAS0L,aAAc,EACpC1K,EAAKqC,aAAagI,KAEbA,EACT,CACe,SAASQ,GAAkB5K,EAAcD,EAAM4G,EAAOkE,GACnE,IAAIxL,EAAQt3B,UAAU18B,OAAS,QAAsBmC,IAAjBu6B,UAAU,IAAmBA,UAAU,GAC3E,IAAKg4B,EAAK+K,cAAgBzL,EACxB,OAEFwL,EAAgBA,GAAiB,IAAI,GAAM9K,EAAMC,GACjD2G,EAAQA,GAAS5G,EAAKU,UACtB,MAAMK,EAAMiK,GAAcZ,sBAAsBnK,EAAcD,EAAM4G,GAC9DqE,EAAgB,GAAGrE,EAAMt3D,gBACzB47D,EAAsBJ,EAAcvK,qBAAqB0K,GACzDE,EAAiB,GAAGvE,EAAMt3D,gBAC1B87D,EAAuBN,EAAcvK,qBAAqB4K,GAChEL,EAAcnyC,OAAO5lB,KAAK,IAAI,GAAgBm4D,EAAoB1mD,WAAW,MAAOoiD,IACpFkE,EAAcnyC,OAAO5lB,KAAK,IAAIo2D,GAAoBiC,EAAqB5mD,WAAW,MAAOoiD,IACzFA,EAAM8D,aAAc,EACpB9D,EAAMyE,WAAY,EAClB,MAAMpK,EAAQ,CACZqK,aAAa,EACbC,iBAAiB,EACjBC,WAAW,GAIbzK,EAAIlzC,IAAI+4C,EAAO,eAAepnD,KAAK,cAAcsiD,UAASC,IACxD6E,EAAM8D,YAAc3I,EA9DxB,SAAkC/B,EAAM1jE,EAAMsqE,EAAO7tC,GACnDz8B,EAAKwtE,UAASxnC,IACRA,EAAO08B,UAAY18B,EAAOskC,QAAUA,IACnCtkC,EAAO08B,SA6DD0L,YAAc3I,EA5DzB,IAEF/B,EAAKqC,cACP,CAwDIoJ,CAAyBzL,EAAM4G,EAAMvB,SAAUuB,EAE7C,IAIJ7F,EAAIlzC,IAAI+4C,EAAO,aAAapnD,KAAK,aAAasiD,UAAS,KACrD9B,EAAKqC,aAAauE,EAAM,IAI1B7F,EAAIlzC,IAAIozC,EAAO,eAAezhD,KAAK,gBAAgBsiD,UAASC,IAExD7vC,SAASy4B,eAAesgB,GAAe54C,WAAWtU,MAAM0D,QADtDsgD,EACgE,QAEA,OAEpE+I,EAAc1I,qBACd0I,EAAcnyC,OAAOphB,SAAQrZ,GAAKA,EAAEu8B,UAAS,IAI/CsmC,EAAIlzC,IAAIozC,EAAO,mBAAmBzhD,KAAK,oBAAoBsiD,UAASC,IAEhE7vC,SAASy4B,eAAewgB,GAAgB94C,WAAWtU,MAAM0D,QADvDsgD,EACiE,QAEA,OAErE+I,EAAc1I,qBACd0I,EAAcnyC,OAAOphB,SAAQrZ,GAAKA,EAAEu8B,UAAS,IAI/C,MAAMixC,EAAe,GAAG9E,EAAMt3D,eACxBq8D,EAAc,GAAG/E,EAAMt3D,cACvBs8D,EAAiB,IAAI,iBAAqB,EAAG,GAAI,IACvD,SAASC,EAAcruD,EAASopD,EAAO9pD,GACrC,IAAKA,EAAK8R,SAAWg4C,EAAM3lD,QAEzB,YADA6qD,GAAA,EAAoBC,oCAAoCnF,EAAO9pD,GAKjE,IAAI6mD,EAAS7mD,EAAKkvD,KAAKpF,EAAMt3D,IAC7B,GAAIwN,EAAKmE,SAAWnE,EAAKkiD,UAAYliD,EAAKkiD,SAAS/9C,QAAS,CAC1D,IAAK0iD,EAAQ,CAIX,GAHAA,EAAS,IAAI,QACbA,EAAOiD,MAAQA,EACf9pD,EAAKmvD,YAAYC,UAAUvI,EAAO34B,SAAU24B,EAAOnE,WAAYmE,EAAO1kD,OAClE2nD,EAAMt3D,IAAMo8D,EAAc,CAC5B,MAAMS,EAAY,IAAI,GAAUrvD,EAAKiiD,KACrCoN,EAAUvF,MAAQA,EAClBjD,EAAO91C,IAAIs+C,EACb,MAAO,GAAIvF,EAAMt3D,IAAMq8D,EAAa,CAClC,MAAM59D,EAAQ,IAAI,QAAY7Q,KAAK0hE,SAAU1hE,KAAK0hE,SAAU1hE,KAAK0hE,UAC3DI,EAAW,IAAI,oBAAwB,CAC3CjxD,MAAOA,EAAM+wD,SACbuM,WAAW,IAEPe,EAAe,IAAI,OAAWR,EAAgB5M,GACpDoN,EAAaphC,SAASy0B,KAAK3iD,EAAKuvD,eAAetgC,QAC/CqgC,EAAantD,MAAM4gD,eAAe/iD,EAAKuvD,eAAe/mD,QACtD8mD,EAAantD,MAAM5D,IAAI,EAAG,EAAG,GAAGwkD,eAAe/iD,EAAKuvD,eAAe/mD,QACnE8mD,EAAaxF,MAAQA,EACrBjD,EAAO91C,IAAIu+C,EACb,CACAtvD,EAAKkvD,KAAKpF,EAAMt3D,IAAMq0D,CACxB,CACAiD,EAAMvB,SAASx3C,IAAI81C,GACnBA,EAAOtE,mBAAkB,EAC3B,MAAWsE,GACTiD,EAAMvB,SAAS/rC,OAAOqqC,EAE1B,CACA,MAAM2I,UAAmBC,GAAA,EACvBpgE,YAAYmD,GACV,IAAIsC,EAAUo2B,UAAU18B,OAAS,QAAsBmC,IAAjBu6B,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACnFp2B,EAAQ6oB,OAASoxC,EACjBh0B,MAAMvoC,EAAIsC,EAAQyzD,UAAY,IAAI,QAAezzD,GACjDzE,KAAKq/D,cAAe,CACtB,CACAC,UAAUjvD,EAASxL,GACbA,EAAQyB,IAAItG,KAAKyhB,SACnBzhB,KAAKk4D,SAASjc,OAElB,EAEF,MAAMsjB,EAAW,IAAIJ,EAAWZ,EAAc,CAC5CzqD,SAAS,EACT0rD,cAAezO,IACf9sD,QAAQ,IAEV4uD,EAAK4M,SAASF,GAAUtwC,MAAKp/B,IAC3B+jE,EAAIlzC,IAAI7wB,EAAG,WAAWwiB,KAAK,kBAAkBsiD,UAAS,KACpD9B,EAAKqC,aAAarlE,EAAE,GACpB,IAEJ,MAAM6vE,EAAU,IAAIP,EAAWX,EAAa,CAC1C1qD,SAAS,EACT0rD,cAAezO,IACf9sD,QAAQ,IAEV4uD,EAAK4M,SAASC,GAASzwC,MAAKp/B,IAC1B+jE,EAAIlzC,IAAI7wB,EAAG,WAAWwiB,KAAK,oBAAoBsiD,UAAS,KACtD9B,EAAKqC,aAAarlE,EAAE,GACpB,IAEJ,MAAM8vE,EAAY56C,SAASy4B,eAAe,aACpCoiB,EAAS76C,SAASiuC,cAAc,QACtC4M,EAAOC,UAAY,aACnBF,EAAUxM,YAAYyM,GACtB,MAAME,EAAa,IAAI,UACvB,IAAIC,EACJ,MAAMC,EAA0B,KAC9B,eACAnN,EAAKqC,cAAc,EAEf+K,EAA2B,KAC/B,kBACIpN,EAAKqN,iBAAiB,KAAiBC,eAAe7wD,SAAS0wD,IACjEnN,EAAKmC,qBAAqB,KAAiBmL,cAAeH,EAC5D,EAEF,SAASnF,EAAQx0C,GACf,MAAM+5C,EAAajD,GAAatK,EAAMxsC,GAAO,GAC7C,GAAI+5C,EAAY,CACdR,EAAOhvD,MAAM0D,QAAU,aACvBwrD,EAAWxN,KAAK8N,EAAWlB,eAAetgC,QAAQyhC,aAAaD,EAAWtB,aAC1E,MAAMwB,EAAUR,EAAWQ,QAAQzN,EAAK6C,UAClC6K,EAAS1N,EAAK2N,uBAAuBF,GACrCl6D,EAAOg6D,EAAWK,WACxB,GAAIV,GAAcK,EAAY,CAC5B,MAAMM,EAAa99D,OAAOg9D,EAAOhvD,MAAM2E,MAAM7V,QAAQ,KAAM,KAC3DqgE,EAAaK,EACbH,IACA,IAAI,YAAY,CACd75D,KAAMs6D,IACLnjE,GAAG,CACJ6I,QACC,KAAKmN,OAAO,aAAaotD,WAAWC,IAAIrtD,OAAO,aAAastD,YAAYC,KAAKC,UAAS5rC,IACvFyqC,EAAOhvD,MAAM,eAAiB,GAAGukB,EAAO/uB,SACxCw5D,EAAOhvD,MAAM2E,MAAQ,GAAG4f,EAAO/uB,SAC/Bw5D,EAAOhvD,MAAM6G,OAAS,GAAG0d,EAAO/uB,SAChCw5D,EAAOoB,UAAY,GAAGjxE,KAAK0X,MAAM0tB,EAAO/uB,WACxCw5D,EAAOhvD,MAAMyD,KAAUksD,EAAO5tE,EAAkB,GAAdwiC,EAAO/uB,KAArB,KACpBw5D,EAAOhvD,MAAMsD,IAASqsD,EAAOl7D,EAAkB,GAAd8vB,EAAO/uB,KAArB,IAAmC,IACrDg3C,WAAW6iB,GAA0Bx3D,QACxCoqD,EAAKgC,kBAAkB,KAAiBsL,cAAeH,EACzD,CACF,MACEJ,EAAOhvD,MAAM0D,QAAU,MAE3B,CACAs/C,EAAIlzC,IAAIozC,EAAO,aAAazhD,KAAK,cAAcsiD,UAAShlE,IAClDA,EACF2a,OAAOud,iBAAiB,YAAagzC,GAAS,IAE9C+E,EAAOhvD,MAAM0D,QAAU,OACvB2rD,IACA31D,OAAOwd,oBAAoB,YAAa+yC,GAC1C,IAEF,IAAIoG,EAAU,KACd32D,OAAOud,iBAAiB,aAAaxB,IACpB,IAAX46C,GACF9D,GAAatK,EAAMxsC,EACrB,IAEF/b,OAAOud,iBAAiB,WAAWxB,IACjC46C,EAAU56C,EAAM66C,KAAK,IAEvB52D,OAAOud,iBAAiB,SAAS,KAC/Bo5C,EAAU,IAAI,GAElB,6BCjPA,MAAME,GAAW,IAAI,OACN,SAASC,GAAqBtO,EAAcD,EAAMwO,GAC/D,MAAMzN,EAAMiK,GAAcZ,sBAAsBnK,EAAcD,EAAMwO,GAGpExD,GAAchB,qBAAqBjJ,EAAKf,EAAMwO,GAG9C,MAAMC,EAAmB,GAAGD,EAAcl/D,2BACpCo/D,EAAsB,IAAInC,GAAA,EAAckC,EAAkB,IAAI,WAAkB,CACpFh0C,OAAQ,SAAUjd,EAASopD,EAAO9pD,GAGhC,MAAM6xD,EAAO7xD,EAAK8xD,SAASC,SAG3B,IAAIlL,EAAS7mD,EAAK8xD,SAASE,qBAG3B,GAAInL,EACFA,EAAO1iD,WAAa2lD,EAAM3lD,UAAWnE,EAAKmE,cAG5C,GAAI2lD,EAAM3lD,SAAWnE,EAAKmE,SAAW0tD,EAAKI,eAAgB,CACxD,GAAIJ,EAAKI,eAAeC,oBAAsB,KAA4Bn7C,IAAK,CAC7E,IAAIo7C,EAAeC,EAKnB,GAJAZ,GAAS1F,SAASuG,YAAcR,EAAKI,eAAeK,OACpDzL,EAAS,IAAI,YAAgB2K,IAC7B3K,EAAO3E,SAASC,UAAY,EAEW,QAAlCgQ,EAAgBN,EAAK5E,eAAuC,IAAlBkF,GAA4BA,EAAcI,KAA2C,QAAnCH,EAAiBP,EAAK5E,eAAwC,IAAnBmF,GAA6BA,EAAeG,IAAIv8D,SAAS,QAAS,CAC5M,MAAMw8D,EAAad,EAAce,QAAQC,MAAMF,gBAC5B7hE,IAAf6hE,GAA2C,MAAfA,EAC9B3L,EAAOt+C,SAASvlB,EAAe,IAAV5C,KAAKwW,GACF,MAAf47D,IACT3L,EAAOt+C,SAASmqB,EAAe,IAAVtyC,KAAKwW,IAE5BiwD,EAAO7D,cACT,CACF,KAAO,IAAI6O,EAAKI,eAAeC,oBAAsB,KAA4BS,QAAUd,EAAKI,eAAeC,oBAAsB,KAA4BU,OAS/J,YADAnlD,QAAQC,KAAK,8CAA8CmkD,EAAKI,kBARuG,CACvK,MAAMnG,EAAW,IAAI,iBAAqB+F,EAAKI,eAAeK,OAAO9pD,OAAQ,GAAI,IAC3E05C,EAAW,IAAI,oBAAwB,CAC3CqM,WAAW,EACXt9D,MAAuB,SAAhB7Q,KAAK0hE,WAEd+E,EAAS,IAAI,OAAWiF,EAAU5J,EACpC,CAGA,CACAliD,EAAK8xD,SAASE,qBAAuBnL,EACrC7mD,EAAK8R,OAAOf,IAAI81C,GAChBA,EAAOtE,mBAAkB,EAC3B,CACF,EACAp+C,SAAS,EACT0rD,cAAezO,IACf9sD,QAAQ,IAkBV,GAhBAu+D,GAAA,EAAKlgE,UAAUm9D,SAASj9D,KAAKqwD,EAAM0O,EAAqBF,GAAepyC,MAAKp/B,IAC1E+jE,EAAIlzC,IAAI7wB,EAAG,WAAWwiB,KAAK,kBAAkBsiD,UAAS,KACpD9B,EAAKqC,aAAarC,EAAK6C,SAAS,GAChC,IAIJ9B,EAAIlzC,IAAI2gD,EAAe,eAAgB,EAAG,KAAKhvD,KAAK,gBAAgBsiD,UAAS,KAC3E9B,EAAKqC,aAAarC,EAAK6C,SAAS,IAElC9B,EAAIlzC,IAAI,CACN20C,OAAQgM,EAAchM,QACrB,UAAUV,UAAStyD,IACpBg/D,EAAchM,OAAShzD,EACvBwwD,EAAKqC,aAAamM,EAAc,IAE9BA,EAAcoB,QAAS,CACzB,MAAMC,EAAqB,CACzBC,eAAgB,MAAUA,eAC1BC,MAAO,MAAUA,OAEnBhP,EAAIlzC,IAAI2gD,EAAe,WAAYqB,GAAoBrwD,KAAK,gBAAgBsiD,UAAS,KACnF0M,EAAcwB,UAAYxB,EAAcwB,SACxChQ,EAAKqC,aAAarC,EAAK4E,OAAO/B,SAAS,IAEzC9B,EAAIlzC,IAAI2gD,EAAe,YAAa,OAAYhvD,KAAK,gBAAgBsiD,UAAS,KAC5E9B,EAAKqC,aAAarC,EAAK4E,OAAO/B,SAAS,IAEzC9B,EAAIlzC,IAAI2gD,EAAe,eAAgB,OAAgBhvD,KAAK,kBAAkBsiD,UAAS,KACrF9B,EAAKqC,aAAarC,EAAK4E,OAAO/B,SAAS,IAEzC9B,EAAIlzC,IAAI2gD,EAAe,wBAAyB,EAAG,IAAIhvD,KAAK,uBAAuBsiD,UAAS,KAC1F9B,EAAKqC,aAAarC,EAAK4E,OAAO/B,SAAS,IAEzC9B,EAAIlzC,IAAI2gD,EAAe,wBAAyB,EAAG,IAAIhvD,KAAK,uBAAuBsiD,UAAS,KAC1F9B,EAAKqC,aAAarC,EAAK4E,OAAO/B,SAAS,GAE3C,CACF","sources":["webpack://itowns/webpack/universalModuleDefinition","webpack://itowns/./node_modules/@kurkle/color/dist/color.esm.js","webpack://itowns/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://itowns/./node_modules/chart.js/dist/chart.js","webpack://itowns/./utils/debug/charts/ChartConfig.js","webpack://itowns/./utils/debug/charts/ThreeStatsChart.js","webpack://itowns/./utils/debug/OBBHelper.js","webpack://itowns/./utils/debug/Debug.js","webpack://itowns/./utils/debug/PointCloudDebug.js","webpack://itowns/./utils/debug/charts/TileObjectChart.js","webpack://itowns/./utils/debug/charts/TileVisibilityChart.js","webpack://itowns/./utils/debug/GeometryDebug.js","webpack://itowns/./utils/debug/TileDebug.js","webpack://itowns/./utils/debug/3dTilesDebug.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"debug\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"debug\"] = factory();\n\telse\n\t\troot[\"debug\"] = factory();\n})(self, () => {\nreturn ","/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop)) {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.1\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import { Chart } from 'chart.js';\nChart.defaults.color = '#b0b0b0';\nexport const scales = {\n  y: {\n    display: true,\n    ticks: {\n      suggestedMin: 0 // minimum will be 0, unless there is a lower value.\n    },\n\n    gridLines: {\n      color: '#606060',\n      zeroLineColor: '#606060'\n    }\n  }\n};\nexport const color_rose = '#e7c9e5';\nexport const color_blue = '#64a6bd';\nexport const backgroundChartDiv = '#404040';\nexport default {};","import { Chart, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarElement, BarController } from 'chart.js';\nimport { scales, color_rose, color_blue } from \"./ChartConfig.js\";\nChart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, BarElement, BarController);\nexport default function ThreeStatsChart(ctx, renderer) {\n  let lastValidCompareIndex = -1;\n  const timestamp = Date.now();\n  const textureDataset = {\n    label: 'texture count',\n    data: [{\n      x: 0,\n      y: 0\n    }],\n    borderColor: color_rose,\n    borderWidth: 1.5,\n    pointRadius: 1\n  };\n  const geometryDataset = {\n    label: 'geometry count',\n    data: [{\n      x: 0,\n      y: 0\n    }],\n    borderColor: color_blue,\n    borderWidth: 1.5,\n    pointRadius: 1\n  };\n  const label = ['0s'];\n  const chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: label,\n      datasets: [textureDataset, geometryDataset]\n    },\n    options: {\n      animation: {\n        duration: 10\n      },\n      scales\n    }\n  });\n  this.update = displayed => {\n    const limit = 60;\n    const timeInS = Math.floor((Date.now() - timestamp) / 1000);\n    const lbl = `${timeInS}s`;\n    const identical = lastValidCompareIndex > 0 && label[lastValidCompareIndex] == lbl;\n    if (identical) {\n      label.push('');\n    } else {\n      label.push(lbl);\n      lastValidCompareIndex = label.length - 1;\n    }\n    if (label.length > limit) {\n      label.shift();\n      lastValidCompareIndex--;\n    }\n    const memory = renderer.info.memory;\n    textureDataset.data.push({\n      x: timeInS,\n      y: memory.textures\n    });\n    geometryDataset.data.push({\n      x: timeInS,\n      y: memory.geometries\n    });\n    if (textureDataset.data.length > limit) {\n      textureDataset.data.shift();\n      geometryDataset.data.shift();\n    }\n    if (displayed) {\n      chart.update();\n    }\n  };\n  this.resize = () => {\n    chart.resize();\n  };\n}","import * as THREE from 'three';\nclass OBBHelper extends THREE.Box3Helper {\n  constructor(OBB, text, color) {\n    color = color || new THREE.Color(Math.random(), Math.random(), Math.random());\n    super(OBB.box3D, color.getHex());\n    this.obb = OBB;\n    this.material.linewidth = 2;\n    this.frustumCulled = false;\n    this.matrixAutoUpdate = false;\n    this.rotationAutoUpdate = false;\n    this.updateMatrixWorld(true);\n  }\n  updateMatrixWorld() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.obb.box3D.isEmpty()) {\n      return;\n    }\n    this.quaternion.copy(this.obb.quaternion);\n    this.obb.box3D.getCenter(this.position).applyQuaternion(this.quaternion).add(this.obb.position);\n    this.obb.box3D.getSize(this.scale);\n    this.scale.multiplyScalar(0.5);\n    this.updateMatrix();\n    THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n  }\n}\nexport default OBBHelper;","import { CameraHelper, Color, Vector3 } from 'three';\nimport Coordinates from \"../../src/Core/Geographic/Coordinates.js\";\nimport { MAIN_LOOP_EVENTS } from \"../../src/Core/MainLoop.js\";\nimport OBB from \"../../src/Renderer/OBB.js\";\nimport * as THREE from 'three';\nimport ThreeStatsChart from \"./charts/ThreeStatsChart.js\";\nimport { backgroundChartDiv, color_blue } from \"./charts/ChartConfig.js\";\nimport OBBHelper from \"./OBBHelper.js\";\n\n/**\n * Create a debug instance attached to an itowns instance\n *\n * @Constructor\n * @param {Scene} scene the itowns Scene\n * @return {Debug} a debug instance\n */\n\n// disabling eslint errors as it is the exported constructor\nfunction Debug(view, datDebugTool, chartDivContainer) {\n  // CHARTS\n  // Create default charts div if missing\n  if (!chartDivContainer) {\n    chartDivContainer = document.createElement('div');\n    chartDivContainer.id = 'chart-div';\n    chartDivContainer.style.cssText = `z-index: 10; position: absolute; bottom: 0; left: 0; width: 100vw; height: 30%; background-color: ${backgroundChartDiv}; display: none`;\n    document.body.appendChild(chartDivContainer);\n  }\n  this.chartDivContainer = chartDivContainer;\n  const canvas = this.createChartContainer('three-info');\n  const ctx = canvas.getContext('2d');\n  this.charts = [];\n  this.charts.push(new ThreeStatsChart(ctx, view.mainLoop.gfxEngine.renderer));\n  const charts = this.charts;\n  const tileLayer = view.tileLayer;\n  const initialPosition = new Coordinates(view.referenceCrs, 0.0, 0.0, 0.0);\n  const geoPosition = new Coordinates('EPSG:4326', 0.0, 0.0, 0.0);\n  function debugChartUpdate(updateDuration) {\n    const displayed = chartDivContainer.style.display != 'none';\n    charts.forEach(c => c.update(displayed, updateDuration));\n  }\n\n  // DEBUG CONTROLS\n  const gui = datDebugTool.addFolder('Debug Tools');\n  const state = {\n    displayCharts: false,\n    eventsDebug: false,\n    debugCameraWindow: false,\n    freeze: false\n  };\n  let before;\n  const startChart = () => {\n    before = Date.now();\n  };\n  const endChart = () => {\n    const duration = Date.now() - before;\n    // debug graphs update\n    debugChartUpdate(duration);\n  };\n\n  // charts\n  gui.add(state, 'displayCharts').name('Display charts').onChange(newValue => {\n    if (newValue) {\n      view.addFrameRequester(MAIN_LOOP_EVENTS.UPDATE_START, startChart);\n      view.addFrameRequester(MAIN_LOOP_EVENTS.UPDATE_END, endChart);\n      chartDivContainer.style.display = 'flex';\n    } else {\n      view.removeFrameRequester(MAIN_LOOP_EVENTS.UPDATE_START, startChart);\n      view.removeFrameRequester(MAIN_LOOP_EVENTS.UPDATE_END, endChart);\n      chartDivContainer.style.display = 'none';\n    }\n    this.updateChartDivSize();\n    view.notifyChange();\n  });\n  gui.add(state, 'debugCameraWindow').name('debug Camera').onChange(value => {\n    if (value) {\n      view.addFrameRequester(MAIN_LOOP_EVENTS.AFTER_RENDER, renderCameraDebug);\n    } else {\n      view.removeFrameRequester(MAIN_LOOP_EVENTS.AFTER_RENDER, renderCameraDebug);\n    }\n    view.notifyChange();\n  });\n  gui.add(state, 'freeze').name('freeze update').onChange(newValue => {\n    tileLayer.frozen = newValue;\n    view.notifyChange();\n  });\n\n  // camera-target-updated event\n  let LatController;\n  let LongController;\n  let AltiController;\n  let eventFolder;\n  const controls = view.controls;\n  initialPosition.crs = view.referenceCrs;\n  const cursorWorldPosition = new THREE.Vector3();\n  const getCenter = controls && controls.getCameraTargetPosition ? controls.getCameraTargetPosition : () => view.camera3D.position;\n  const cameraTargetListener = event => {\n    if (view.getPickingPositionFromDepth(view.eventToViewCoords(event), cursorWorldPosition)) {\n      initialPosition.setFromVector3(cursorWorldPosition).as('EPSG:4326', geoPosition);\n      state.latitude = `${geoPosition.y.toFixed(6)}`;\n      state.longitude = `${geoPosition.x.toFixed(6)}`;\n      state.altitude = `${geoPosition.z.toFixed(2)}`;\n    } else {\n      state.latitude = '---------';\n      state.longitude = '---------';\n      state.altitude = '---------';\n    }\n    LatController.updateDisplay();\n    LongController.updateDisplay();\n    AltiController.updateDisplay();\n  };\n  gui.add(state, 'eventsDebug').name('Debug event').onChange((() => newValue => {\n    if (newValue) {\n      eventFolder = gui.addFolder('Events');\n      eventFolder.open();\n      initialPosition.setFromVector3(getCenter()).as('EPSG:4326', geoPosition);\n      state.latitude = `${geoPosition.y.toFixed(6)}`;\n      state.longitude = `${geoPosition.x.toFixed(6)}`;\n      state.altitude = `${geoPosition.z.toFixed(2)}`;\n      LatController = eventFolder.add(state, 'latitude');\n      LongController = eventFolder.add(state, 'longitude');\n      AltiController = eventFolder.add(state, 'altitude');\n      view.domElement.addEventListener('mousemove', cameraTargetListener);\n    } else {\n      view.domElement.removeEventListener('mousemove', cameraTargetListener);\n      gui.removeFolder('Events');\n    }\n  })());\n\n  // Camera debug\n  const helper = new CameraHelper(view.camera3D);\n  const debugCamera = view.camera3D.clone();\n  debugCamera.fov *= 1.5;\n  debugCamera.updateProjectionMatrix();\n  const g = view.mainLoop.gfxEngine;\n  const r = g.renderer;\n  let fogDistance = 10e10;\n  const layerAtmosphere = view.getLayerById('atmosphere');\n  if (layerAtmosphere) {\n    fogDistance = layerAtmosphere.fog.distance;\n  }\n  helper.visible = false;\n  view.scene.add(helper);\n\n  // Displayed tiles boundind box\n  const displayedTilesObb = new OBB();\n  const displayedTilesObbHelper = new OBBHelper(displayedTilesObb, '', new Color(color_blue));\n  displayedTilesObbHelper.visible = false;\n  view.scene.add(displayedTilesObb);\n  view.scene.add(displayedTilesObbHelper);\n  function updateFogDistance(obj) {\n    if (obj.material && fogDistance) {\n      obj.material.fogDistance = fogDistance;\n    }\n  }\n  const clearColor = new Color();\n  const lookAtCameraDebug = new Vector3();\n  function renderCameraDebug() {\n    if (state.debugCameraWindow && debugCamera) {\n      const ratio = 0.25;\n      const size = {\n        x: g.width * ratio,\n        y: g.height * ratio\n      };\n      debugCamera.aspect = size.x / size.y;\n      const camera = view.camera3D;\n      const coord = new Coordinates(view.referenceCrs, camera.position).as(tileLayer.extent.crs);\n      const extent = view.tileLayer.info.displayed.extent;\n      displayedTilesObb.setFromExtent(extent);\n      displayedTilesObbHelper.visible = true;\n      displayedTilesObbHelper.updateMatrixWorld(true);\n\n      // Note Method to compute near and far...\n      // const bbox = displayedTilesObb.box3D.clone().applyMatrix4(displayedTilesObb.matrixWorld);\n      // const distance = bbox.distanceToPoint(view.camera3D.position);\n      // console.log('distance', distance, distance + bbox.getBoundingSphere(sphere).radius * 2);\n\n      // Compute position camera debug\n      const altitudeCameraDebug = 1.5 * coord.z;\n      coord.z = altitudeCameraDebug;\n      coord.as(view.referenceCrs).toVector3(debugCamera.position);\n      // Compute recoil camera\n      camera.worldToLocal(debugCamera.position);\n      debugCamera.position.z += altitudeCameraDebug;\n      camera.localToWorld(debugCamera.position);\n      // Compute target camera debug\n      lookAtCameraDebug.copy(view.camera3D.position);\n      camera.worldToLocal(lookAtCameraDebug);\n      lookAtCameraDebug.z -= altitudeCameraDebug * 1.5;\n      camera.localToWorld(lookAtCameraDebug);\n      debugCamera.lookAt(lookAtCameraDebug);\n      helper.update();\n      debugCamera.updateProjectionMatrix();\n      if (layerAtmosphere) {\n        layerAtmosphere.object3d.visible = false;\n        fogDistance = 10e10;\n        for (const obj of tileLayer.level0Nodes) {\n          obj.traverseVisible(updateFogDistance);\n        }\n      }\n      const deltaY = state.displayCharts ? Math.round(parseFloat(chartDivContainer.style.height.replace('%', '')) * g.height / 100) + 3 : 0;\n      helper.visible = true;\n      helper.updateMatrixWorld(true);\n      r.getClearColor(clearColor);\n      r.setViewport(g.width - size.x, deltaY, size.x, size.y);\n      r.setScissor(g.width - size.x, deltaY, size.x, size.y);\n      r.setScissorTest(true);\n      r.setClearColor(backgroundChartDiv);\n      r.clear();\n      r.render(view.scene, debugCamera);\n      r.setScissorTest(false);\n      r.setClearColor(clearColor);\n      r.setViewport(0, 0, g.width, g.height);\n      helper.visible = false;\n      displayedTilesObbHelper.visible = false;\n      if (layerAtmosphere) {\n        layerAtmosphere.object3d.visible = true;\n      }\n      if (layerAtmosphere) {\n        fogDistance = layerAtmosphere.fog.distance;\n        for (const obj of tileLayer.level0Nodes) {\n          obj.traverseVisible(updateFogDistance);\n        }\n      }\n    }\n  }\n}\nDebug.prototype.createChartContainer = function createChartContainer(chartId) {\n  const div = document.createElement('div');\n  div.style.cssText = `background-color: ${backgroundChartDiv}; flex: auto;`;\n  this.chartDivContainer.appendChild(div);\n  const chartCanvas = document.createElement('canvas');\n  chartCanvas.height = '20rem';\n  chartCanvas.id = chartId;\n  div.appendChild(chartCanvas);\n  return chartCanvas;\n};\nDebug.prototype.updateChartDivSize = function updateChartDivSize() {\n  let count = 0;\n  for (const div of this.chartDivContainer.getElementsByTagName('div')) {\n    if (div.style.display !== 'none') {\n      count++;\n    }\n  }\n  const size = Math.floor(100 / count);\n  for (const div of this.chartDivContainer.getElementsByTagName('div')) {\n    if (div.style.display !== 'none') {\n      div.style.width = `${size}%`;\n    }\n  }\n  this.charts.forEach(c => {\n    c.resize();\n    c.update();\n  });\n};\nexport default Debug;","import { PNTS_MODE, PNTS_SHAPE, PNTS_SIZE_MODE } from \"../../src/Renderer/PointsMaterial.js\";\nfunction getController(gui, name) {\n  let controller = null;\n  const controllers = gui.__folders.Styling.__controllers;\n  for (let i = 0; i < controllers.length; i += 1) {\n    const c = controllers[i];\n    if (c.property === name || c.name === name) {\n      controller = c;\n      break;\n    }\n  }\n  return controller;\n}\nfunction hideController(gui, name) {\n  getController(gui, name).__li.style.display = 'none';\n}\nfunction showController(gui, name) {\n  getController(gui, name).__li.style.display = '';\n}\nfunction setupControllerVisibily(gui, mode) {\n  if ([PNTS_MODE.INTENSITY, PNTS_MODE.ELEVATION, PNTS_MODE.SCAN_ANGLE].includes(parseInt(mode, 10))) {\n    showController(gui, 'gradient');\n  } else {\n    hideController(gui, 'gradient');\n  }\n  if (PNTS_MODE.INTENSITY === parseInt(mode, 10)) {\n    showController(gui, 'minIntensityRange');\n    showController(gui, 'maxIntensityRange');\n  } else {\n    hideController(gui, 'minIntensityRange');\n    hideController(gui, 'maxIntensityRange');\n  }\n  if (PNTS_MODE.ELEVATION === parseInt(mode, 10)) {\n    showController(gui, 'minElevationRange');\n    showController(gui, 'maxElevationRange');\n  } else {\n    hideController(gui, 'minElevationRange');\n    hideController(gui, 'maxElevationRange');\n  }\n  if (PNTS_MODE.SCAN_ANGLE === parseInt(mode, 10)) {\n    showController(gui, 'minAngleRange');\n    showController(gui, 'maxAngleRange');\n  } else {\n    hideController(gui, 'minAngleRange');\n    hideController(gui, 'maxAngleRange');\n  }\n}\nexport default {\n  initTools(view, layer, datUi) {\n    layer.debugUI = datUi.addFolder(`${layer.id}`);\n    const update = () => {\n      setupControllerVisibily(layer.debugUI, layer.material.mode);\n      view.notifyChange(layer, true);\n    };\n    layer.debugUI.add(layer, 'visible').name('Visible').onChange(update);\n    layer.debugUI.add(layer, 'sseThreshold').name('SSE threshold').onChange(update);\n    layer.debugUI.add(layer, 'octreeDepthLimit', -1, 20).name('Depth limit').onChange(update);\n    layer.debugUI.add(layer, 'pointBudget', 1, 15000000).name('Max point count').onChange(update);\n    layer.debugUI.add(layer.object3d.position, 'z', -50, 50).name('Z translation').onChange(() => {\n      layer.object3d.updateMatrixWorld();\n      view.notifyChange(layer);\n    });\n    layer.dbgStickyNode = '';\n    layer.dbgDisplaySticky = false;\n    layer.dbgDisplayChildren = true;\n    layer.dbgDisplayParents = true;\n    const styleUI = layer.debugUI.addFolder('Styling');\n    if (layer.material.mode != undefined) {\n      const modeNames = Object.keys(PNTS_MODE);\n      const mode = modeNames.filter(v => PNTS_MODE[v] === layer.material.mode)[0];\n      styleUI.add({\n        mode\n      }, 'mode', modeNames).name('Display mode').onChange(value => {\n        layer.material.mode = PNTS_MODE[value];\n        update();\n      });\n      const gradiantsNames = Object.keys(layer.material.gradients);\n      styleUI.add({\n        gradient: gradiantsNames[0]\n      }, 'gradient', gradiantsNames).name('gradient').onChange(value => {\n        layer.material.gradient = layer.material.gradients[value];\n        update();\n      });\n      styleUI.add(layer, 'minIntensityRange', layer.minIntensityRange, layer.maxIntensityRange - 1).name('Intensity min').onChange(value => {\n        if (value >= layer.maxIntensityRange) {\n          layer.maxIntensityRange = value + 1;\n          getController(layer.debugUI, 'maxIntensityRange').updateDisplay();\n        }\n        update();\n      });\n      styleUI.add(layer, 'maxIntensityRange', layer.minIntensityRange + 1, layer.maxIntensityRange).name('Intensity max').onChange(value => {\n        if (value <= layer.minIntensityRange) {\n          layer.minIntensityRange = value - 1;\n          getController(layer.debugUI, 'minIntensityRange').updateDisplay();\n        }\n        update();\n      });\n      styleUI.add(layer, 'minElevationRange', layer.minElevationRange, layer.maxElevationRange).name('Elevation min').onChange(value => {\n        if (value >= layer.maxElevationRange) {\n          layer.maxElevationRange = value + 1;\n          getController(layer.debugUI, 'maxElevationRange').updateDisplay();\n        }\n        update();\n      });\n      styleUI.add(layer, 'maxElevationRange', layer.minElevationRange, layer.maxElevationRange).name('Elevation max').onChange(value => {\n        if (value <= layer.minElevationRange) {\n          layer.minElevationRange = value - 1;\n          getController(layer.debugUI, 'minElevationRange').updateDisplay();\n        }\n        update();\n      });\n      styleUI.add(layer, 'minAngleRange', layer.minAngleRange, layer.maxAngleRange).name('Angle min').onChange(value => {\n        if (value >= layer.maxAngleRange) {\n          layer.maxAngleRange = value + 1;\n          getController(layer.debugUI, 'maxAngleRange').updateDisplay();\n        }\n        update();\n      });\n      styleUI.add(layer, 'maxAngleRange', layer.minAngleRange, layer.maxAngleRange).name('Angle max').onChange(value => {\n        if (value <= layer.minAngleRange) {\n          layer.minAngleRange = value - 1;\n          getController(layer.debugUI, 'minAngleRange').updateDisplay();\n        }\n        update();\n      });\n    }\n    if (layer.material.shape != undefined) {\n      styleUI.add(layer.material, 'shape', PNTS_SHAPE).name('Shape mode').onChange(update);\n    }\n    styleUI.add(layer, 'opacity', 0, 1).name('Layer Opacity').onChange(update);\n    styleUI.add(layer, 'pointSize', 0, 15).name('Point Size').onChange(update);\n    if (layer.material.sizeMode != undefined) {\n      styleUI.add(layer.material, 'sizeMode', PNTS_SIZE_MODE).name('Point size mode').onChange(() => {\n        update();\n      });\n    }\n    styleUI.add(layer.material, 'minAttenuatedSize', 0, 15).name('Min attenuated size').onChange(update);\n    styleUI.add(layer.material, 'maxAttenuatedSize', 0, 15).name('Max attenuated size').onChange(update);\n    if (layer.material.picking != undefined) {\n      styleUI.add(layer.material, 'picking').name('Display picking id').onChange(update);\n    }\n\n    // UI\n    const debugUI = layer.debugUI.addFolder('Debug');\n    debugUI.add(layer.bboxes, 'visible').name('Display Bounding Boxes').onChange(update);\n    debugUI.add(layer, 'dbgStickyNode').name('Sticky node name').onChange(update);\n    debugUI.add(layer, 'dbgDisplaySticky').name('Display sticky node').onChange(update);\n    debugUI.add(layer, 'dbgDisplayChildren').name('Display children of sticky node').onChange(update);\n    debugUI.add(layer, 'dbgDisplayParents').name('Display parents of sticky node').onChange(update);\n    setupControllerVisibily(layer.debugUI, layer.material.mode);\n    const isInHierarchy = function (name1, name2) {\n      return layer.dbgDisplaySticky && name1 === name2 || layer.dbgDisplayParents && name1.startsWith(name2) || layer.dbgDisplayChildren && name2.startsWith(name1);\n    };\n    view.addFrameRequester('before_layer_update', () => {\n      if (layer.dbgStickyNode.length) {\n        layer.displayedCount = 0;\n        const stickies = layer.dbgStickyNode.split(',');\n        for (const pts of layer.group.children) {\n          pts.visible = stickies.some(name => isInHierarchy(name, pts.owner.name));\n          if (pts.boxHelper) {\n            pts.boxHelper.visible = pts.visible;\n          }\n          if (pts.visible) {\n            layer.displayedCount += pts.geometry.attributes.position.count;\n          }\n        }\n      }\n    });\n  }\n};","import { Chart } from 'chart.js';\nimport { scales, color_rose, color_blue } from \"./ChartConfig.js\";\nexport default function TileObjectsChart(ctx, tileLayer) {\n  let lastValidCompareIndex = 0;\n  const timestamp = Date.now();\n  const viewLevelStartDataset = {\n    label: 'Update 1st level',\n    data: [{\n      x: 0,\n      y: 0\n    }],\n    borderColor: color_rose,\n    borderWidth: 1.5,\n    pointRadius: 1\n  };\n  const viewUpdateDurationDataset = {\n    label: 'Update duration (ms)',\n    data: [{\n      x: 0,\n      y: 0\n    }],\n    borderColor: color_blue,\n    borderWidth: 1.5,\n    pointRadius: 1\n  };\n  const label = ['0s'];\n  const nbObjectsChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: label,\n      datasets: [viewLevelStartDataset, viewUpdateDurationDataset]\n    },\n    options: {\n      animation: {\n        duration: 10\n      },\n      scales\n    }\n  });\n  this.update = (displayed, updateDuration) => {\n    // update line graph\n    // update time\n    const limit = 60;\n    const timeInS = Math.floor((Date.now() - timestamp) / 1000);\n    const lbl = `${timeInS}s`;\n    const identical = lastValidCompareIndex > 0 && label[lastValidCompareIndex] == lbl;\n    if (identical) {\n      label.push('');\n    } else {\n      label.push(lbl);\n      lastValidCompareIndex = label.length - 1;\n    }\n    if (label.length > limit) {\n      label.shift();\n      lastValidCompareIndex--;\n    }\n    viewLevelStartDataset.data.push({\n      x: 0,\n      y: tileLayer._latestUpdateStartingLevel\n    });\n    viewUpdateDurationDataset.data.push({\n      x: 0,\n      y: updateDuration\n    });\n    if (viewLevelStartDataset.data.length > limit) {\n      viewLevelStartDataset.data.shift();\n      viewUpdateDurationDataset.data.shift();\n    }\n    if (displayed) {\n      nbObjectsChart.update();\n    }\n  };\n  this.resize = () => {\n    nbObjectsChart.resize();\n  };\n}","import { Chart } from 'chart.js';\nimport { scales, color_rose, color_blue } from \"./ChartConfig.js\";\nexport default function TileVisibilityChart(ctx, tileLayer) {\n  const nbVisibleLabels = [];\n  const nbVisibleData = [];\n  const nbDisplayedData = [];\n  const nbVisibleChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: nbVisibleLabels,\n      datasets: [{\n        label: 'Visible node per level',\n        data: nbVisibleData,\n        backgroundColor: color_rose\n      }, {\n        label: 'Diplayed node per level',\n        data: nbDisplayedData,\n        backgroundColor: color_blue\n      }]\n    },\n    options: {\n      scales\n    }\n  });\n  this.update = displayed => {\n    function countVisible(node, stats) {\n      if (!node || !node.visible) {\n        return;\n      }\n      if (node.level >= 0 && node.layer === tileLayer) {\n        if (stats[node.level]) {\n          stats[node.level][0] += 1;\n        } else {\n          stats[node.level] = [1, 0];\n        }\n        if (node.material.visible) {\n          stats[node.level][1] += 1;\n        }\n      }\n      if (node.children) {\n        for (const child of node.children) {\n          countVisible(child, stats);\n        }\n      }\n    }\n\n    // update bar graph\n    const stats = {};\n    countVisible(tileLayer.object3d, stats);\n    nbVisibleLabels.length = 0;\n    nbVisibleData.length = 0;\n    for (const level in stats) {\n      if ({}.hasOwnProperty.call(stats, level)) {\n        nbVisibleLabels[level] = `${level}`;\n        nbVisibleData[level] = stats[level][0];\n        nbDisplayedData[level] = stats[level][1];\n      }\n    }\n    if (displayed) {\n      nbVisibleChart.update();\n    }\n  };\n  this.resize = () => {\n    nbVisibleChart.resize();\n  };\n}","// TODO: move to GeometryLayer\nfunction addMaterialLayerProperty(layer, key, value) {\n  layer.defineLayerProperty(key, value, () => {\n    const root = layer.parent ? layer.parent.object3d : layer.object3d;\n    root.traverse(object => {\n      if (object.layer == layer && object.material) {\n        object.material[key] = layer[key];\n      } else if (object.content && object.content.layer == layer) {\n        object.content.traverse(o => {\n          if (o.material) {\n            o.material[key] = layer[key];\n          }\n        });\n      }\n    });\n  });\n}\nexport default {\n  addWireFrameCheckbox(gui, view, layer) {\n    gui.add(layer, 'wireframe').name('Wireframe').onChange(() => view.notifyChange(layer));\n  },\n  addMaterialSize(gui, view, layer, begin, end) {\n    addMaterialLayerProperty(layer, 'size', 1);\n    gui.add(layer, 'size', begin, end).name('Size').onChange(() => view.notifyChange(layer));\n  },\n  addMaterialLineWidth(gui, view, layer, begin, end) {\n    addMaterialLayerProperty(layer, 'linewidth', 1);\n    gui.add(layer, 'linewidth', begin, end).name('Line Width').onChange(() => view.notifyChange(layer));\n  },\n  createGeometryDebugUI(datDebugTool, view, layer) {\n    const gui = datDebugTool.addFolder(`Layer ${layer.id}`);\n    gui.add(layer, 'visible').name('Visible').onChange(() => view.notifyChange(layer));\n    gui.add(layer, 'opacity', 0, 1).name('Opacity').onChange(() => view.notifyChange(layer));\n    return gui;\n  }\n};","import * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js';\nimport GeometryLayer from \"../../src/Layer/GeometryLayer.js\";\nimport { MAIN_LOOP_EVENTS } from \"../../src/Core/MainLoop.js\";\nimport ObjectRemovalHelper from \"../../src/Process/ObjectRemovalHelper.js\";\nimport TileObjectChart from \"./charts/TileObjectChart.js\";\nimport TileVisibilityChart from \"./charts/TileVisibilityChart.js\";\nimport GeometryDebug from \"./GeometryDebug.js\";\nimport Debug from \"./Debug.js\";\nimport OBBHelper from \"./OBBHelper.js\";\nfunction applyToNodeFirstMaterial(view, root, layer, cb) {\n  root.traverse(object => {\n    if (object.material && object.layer === layer) {\n      cb(object.material);\n    }\n  });\n  view.notifyChange();\n}\nlet selectedNode;\n/**\n * Select tile\n *\n * @param      {View} view\n * @param      {Object} mouseOrEvt - mouse position in window coordinates (0, 0 = top-left)\n * or MouseEvent or TouchEvent.\n * @param      {boolean}  [showInfo=true] Show tile information in console.\n * @return     {TileMesh} Selected tile.\n */\nfunction selectTileAt(view, mouseOrEvt) {\n  let showInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (selectedNode) {\n    selectedNode.material.overlayAlpha = 0;\n    selectedNode.material.showOutline = view.tileLayer.showOutline;\n    view.notifyChange(selectedNode);\n  }\n  const picked = view.tileLayer.pickObjectsAt(view, mouseOrEvt);\n  selectedNode = picked.length ? picked[0].object : undefined;\n  if (selectedNode) {\n    if (showInfo) {\n      // eslint-disable-next-line no-console\n      console.info(selectedNode);\n    }\n    selectedNode.material.overlayAlpha = 0.5;\n    selectedNode.material.showOutline = true;\n    view.notifyChange(selectedNode);\n  }\n  return selectedNode;\n}\nexport default function createTileDebugUI(datDebugTool, view, layer, debugInstance) {\n  let force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (!view.isDebugMode && !force) {\n    return;\n  }\n  debugInstance = debugInstance || new Debug(view, datDebugTool);\n  layer = layer || view.tileLayer;\n  const gui = GeometryDebug.createGeometryDebugUI(datDebugTool, view, layer);\n  const objectChardId = `${layer.id}-nb-objects`;\n  const canvasObjectChardId = debugInstance.createChartContainer(objectChardId);\n  const visibleChardId = `${layer.id}-nb-visible`;\n  const canvasVisibleChardId = debugInstance.createChartContainer(visibleChardId);\n  debugInstance.charts.push(new TileObjectChart(canvasObjectChardId.getContext('2d'), layer));\n  debugInstance.charts.push(new TileVisibilityChart(canvasVisibleChardId.getContext('2d'), layer));\n  layer.showOutline = false;\n  layer.wireframe = false;\n  const state = {\n    objectChart: true,\n    visibilityChart: true,\n    sseHelper: false\n  };\n\n  // tiles outline\n  gui.add(layer, 'showOutline').name('Show tiles').onChange(newValue => {\n    layer.showOutline = newValue;\n    applyToNodeFirstMaterial(view, layer.object3d, layer, material => {\n      material.showOutline = newValue;\n    });\n  });\n\n  // tiles wireframe\n  gui.add(layer, 'wireframe').name('Wireframe').onChange(() => {\n    view.notifyChange(layer);\n  });\n\n  // TileObjectChart visibility\n  gui.add(state, 'objectChart').name('Object chart').onChange(newValue => {\n    if (newValue) {\n      document.getElementById(objectChardId).parentNode.style.display = 'block';\n    } else {\n      document.getElementById(objectChardId).parentNode.style.display = 'none';\n    }\n    debugInstance.updateChartDivSize();\n    debugInstance.charts.forEach(c => c.update());\n  });\n\n  // TileVisibilityChart visibility\n  gui.add(state, 'visibilityChart').name('Visibility chart').onChange(newValue => {\n    if (newValue) {\n      document.getElementById(visibleChardId).parentNode.style.display = 'block';\n    } else {\n      document.getElementById(visibleChardId).parentNode.style.display = 'none';\n    }\n    debugInstance.updateChartDivSize();\n    debugInstance.charts.forEach(c => c.update());\n  });\n\n  // Bounding box control\n  const obb_layer_id = `${layer.id}_obb_debug`;\n  const sb_layer_id = `${layer.id}_sb_debug`;\n  const geometrySphere = new THREE.SphereGeometry(1, 16, 16);\n  function debugIdUpdate(context, layer, node) {\n    if (!node.parent || !layer.visible) {\n      ObjectRemovalHelper.removeChildrenAndCleanupRecursively(layer, node);\n      return;\n    }\n\n    // filtering helper attached to node with the current debug layer\n    let helper = node.link[layer.id];\n    if (node.visible && node.material && node.material.visible) {\n      if (!helper) {\n        helper = new THREE.Group();\n        helper.layer = layer;\n        node.matrixWorld.decompose(helper.position, helper.quaternion, helper.scale);\n        if (layer.id == obb_layer_id) {\n          const obbHelper = new OBBHelper(node.obb);\n          obbHelper.layer = layer;\n          helper.add(obbHelper);\n        } else if (layer.id == sb_layer_id) {\n          const color = new THREE.Color(Math.random(), Math.random(), Math.random());\n          const material = new THREE.MeshBasicMaterial({\n            color: color.getHex(),\n            wireframe: true\n          });\n          const sphereHelper = new THREE.Mesh(geometrySphere, material);\n          sphereHelper.position.copy(node.boundingSphere.center);\n          sphereHelper.scale.multiplyScalar(node.boundingSphere.radius);\n          sphereHelper.scale.set(1, 1, 1).multiplyScalar(node.boundingSphere.radius);\n          sphereHelper.layer = layer;\n          helper.add(sphereHelper);\n        }\n        node.link[layer.id] = helper;\n      }\n      layer.object3d.add(helper);\n      helper.updateMatrixWorld(true);\n    } else if (helper) {\n      layer.object3d.remove(helper);\n    }\n  }\n  class DebugLayer extends GeometryLayer {\n    constructor(id) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      options.update = debugIdUpdate;\n      super(id, options.object3d || new THREE.Group(), options);\n      this.isDebugLayer = true;\n    }\n    preUpdate(context, sources) {\n      if (sources.has(this.parent)) {\n        this.object3d.clear();\n      }\n    }\n  }\n  const obbLayer = new DebugLayer(obb_layer_id, {\n    visible: false,\n    cacheLifeTime: Infinity,\n    source: false\n  });\n  view.addLayer(obbLayer).then(l => {\n    gui.add(l, 'visible').name('Bounding boxes').onChange(() => {\n      view.notifyChange(l);\n    });\n  });\n  const sbLayer = new DebugLayer(sb_layer_id, {\n    visible: false,\n    cacheLifeTime: Infinity,\n    source: false\n  });\n  view.addLayer(sbLayer).then(l => {\n    gui.add(l, 'visible').name('Bounding Spheres').onChange(() => {\n      view.notifyChange(l);\n    });\n  });\n  const viewerDiv = document.getElementById('viewerDiv');\n  const circle = document.createElement('span');\n  circle.className = 'circleBase';\n  viewerDiv.appendChild(circle);\n  const centerNode = new THREE.Vector3();\n  let actualNode;\n  const animationFrameRequester = () => {\n    TWEEN.update();\n    view.notifyChange();\n  };\n  const removeAnimationRequester = () => {\n    TWEEN.removeAll();\n    if (view._frameRequesters[MAIN_LOOP_EVENTS.BEFORE_RENDER].includes(animationFrameRequester)) {\n      view.removeFrameRequester(MAIN_LOOP_EVENTS.BEFORE_RENDER, animationFrameRequester);\n    }\n  };\n  function picking(event) {\n    const selectNode = selectTileAt(view, event, false);\n    if (selectNode) {\n      circle.style.display = 'table-cell';\n      centerNode.copy(selectNode.boundingSphere.center).applyMatrix4(selectNode.matrixWorld);\n      const project = centerNode.project(view.camera3D);\n      const coords = view.normalizedToViewCoords(project);\n      const size = selectNode.screenSize;\n      if (actualNode != selectNode) {\n        const actualSize = Number(circle.style.width.replace('px', ''));\n        actualNode = selectNode;\n        removeAnimationRequester();\n        new TWEEN.Tween({\n          size: actualSize\n        }).to({\n          size\n        }, 500).easing(TWEEN.Easing.Sinusoidal.In).easing(TWEEN.Easing.Exponential.Out).onUpdate(object => {\n          circle.style['line-height'] = `${object.size}px`;\n          circle.style.width = `${object.size}px`;\n          circle.style.height = `${object.size}px`;\n          circle.innerHTML = `${Math.floor(object.size)} px`;\n          circle.style.left = `${coords.x - object.size * 0.5}px`;\n          circle.style.top = `${coords.y - object.size * 0.5}px`;\n        }).onComplete(removeAnimationRequester).start();\n        view.addFrameRequester(MAIN_LOOP_EVENTS.BEFORE_RENDER, animationFrameRequester);\n      }\n    } else {\n      circle.style.display = 'none';\n    }\n  }\n  gui.add(state, 'sseHelper').name('Sse helper').onChange(v => {\n    if (v) {\n      window.addEventListener('mousemove', picking, false);\n    } else {\n      circle.style.display = 'none';\n      removeAnimationRequester();\n      window.removeEventListener('mousemove', picking);\n    }\n  });\n  let currKey = null;\n  window.addEventListener('mousedown', event => {\n    if (currKey == 83) {\n      selectTileAt(view, event);\n    }\n  });\n  window.addEventListener('keydown', event => {\n    currKey = event.which;\n  });\n  window.addEventListener('keyup', () => {\n    currKey = null;\n  });\n}","import * as THREE from 'three';\nimport View from \"../../src/Core/View.js\";\nimport GeometryLayer from \"../../src/Layer/GeometryLayer.js\";\nimport { C3DTilesBoundingVolumeTypes } from \"../../src/Core/3DTiles/C3DTilesEnums.js\";\nimport { PNTS_MODE, PNTS_SHAPE, PNTS_SIZE_MODE } from \"../../src/Renderer/PointsMaterial.js\";\nimport GeometryDebug from \"./GeometryDebug.js\";\nconst bboxMesh = new THREE.Mesh();\nexport default function create3dTilesDebugUI(datDebugTool, view, _3dTileslayer) {\n  const gui = GeometryDebug.createGeometryDebugUI(datDebugTool, view, _3dTileslayer);\n\n  // add wireframe\n  GeometryDebug.addWireFrameCheckbox(gui, view, _3dTileslayer);\n\n  // Bounding box control\n  const boundingVolumeID = `${_3dTileslayer.id}_bounding_volume_debug`;\n  const boundingVolumeLayer = new GeometryLayer(boundingVolumeID, new THREE.Object3D(), {\n    update: function (context, layer, node) {\n      // Tile (https://github.com/CesiumGS/3d-tiles/blob/main/specification/schema/tile.schema.json) containing\n      // metadata for the tile\n      const tile = node.userData.metadata;\n\n      // Get helper from the node if it has already been computed\n      let helper = node.userData.boundingVolumeHelper;\n\n      // Hide bounding volumes if 3D Tiles layer is hidden\n      if (helper) {\n        helper.visible = !!(layer.visible && node.visible);\n        return;\n      }\n      if (layer.visible && node.visible && tile.boundingVolume) {\n        if (tile.boundingVolume.initialVolumeType === C3DTilesBoundingVolumeTypes.box) {\n          var _tile$content, _tile$content2;\n          bboxMesh.geometry.boundingBox = tile.boundingVolume.volume;\n          helper = new THREE.BoxHelper(bboxMesh);\n          helper.material.linewidth = 2;\n          // compensate GLTF orientation correction based on gltfUpAxis only for b3dm tiles\n          if ((_tile$content = tile.content) !== null && _tile$content !== void 0 && _tile$content.uri && (_tile$content2 = tile.content) !== null && _tile$content2 !== void 0 && _tile$content2.uri.endsWith('b3dm')) {\n            const gltfUpAxis = _3dTileslayer.tileset.asset.gltfUpAxis;\n            if (gltfUpAxis === undefined || gltfUpAxis === 'Y') {\n              helper.rotation.x = -Math.PI * 0.5;\n            } else if (gltfUpAxis === 'X') {\n              helper.rotation.z = -Math.PI * 0.5;\n            }\n            helper.updateMatrix();\n          }\n        } else if (tile.boundingVolume.initialVolumeType === C3DTilesBoundingVolumeTypes.sphere || tile.boundingVolume.initialVolumeType === C3DTilesBoundingVolumeTypes.region) {\n          const geometry = new THREE.SphereGeometry(tile.boundingVolume.volume.radius, 32, 32);\n          const material = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: Math.random() * 0xffffff\n          });\n          helper = new THREE.Mesh(geometry, material);\n        } else {\n          console.warn(`[3D Tiles Debug]: Unknown bounding volume: ${tile.boundingVolume}`);\n          return;\n        }\n        node.userData.boundingVolumeHelper = helper;\n        node.parent.add(helper);\n        helper.updateMatrixWorld(true);\n      }\n    },\n    visible: false,\n    cacheLifeTime: Infinity,\n    source: false\n  });\n  View.prototype.addLayer.call(view, boundingVolumeLayer, _3dTileslayer).then(l => {\n    gui.add(l, 'visible').name('Bounding boxes').onChange(() => {\n      view.notifyChange(view.camera3D);\n    });\n  });\n\n  // The sse Threshold for each tile\n  gui.add(_3dTileslayer, 'sseThreshold', 0, 100).name('sseThreshold').onChange(() => {\n    view.notifyChange(view.camera3D);\n  });\n  gui.add({\n    frozen: _3dTileslayer.frozen\n  }, 'frozen').onChange(value => {\n    _3dTileslayer.frozen = value;\n    view.notifyChange(_3dTileslayer);\n  });\n  if (_3dTileslayer.hasPnts) {\n    const _3DTILES_PNTS_MODE = {\n      CLASSIFICATION: PNTS_MODE.CLASSIFICATION,\n      COLOR: PNTS_MODE.COLOR\n    };\n    gui.add(_3dTileslayer, 'pntsMode', _3DTILES_PNTS_MODE).name('Display mode').onChange(() => {\n      _3dTileslayer.pntsMode = +_3dTileslayer.pntsMode;\n      view.notifyChange(view.camera.camera3D);\n    });\n    gui.add(_3dTileslayer, 'pntsShape', PNTS_SHAPE).name('Points Shape').onChange(() => {\n      view.notifyChange(view.camera.camera3D);\n    });\n    gui.add(_3dTileslayer, 'pntsSizeMode', PNTS_SIZE_MODE).name('Pnts size mode').onChange(() => {\n      view.notifyChange(view.camera.camera3D);\n    });\n    gui.add(_3dTileslayer, 'pntsMinAttenuatedSize', 0, 15).name('Min attenuated size').onChange(() => {\n      view.notifyChange(view.camera.camera3D);\n    });\n    gui.add(_3dTileslayer, 'pntsMaxAttenuatedSize', 0, 15).name('Max attenuated size').onChange(() => {\n      view.notifyChange(view.camera.camera3D);\n    });\n  }\n}"],"names":["root","factory","exports","module","define","amd","self","round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","rgb2hsl","r","g","hueValue","calln","Array","isArray","map","hsl2rgb","hue","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names","RGB_RE","to","pow","from","modHSL","ratio","tmp","clone","proto","Object","assign","fromObject","input","length","functionParse","str","charAt","m","exec","rgbParse","p1","p2","hwb2rgb","hsv2rgb","hueParse","Color","constructor","type","ret","len","unpacked","keys","tkeys","j","ok","nk","replace","parseInt","unpack","transparent","toLowerCase","nameParse","this","_rgb","_valid","valid","obj","rgbString","undefined","hexString","isShort","alpha","hslString","mix","color","weight","c1","c2","w2","p","w1","interpolate","t","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","resolveObjectKey","resolver","parts","split","part","endsWith","push","_splitKey","_getKeyResolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","PI","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","range","roundedRange","niceRange","floor","fraction","isNumber","isNaN","parseFloat","toRadians","degrees","_decimalPlaces","distanceBetweenPoints","pt1","pt2","sqrt","_angleDiff","_normalizeAngle","_angleBetween","angle","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","array","listener","stub","_chartjs","listeners","splice","forEach","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_alignStartEnd","align","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","set","getNumberFormat","format","formatters","values","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","overrides","descriptors","getScope$1","node","scope","Defaults","_descriptors","_appliers","animation","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","name","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","loop","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","right","bottom","left","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","drawPointLegend","_isPointInArea","point","area","margin","clipArea","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","decorateText","line","opts","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","fillStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","translation","textAlign","textBaseline","setRenderOpts","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toPadding","toFont","fallback","console","warn","toFontString","resolve","inputs","info","cacheable","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","isScriptable","getValue","Error","join","add","delete","_resolveScriptable","isIndexable","arr","filter","_resolveArray","_resolveWithContext","allKeys","configurable","scriptable","indexable","_allKeys","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","getPoint","points","skip","getValueAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","capControlPoint","pt","_updateBezierControlPoints","controlPoints","spanGaps","cubicInterpolationMode","valueAxis","pointsLen","deltaK","mK","pointBefore","pointCurrent","pointAfter","slopeDelta","alphaK","betaK","tauK","squaredMagnitude","monotoneAdjust","iPixel","vPixel","monotoneCompute","splineCurveMonotone","prev","tension","capBezierPoints","inArea","inAreaPrev","inAreaNext","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","useOffsetPos","shadowRoot","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","touches","offsetX","offsetY","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","property","el","getPropertyValue","getStyle","_pointInLine","_steppedInterpolation","_bezierInterpolation","cp1","cp2","propertyFn","between","compare","normalize","normalizeSegment","count","_boundSegment","segment","startBound","endBound","getSegment","prevValue","inside","subStart","readStyle","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","styleChanged","prevStyle","replacer","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","items","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","all","awaitAll","then","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","adata","convertObjectDataToArray","isExtensible","defineProperty","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","sorted","_sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","disabled","toClip","defaultClip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","computeMinSampleSize","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","getAllScaleValues","curr","_length","updateMinAndPrev","getPixelForValue","getPixelForTick","parseValue","entry","startValue","endValue","barStart","barEnd","_custom","parseFloatBar","parseArrayOrPrimitive","isFloatBar","custom","setBorderSkipped","edge","borderSkipped","horizontal","borderProps","enableBorderRadius","parseEdge","orig","v2","startEnd","setInflateAmount","inflateAmount","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestItems","distanceMetric","useX","useY","deltaX","deltaY","getDistanceMetricForAxis","minDistance","center","getCenterPoint","distance","getNearestCartesianItems","startAngle","endAngle","getProps","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","atan2","getAngleFromPoint","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","params","layout","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","changed","fullSize","setBoxDims","placeBoxes","userPadding","placed","stackWeight","layouts","addBox","_layers","z","removeBox","layoutItem","minPadding","availableWidth","availableHeight","layoutBoxes","isHorizontal","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","vBoxMaxWidth","hBoxMaxHeight","buildStacks","setLayoutDims","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","aspectRatio","releaseContext","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","bbWidth","bbHeight","margins","maxHeight","containerSize","containerStyle","containerBorder","containerPadding","clientHeight","getContainerSize","isConnected","Element","tooltipPosition","hasValue","final","newTicks","spacing","majorStart","majorEnd","ceil","offsetFromEdge","getTicksLimit","ticksLength","maxTicksLimit","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getTickMarkLength","getTitleHeight","titleAlign","_toLeftRightCenter","reverseAlign","Scale","super","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","minmax","dimension","keepZero","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","determinedMaxTicks","_tickSize","maxScale","maxChart","determineMaxTicks","ticksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","_factorize","calculateSpacing","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","garbageCollect","valueAt","idx","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBasePixel","getBaseValue","createTickContext","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","itemDefaults","defaultRoutes","routes","propertyParts","sourceName","sourceScope","routeDefaults","registerDefaults","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","getAxisFromDataset","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","hasFunction","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","timeout","clearTimeout","setTimeout","debounce","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","_isClickEvent","lastEvent","determineLastEvent","setStyle","lineCap","lineJoin","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","getLineMethod","fastPathSegment","prevX","minY","maxY","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","_decimated","usePath2D","Path2D","inRange$1","hitRadius","getBarBounds","bar","half","skipOrLimit","boundingRects","maxW","maxH","parseBorderWidth","borderRadius","toTRBLCorners","maxR","enableBorder","parseBorderRadius","outer","inner","skipX","skipY","addNormalRectPath","inflateRect","amount","refRect","_getLabelForValue","WeakMap","relativeLabelSize","minSpacing","LinearScaleBase","_startValue","_endValue","_valueRange","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","rounded","almostWhole","decimalPlaces","generateTicks$1","_setMinAndMaxByKey","LinearScale","gridLines","zeroLineColor","color_rose","color_blue","backgroundChartDiv","ThreeStatsChart","renderer","lastValidCompareIndex","timestamp","textureDataset","pointRadius","geometryDataset","displayed","timeInS","lbl","memory","textures","geometries","_index_","_value_","animationsDisabled","pointCount","_getStartAndCountOfVisiblePoints","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","_scaleRangesChanged","_datasetIndex","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","lastPoint","updateControlPoints","_fullLoop","_path","_points","_segments","_pointsUpdated","segments","segmentOptions","findStartAndEnd","chartContext","baseStyle","addStyle","st","dir","p0","p0DataIndex","p1DataIndex","doSplitByStyles","splitByStyles","solidSegments","_computeSegments","sub","_boundSegments","_interpolate","_getInterpolationMethod","interpolated","segmentMethod","path","strokePathWithCache","strokePathDirect","hoverBorderWidth","hoverRadius","mouseX","mouseY","inXRange","inYRange","_addedLabels","added","addedLabels","unshift","addIfString","lastIndexOf","findOrAddLabel","addRectPath","categoryPercentage","barPercentage","grouped","iAxisKey","vAxisKey","bars","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","_getStacks","skipNull","_getStackCount","_getStackIndex","pixels","barThickness","stackCount","baseValue","minBarLength","actualBase","floating","barSign","halfGrid","maxBarThickness","Infinity","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","rects","OBBHelper","OBB","random","box3D","getHex","obb","material","linewidth","frustumCulled","matrixAutoUpdate","rotationAutoUpdate","updateMatrixWorld","force","isEmpty","quaternion","copy","getCenter","applyQuaternion","getSize","multiplyScalar","updateMatrix","Debug","view","datDebugTool","chartDivContainer","createElement","cssText","body","appendChild","createChartContainer","mainLoop","gfxEngine","tileLayer","initialPosition","Coordinates","referenceCrs","geoPosition","gui","addFolder","state","displayCharts","eventsDebug","debugCameraWindow","before","startChart","endChart","updateDuration","debugChartUpdate","LatController","LongController","AltiController","eventFolder","onChange","newValue","addFrameRequester","UPDATE_START","UPDATE_END","removeFrameRequester","updateChartDivSize","notifyChange","AFTER_RENDER","renderCameraDebug","frozen","controls","crs","cursorWorldPosition","getCameraTargetPosition","camera3D","cameraTargetListener","getPickingPositionFromDepth","eventToViewCoords","setFromVector3","as","latitude","toFixed","longitude","altitude","updateDisplay","open","domElement","removeFolder","helper","CameraHelper","debugCamera","fov","updateProjectionMatrix","fogDistance","layerAtmosphere","getLayerById","fog","scene","displayedTilesObb","displayedTilesObbHelper","updateFogDistance","clearColor","lookAtCameraDebug","Vector3","aspect","camera","coord","extent","setFromExtent","altitudeCameraDebug","toVector3","worldToLocal","localToWorld","lookAt","object3d","level0Nodes","traverseVisible","getClearColor","setViewport","setScissor","setScissorTest","setClearColor","chartId","div","chartCanvas","getElementsByTagName","__folders","Styling","__controllers","hideController","__li","showController","setupControllerVisibily","INTENSITY","ELEVATION","SCAN_ANGLE","initTools","layer","datUi","debugUI","dbgStickyNode","dbgDisplaySticky","dbgDisplayChildren","dbgDisplayParents","styleUI","modeNames","gradiantsNames","gradients","gradient","minIntensityRange","maxIntensityRange","minElevationRange","maxElevationRange","minAngleRange","maxAngleRange","shape","sizeMode","picking","bboxes","displayedCount","stickies","pts","group","children","isInHierarchy","name1","name2","owner","boxHelper","geometry","attributes","TileObjectsChart","viewLevelStartDataset","viewUpdateDurationDataset","nbObjectsChart","_latestUpdateStartingLevel","TileVisibilityChart","nbVisibleLabels","nbVisibleData","nbDisplayedData","nbVisibleChart","stats","countVisible","level","child","addMaterialLayerProperty","defineLayerProperty","traverse","content","addWireFrameCheckbox","addMaterialSize","begin","addMaterialLineWidth","createGeometryDebugUI","selectedNode","selectTileAt","mouseOrEvt","showInfo","overlayAlpha","showOutline","picked","pickObjectsAt","createTileDebugUI","debugInstance","isDebugMode","GeometryDebug","objectChardId","canvasObjectChardId","visibleChardId","canvasVisibleChardId","wireframe","objectChart","visibilityChart","sseHelper","applyToNodeFirstMaterial","obb_layer_id","sb_layer_id","geometrySphere","debugIdUpdate","ObjectRemovalHelper","removeChildrenAndCleanupRecursively","link","matrixWorld","decompose","obbHelper","sphereHelper","boundingSphere","DebugLayer","GeometryLayer","isDebugLayer","preUpdate","obbLayer","cacheLifeTime","addLayer","sbLayer","viewerDiv","circle","className","centerNode","actualNode","animationFrameRequester","removeAnimationRequester","_frameRequesters","BEFORE_RENDER","selectNode","applyMatrix4","project","coords","normalizedToViewCoords","screenSize","actualSize","Sinusoidal","In","Exponential","Out","onUpdate","innerHTML","currKey","which","bboxMesh","create3dTilesDebugUI","_3dTileslayer","boundingVolumeID","boundingVolumeLayer","tile","userData","metadata","boundingVolumeHelper","boundingVolume","initialVolumeType","_tile$content","_tile$content2","boundingBox","volume","uri","gltfUpAxis","tileset","asset","sphere","region","View","hasPnts","_3DTILES_PNTS_MODE","CLASSIFICATION","COLOR","pntsMode"],"sourceRoot":""}